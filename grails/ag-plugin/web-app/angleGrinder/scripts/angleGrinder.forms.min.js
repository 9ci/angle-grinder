(function() {
    var forms;
    forms = angular.module("angleGrinder.forms", [ "angleGrinder.common", "ui.bootstrap", "$strap.directives" ]);
    forms.value("$strapConfig", {
        "datepicker": {
            "language": "en",
            "format": "mm/dd/yyyy",
            "type": "iso",
            "autoClose": true,
            "forceParse": false
        }
    });
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agDeleteButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "scope": {
                "whenConfirmed": "&"
            },
            "controller": [ "$scope", function($scope) {
                $scope.confirmation = false;
                $scope.showConfirmation = function() {
                    return $scope.confirmation = true;
                };
                return $scope.doDelete = function() {
                    var promise;
                    $scope.confirmation = false;
                    promise = $scope.whenConfirmed();
                    $scope.deleting = true;
                    return promise != null ? typeof promise["finally"] === "function" ? promise["finally"](function() {
                        return $scope.deleting = false;
                    }) : void 0 : void 0;
                };
            } ],
            "template": '<button type="button"\n        class="btn ag-delete-button"\n        ng-class="{ true: \'btn-warning\', false: \'btn-danger\' }[confirmation]"\n        ng-disabled="deleting"\n        ng-mouseleave="confirmation = false"\n        ng-click="confirmation ? doDelete() : showConfirmation()">\n  <i class="icon-trash"></i>\n\n  <ng-switch on="confirmation">\n    <span ng-switch-default>Delete</span>\n    <span ng-switch-when="true">Are you sure?</span>\n  </ng-switch>\n\n  <span ng-if="deleting">...</span>\n</button>'
        };
    });
    forms.directive("agCreateButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "transclude": true,
            "compile": function(element, attrs, trasclude) {
                return {
                    "pre": function(scope, element) {
                        return trasclude(scope, function(clone) {
                            if ($.trim(clone.text()) === "") {
                                return element.append("Create");
                            }
                        });
                    }
                };
            },
            "template": '<a href="" class="btn">\n  <i class="icon-edit"></i>\n  <span ng-transclude></span>\n</a>'
        };
    });
    forms.directive("agCancelButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "template": '<button type="button" class="btn">\n  <i class="icon-remove"></i> Cancel\n</button>'
        };
    });
    forms.directive("agSubmitButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "scope": true,
            "require": "^form",
            "link": function(scope, element, attrs, form) {
                return scope.submit = function() {
                    var FormCtrl, markAsSubmitted;
                    FormCtrl = form.constructor;
                    markAsSubmitted = function(form) {
                        var nested, nestedForms, _i, _len, _results;
                        form.$submitted = true;
                        nestedForms = _.filter(_.values(form), function(input) {
                            return input instanceof FormCtrl;
                        });
                        _results = [];
                        for (_i = 0, _len = nestedForms.length; _i < _len; _i++) {
                            nested = nestedForms[_i];
                            _results.push(markAsSubmitted(nested));
                        }
                        return _results;
                    };
                    return markAsSubmitted(form);
                };
            },
            "controller": [ "$scope", "pendingRequests", function($scope, pendingRequests) {
                return $scope.$watch(function() {
                    return $scope.saving = pendingRequests["for"]("POST", "PUT", "PATCH");
                });
            } ],
            "template": '<button type="submit" class="btn btn-primary"\n        ng-click="submit()"\n        ng-disabled="saving"\n  <i class="icon-ok icon-white"></i> Save<span ng-show="saving">...</span>\n</button>'
        };
    });
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.value("validationMessages", {
        "required": "This field is required",
        "mismatch": "Does not match the confirmation",
        "minlength": "This field is too short",
        "maxlength": "This field is too long",
        "email": "Invalid email address",
        "pattern": "Invalid pattern"
    });
    forms.directive("match", [ "isEmpty", function(isEmpty) {
        return {
            "require": "ngModel",
            "link": function(scope, elem, attrs, modelCtrl) {
                var validateEqual, validator;
                validateEqual = function(value, otherValue) {
                    var allEmpty, valid;
                    allEmpty = _.all([ isEmpty(value), isEmpty(otherValue) ]);
                    valid = allEmpty || value === otherValue;
                    modelCtrl.$setValidity("mismatch", valid);
                    return value;
                };
                scope.$watch(attrs.match, function(otherValue) {
                    return validateEqual(modelCtrl.$viewValue, otherValue);
                });
                validator = function(value) {
                    var otherValue;
                    otherValue = scope.$eval(attrs.match);
                    return validateEqual(value, otherValue);
                };
                modelCtrl.$parsers.unshift(validator);
                return modelCtrl.$formatters.unshift(validator);
            }
        };
    } ]);
    forms.directive("agFieldGroup", [ "$timeout", "$log", function($timeout, $log) {
        return {
            "restrict": "A",
            "require": "^form",
            "replace": true,
            "transclude": true,
            "template": '<div class="control-group" ng-transclude></div>',
            "link": function(scope, element, attrs, formCtrl) {
                var fields, toggleErrors;
                fields = (attrs["for"] || "").split(",");
                toggleErrors = function() {
                    return $timeout(function() {
                        var invalid;
                        invalid = _.map(fields, function(field) {
                            var _ref, _ref1;
                            return ((_ref = formCtrl[field]) != null ? _ref.$invalid : void 0) || ((_ref1 = formCtrl.$serverError) != null ? _ref1[field] : void 0);
                        });
                        if (_.any(invalid)) {
                            return element.addClass("error");
                        } else {
                            return element.removeClass("error");
                        }
                    });
                };
                angular.forEach(fields, function(fieldName) {
                    return scope.$watch("" + formCtrl.$name + "." + fieldName + ".$viewValue", function() {
                        var _ref;
                        if (!((_ref = formCtrl[fieldName]) != null ? _ref.$dirty : void 0)) {
                            return;
                        }
                        $log.debug("[validations] field value was changed", formCtrl, formCtrl[fieldName]);
                        return toggleErrors();
                    });
                });
                angular.forEach(fields, function(fieldName) {
                    var initial;
                    initial = true;
                    return scope.$watch("" + formCtrl.$name + ".$serverError." + fieldName, function() {
                        if (!initial) {
                            toggleErrors();
                        }
                        return initial = false;
                    });
                });
                return scope.$watch("" + formCtrl.$name + ".$submitted", function(submitted) {
                    if (!submitted) {
                        return;
                    }
                    $log.debug("[validations] form was submitted", formCtrl);
                    return toggleErrors();
                });
            }
        };
    } ]);
    forms.directive("agValidationErrors", [ "validationMessages", function(validationMessages) {
        return {
            "restrict": "E",
            "require": "^form",
            "replace": true,
            "link": function(scope, element, attrs, formCtrl) {
                var appendError, clearErrors, displayErrorMessages, field, fieldName, formName, initial, messageFor;
                formName = formCtrl.$name;
                fieldName = attrs["for"];
                field = formCtrl[fieldName];
                clearErrors = function() {
                    return element.html("");
                };
                messageFor = function(error) {
                    return attrs[error] || validationMessages[error];
                };
                appendError = function(message, klass) {
                    if (klass == null) {
                        klass = "";
                    }
                    return element.append('<span class="help-inline ' + klass + '">' + message + "</span>");
                };
                displayErrorMessages = function() {
                    var error, invalid, message, _ref, _results;
                    clearErrors();
                    _ref = field.$error;
                    _results = [];
                    for (error in _ref) {
                        invalid = _ref[error];
                        if (!invalid) {
                            continue;
                        }
                        message = messageFor(error);
                        if (message != null) {
                            _results.push(appendError(message));
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                };
                initial = true;
                scope.$watch("" + formName + "." + fieldName + ".$valid", function() {
                    if (!initial) {
                        displayErrorMessages();
                    }
                    return initial = false;
                });
                scope.$watch("" + formName + "." + fieldName + ".$viewValue", function() {
                    if (field.$dirty) {
                        return displayErrorMessages();
                    }
                });
                scope.$watch("" + formName + ".$submitted", function(submitted) {
                    if (submitted) {
                        return displayErrorMessages();
                    }
                });
                scope.$watch("" + formName + ".$serverError." + fieldName, function(serverError) {
                    if (serverError != null) {
                        return appendError(serverError, "server-error");
                    } else {
                        return element.find(".server-error").remove();
                    }
                });
                return scope.$watch("saving", function(saving) {
                    if (saving) {
                        return displayErrorMessages();
                    }
                });
            }
        };
    } ]);
    forms.directive("agServerValidationErrors", function() {
        return {
            "restrict": "A",
            "require": "^form",
            "link": function(scope, element, attrs, formCtrl) {
                formCtrl.$serverError = {};
                return scope.$watch("" + formCtrl.$name + ".$serverError", function(serverError) {
                    return angular.forEach(serverError, function(_, fieldName) {
                        var unregister;
                        return unregister = scope.$watch("" + formCtrl.$name + "." + fieldName + ".$viewValue", function(oldVal, newVal) {
                            if (oldVal !== newVal) {
                                formCtrl.$serverError[fieldName] = null;
                                return unregister();
                            }
                        });
                    });
                });
            }
        };
    });
    forms.factory("serverValidationErrorsHandler", [ "$log", function($log) {
        var setErrors;
        setErrors = function(form, errors) {
            var error, key, _results;
            form.$serverError = {};
            _results = [];
            for (key in errors) {
                error = errors[key];
                if (typeof error === "object" && form[key] != null) {
                    setErrors(form[key], error);
                }
                if (typeof error === "string") {
                    _results.push(form.$serverError[key] = error);
                } else {
                    _results.push(void 0);
                }
            }
            return _results;
        };
        return function(form, response, resourceName) {
            var errors, _ref, _ref1;
            errors = (_ref = response.data) != null ? (_ref1 = _ref.errors) != null ? _ref1[resourceName] : void 0 : void 0;
            if (response.status !== 422 || errors == null) {
                $log.warn("Response does not contain validation errors", response);
                return;
            }
            return setErrors(form, errors);
        };
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.factory("focus", [ "$rootScope", "$timeout", function($rootScope, $timeout) {
        return function(name) {
            return $timeout(function() {
                return $rootScope.$broadcast("focusOn", name);
            });
        };
    } ]);
    forms.directive("agFocus", function() {
        return {
            "restrict": "A",
            "link": function(scope, element, attributes) {
                var currentName;
                currentName = attributes.agFocus;
                return scope.$on("focusOn", function(event, name) {
                    if (currentName === name) {
                        element.addClass("ag-focused");
                        return element[0].focus();
                    }
                });
            }
        };
    });
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.factory("massUpdateHandler", [ "$log", function($log) {
        return function(grid, result) {
            var error, id, row, _i, _len, _ref, _ref1, _results;
            $log.info("[forms] Mass update response", result);
            if (result.data != null) {
                _ref = result.data;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    row = _ref[_i];
                    grid.updateRow(row.id, row);
                }
            } else {
                $log.warn("[forms] Invalid JSON response, missing data array");
            }
            if (result.errors != null) {
                _ref1 = result.errors;
                _results = [];
                for (id in _ref1) {
                    error = _ref1[id];
                    _results.push(grid.flashOnError(id));
                }
                return _results;
            } else {
                return $log.warn("[forms] Invalid JSON response, missing errors assoc array");
            }
        };
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.factory("formDialog", [ "$modal", "pathWithContext", function($modal, pathWithContext) {
        return {
            "open": function(templateUrl, dialogOptions) {
                if (dialogOptions == null) {
                    dialogOptions = {};
                }
                return $modal.open({
                    "templateUrl": pathWithContext(templateUrl),
                    "controller": "FormDialogCtrl",
                    "keyboard": false,
                    "backdrop": "static",
                    "resolve": {
                        "dialogOptions": function() {
                            return dialogOptions;
                        }
                    }
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var FormDialogCtrl, forms;
    forms = angular.module("angleGrinder.forms");
    FormDialogCtrl = function() {
        FormDialogCtrl.$inject = [ "$scope", "$rootScope", "$log", "$modalInstance", "serverValidationErrorsHandler", "dialogOptions" ];
        function FormDialogCtrl($scope, $rootScope, $log, $modalInstance, serverValidationErrorsHandler, dialogOptions) {
            var grid, item, _ref;
            $scope.dialogOptions = dialogOptions;
            _ref = $scope.dialogOptions, item = _ref.item, grid = _ref.grid;
            $scope.item = item;
            $scope.createNew = !item.persisted();
            $scope.closeDialog = function() {
                $log.info("[ag] closing the dialog");
                return $modalInstance.close($scope.item);
            };
            $scope.save = function(form, item) {
                var onError, onSuccess;
                if (!form.$valid) {
                    return;
                }
                onSuccess = function(response) {
                    $log.info("[ag] item has been updated/created", response);
                    grid.saveRow(response.id, response);
                    return $scope.closeDialog();
                };
                onError = function(response) {
                    $log.error("[ag] something went wront", response);
                    return serverValidationErrorsHandler(form, response, item.resourceName());
                };
                return item.save({
                    "success": onSuccess,
                    "error": onError
                }).$promise;
            };
            $scope["delete"] = function() {
                var onError, onSuccess;
                onSuccess = function(response) {
                    $log.info("[ag] item has been deleted", response);
                    grid.removeRow(item.id);
                    return $scope.closeDialog();
                };
                onError = function(response) {
                    return $log.error("[ag] something went wront", response);
                };
                return item["delete"]({
                    "success": onSuccess,
                    "error": onError
                }).$promise;
            };
        }
        return FormDialogCtrl;
    }();
    forms.controller("FormDialogCtrl", FormDialogCtrl);
}).call(this);

(function() {
    var ConfirmationDialog, ConfirmationDialogCtrl, forms;
    forms = angular.module("angleGrinder.forms");
    ConfirmationDialogCtrl = function() {
        ConfirmationDialogCtrl.$inject = [ "$scope", "$modalInstance", "$log", "message" ];
        function ConfirmationDialogCtrl($scope, $modalInstance, $log, message) {
            $scope.message = message;
            $scope.close = function(confirmed) {
                $log.info("Confirmation dialog closed", confirmed);
                return $modalInstance.close(confirmed);
            };
        }
        return ConfirmationDialogCtrl;
    }();
    forms.controller("ConfirmationDialogCtrl", ConfirmationDialogCtrl);
    forms.run([ "$templateCache", function($templateCache) {
        return $templateCache.put("templates/dialogs/confirmation.html", '<div class="modal-body">{{message}}</div>\n\n<div class="modal-footer">\n  <button class="btn" ng-click="close(false)">Cancel</button>\n  <button class="btn btn-primary" ng-click="close(true)">OK</button>\n</div>');
    } ]);
    ConfirmationDialog = function() {
        ConfirmationDialog.$inject = [ "$modal", "$log" ];
        function ConfirmationDialog($modal, $log) {
            this.$modal = $modal;
            this.$log = $log;
        }
        ConfirmationDialog.prototype.open = function(message) {
            if (message == null) {
                message = null;
            }
            this.$log.info("Opening confirmation dialog, message:", message);
            return this.$modal.open({
                "templateUrl": "templates/dialogs/confirmation.html",
                "controller": "ConfirmationDialogCtrl",
                "keyboard": false,
                "backdrop": "static",
                "resolve": {
                    "message": function() {
                        if (message != null) {
                            return message;
                        } else {
                            return "Are you sure?";
                        }
                    }
                }
            });
        };
        return ConfirmationDialog;
    }();
    forms.service("confirmationDialog", ConfirmationDialog);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agTabset", function() {
        return {
            "restrict": "E",
            "replace": true,
            "transclude": true,
            "scope": true,
            "controller": [ "$log", "$scope", function($log, $scope) {
                $scope.tabs = [];
                $scope.contentLoading = false;
                $scope.currentTab = function() {
                    return _.findWhere($scope.tabs, {
                        "selected": true
                    });
                };
                $scope.currentTemplateUrl = function() {
                    var currentTab;
                    currentTab = $scope.currentTab();
                    if (currentTab) {
                        return currentTab.tplSrc;
                    }
                };
                $scope.contentLoaded = function() {
                    var tab;
                    $scope.contentLoading = false;
                    tab = $scope.currentTab();
                    tab.loading = false;
                    return $log.debug("[tabs] content loaded", tab);
                };
                this.selectTab = function(tab) {
                    angular.forEach($scope.tabs, function(tab) {
                        return tab.selected = tab.loading = false;
                    });
                    tab.selected = true;
                    tab.loading = true;
                    return $scope.contentLoading = true;
                };
                this.addTab = function(tab, select) {
                    if (select == null) {
                        select = false;
                    }
                    $scope.tabs.push(tab);
                    if (select || $scope.tabs.length === 1) {
                        return this.selectTab(tab);
                    }
                };
            } ],
            "template": '<div class="container">\n  <div class="nav nav-tabs" ng-transclude></div>\n  <div class="tab container">\n    <span ng-if="contentLoading">loading the content</span>\n    <ng-include src="currentTemplateUrl()"\n                onload="contentLoaded()"\n                ng-hide="contentLoading"></ng-include>\n  </div>\n</div>'
        };
    });
    forms.directive("agTab", [ "$log", "pathWithContext", function($log, pathWithContext) {
        return {
            "restrict": "E",
            "replace": true,
            "require": "^agTabset",
            "transclude": true,
            "scope": {
                "templateUrl": "@",
                "active": "&"
            },
            "link": function(scope, element, attrs, tabsetCtrl) {
                scope.tplSrc = pathWithContext(scope.templateUrl);
                scope.selected = false;
                scope.loading = false;
                tabsetCtrl.addTab(scope, scope.active());
                return scope.select = function() {
                    if (scope.selected) {
                        return;
                    }
                    return tabsetCtrl.selectTab(scope);
                };
            },
            "template": '<li ng-click="select()" ng-class="{active: selected, loading: loading}">\n  <a href="" ng-transclude>{{heading}}</a>\n</li>'
        };
    } ]);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agPanelsRow", function() {
        return {
            "restrict": "C",
            "controller": [ "$log", "$scope", "$element", "$timeout", function($log, $scope, $element, $timeout) {
                var equalizeHeights, unregister;
                this.panels = [];
                equalizeHeights = function(_this) {
                    return function() {
                        var heights, maxHeight, paddings, panelEl, _i, _len, _ref, _results;
                        heights = _this.panels.map(function(panel) {
                            return panel.height();
                        });
                        maxHeight = Math.max.apply(null, heights);
                        $log.debug("[agPanelsRow] equalizing heights for", $element, "max height is " + maxHeight + "px");
                        _ref = _this.panels;
                        _results = [];
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            panelEl = _ref[_i];
                            paddings = 30;
                            paddings += panelEl.find(".panel-heading").outerHeight();
                            paddings += panelEl.find(".panel-footer").outerHeight();
                            _results.push(panelEl.find(".panel-body").css("min-height", maxHeight - paddings));
                        }
                        return _results;
                    };
                }(this);
                unregister = $scope.$watch(function() {
                    if (!$element.is(":visible")) {
                        return;
                    }
                    $timeout(function() {
                        return equalizeHeights();
                    });
                    return unregister();
                });
            } ]
        };
    });
    forms.directive("agPanel", function() {
        return {
            "restrict": "C",
            "require": "^agPanelsRow",
            "link": function(scope, element, attrs, ctrl) {
                return ctrl.panels.push(element);
            }
        };
    });
}).call(this);

(function() {
    var mixin;
    mixin = angular.module("angleGrinder.forms");
    mixin.factory("dialogCrudCtrlMixin", [ "$log", "$parse", "formDialog", "confirmationDialog", function($log, $parse, formDialog, confirmationDialog) {
        return function($scope, options) {
            var Resource, extraDialogOptions, getGrid, gridName, openEditDialogFor, templateUrl;
            if (options == null) {
                options = {};
            }
            Resource = options.Resource, gridName = options.gridName, templateUrl = options.templateUrl, 
            extraDialogOptions = options.extraDialogOptions;
            getGrid = function() {
                return $parse(gridName)($scope);
            };
            openEditDialogFor = function(item) {
                var dialogOptions;
                dialogOptions = {
                    "item": item,
                    "grid": getGrid()
                };
                return formDialog.open(templateUrl, _.extend(dialogOptions, extraDialogOptions));
            };
            $scope.editItem = function(id) {
                return Resource.get({
                    "id": id
                }, function(item) {
                    if (options.beforeEdit != null) {
                        item = options.beforeEdit(item);
                    }
                    return openEditDialogFor(item);
                });
            };
            $scope.createItem = function() {
                var item;
                item = new Resource();
                if (options.beforeCreate != null) {
                    item = options.beforeCreate(item);
                }
                return openEditDialogFor(item);
            };
            return $scope.deleteItem = function(id) {
                return confirmationDialog.open().result.then(function(confirmed) {
                    var onError, onSuccess, promise;
                    if (!confirmed) {
                        return;
                    }
                    onSuccess = function(response) {
                        return getGrid().removeRow(response.id);
                    };
                    onError = function(response) {
                        return $log.error("Cannot delete a resource", response);
                    };
                    promise = Resource["delete"]({
                        "id": id
                    }).$promise;
                    return promise.then(onSuccess, onError);
                });
            };
        };
    } ]);
}).call(this);

(function() {
    var mixin;
    mixin = angular.module("angleGrinder.forms");
    mixin.factory("singlePageCrudCtrlMixin", [ "$log", "$location", "dialogCrudCtrlMixin", function($log, $location, dialogCrudCtrlMixin) {
        return function($scope, args) {
            var Resource, gridName, resourcePath;
            if (args == null) {
                args = {};
            }
            resourcePath = args.resourcePath, gridName = args.gridName, Resource = args.Resource;
            dialogCrudCtrlMixin($scope, {
                "gridName": gridName,
                "Resource": Resource
            });
            $scope.createItem = angular.noop;
            $scope.showItem = function(id) {
                var showItemPath;
                showItemPath = [ resourcePath, id ].join("/");
                return $location.path(showItemPath);
            };
            return $scope.editItem = function(id) {
                var editItemPath;
                editItemPath = [ resourcePath, id, "edit" ].join("/");
                return $location.path(editItemPath);
            };
        };
    } ]);
}).call(this);

(function() {
    var mixin;
    mixin = angular.module("angleGrinder.forms");
    mixin.factory("massUpdateFormCtrlMixin", [ "$log", "massUpdateHandler", function($log, massUpdateHandler) {
        return function($scope, args) {
            var Resource, dialog, grid, selectedIds;
            if (args == null) {
                args = {};
            }
            dialog = args.dialog, Resource = args.Resource, selectedIds = args.selectedIds, 
            grid = args.grid;
            $scope.massUpdate = function(form, records) {
                var promise;
                if (form.$invalid) {
                    return;
                }
                $log.info("Mass updating records", records);
                promise = Resource.massUpdate({
                    "ids": selectedIds,
                    "data": records
                }).$promise;
                return promise.then(function(result) {
                    massUpdateHandler(grid, result);
                    return $scope.closeDialog();
                });
            };
            return $scope.closeDialog = function() {
                $log.info("Closing the mass update dialog");
                return dialog.close();
            };
        };
    } ]);
}).call(this);

(function() {
    var mixin;
    mixin = angular.module("angleGrinder.forms");
    mixin.factory("massUpdateMixin", [ "$log", "$parse", "$modal", "pathWithContext", function($log, $parse, $modal, pathWithContext) {
        return function($scope, args) {
            var controller, gridName, templateUrl;
            if (args == null) {
                args = {};
            }
            gridName = args.gridName, templateUrl = args.templateUrl, controller = args.controller;
            if (controller == null) {
                controller = "MassUpdateFormCtrl";
            }
            return $scope.massUpdate = function() {
                var grid, selectedIds;
                grid = $parse(gridName)($scope);
                if (grid == null) {
                    throw new Error("the grid is not defined");
                }
                selectedIds = grid.getSelectedRowIds();
                if (selectedIds.length === 0) {
                    return;
                }
                return $modal.open({
                    "templateUrl": pathWithContext(templateUrl),
                    "controller": controller,
                    "keyboard": false,
                    "backdrop": "static",
                    "resolve": {
                        "selectedIds": function() {
                            return selectedIds;
                        },
                        "grid": function() {
                            return grid;
                        }
                    }
                });
            };
        };
    } ]);
}).call(this);