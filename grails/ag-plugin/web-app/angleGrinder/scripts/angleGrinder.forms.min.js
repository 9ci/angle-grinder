(function() {
    var forms;
    forms = angular.module("angleGrinder.forms", [ "angleGrinder.common", "ui.bootstrap", "$strap.directives" ]);
    forms.value("$strapConfig", {
        datepicker: {
            language: "en",
            format: "mm/dd/yyyy",
            type: "iso",
            autoClose: true,
            forceParse: false
        }
    });
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agDeleteButton", function() {
        return {
            restrict: "E",
            replace: true,
            scope: {
                whenConfirmed: "&"
            },
            controller: [ "$scope", "pendingRequests", "$element", function($scope, pendingRequests, $element) {
                $scope.confirmation = false;
                $scope["delete"] = function() {
                    if ($scope.confirmation) {
                        $scope.whenConfirmed();
                    }
                    return $scope.confirmation = !$scope.confirmation;
                };
                $scope.$watch(function() {
                    return $scope.deleting = pendingRequests["for"]("POST", "DELETE");
                });
                return $scope.$watch("confirmation", function(confirmation) {
                    $scope.label = !confirmation ? "Delete" : "Are you sure?";
                    if (confirmation) {
                        $element.removeClass("btn-danger");
                        return $element.addClass("btn-warning");
                    } else {
                        $element.addClass("btn-danger");
                        return $element.removeClass("btn-warning");
                    }
                });
            } ],
            template: '<button type="button" class="btn btn-danger ag-delete-button" ng-disabled="deleting"\n        ng-mouseleave="confirmation = false"\n        ng-click="delete()">\n  <i class="icon-trash"></i> {{label}}<span ng-show="deleting">...</span>\n</button>'
        };
    });
    forms.directive("agCreateButton", function() {
        return {
            restrict: "E",
            replace: true,
            transclude: true,
            compile: function(element, attrs, trasclude) {
                return {
                    pre: function(scope, element) {
                        return trasclude(scope, function(clone) {
                            if ($.trim(clone.text()) === "") {
                                return element.append("Create");
                            }
                        });
                    }
                };
            },
            template: '<a href="" class="btn">\n  <i class="icon-edit"></i>\n  <span ng-transclude></span>\n</a>'
        };
    });
    forms.directive("agCancelButton", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<button type="button" class="btn">\n  <i class="icon-remove"></i> Cancel\n</button>'
        };
    });
    forms.directive("agSubmitButton", function() {
        return {
            restrict: "E",
            replace: true,
            scope: true,
            require: "^form",
            link: function(scope, element, attrs, form) {
                return scope.submit = function() {
                    return form.$submitted = true;
                };
            },
            controller: [ "$scope", "pendingRequests", function($scope, pendingRequests) {
                return $scope.$watch(function() {
                    return $scope.saving = pendingRequests["for"]("POST", "PUT", "PATCH");
                });
            } ],
            template: '<button type="submit" class="btn btn-primary"\n        ng-click="submit()"\n        ng-disabled="saving"\n  <i class="icon-ok icon-white"></i> Save<span ng-show="saving">...</span>\n</button>'
        };
    });
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.value("validationMessages", {
        required: "This field is required",
        mismatch: "Does not match the confirmation",
        minlength: "This field is too short",
        maxlength: "This field is too long",
        email: "Invalid email address",
        pattern: "Invalid pattern"
    });
    forms.directive("match", [ "isEmpty", function(isEmpty) {
        return {
            require: "ngModel",
            link: function(scope, elem, attrs, modelCtrl) {
                var validateEqual, validator;
                validateEqual = function(value, otherValue) {
                    var allEmpty, valid;
                    allEmpty = _.all([ isEmpty(value), isEmpty(otherValue) ]);
                    valid = allEmpty || value === otherValue;
                    modelCtrl.$setValidity("mismatch", valid);
                    return value;
                };
                scope.$watch(attrs.match, function(otherValue) {
                    return validateEqual(modelCtrl.$viewValue, otherValue);
                });
                validator = function(value) {
                    var otherValue;
                    otherValue = scope.$eval(attrs.match);
                    return validateEqual(value, otherValue);
                };
                modelCtrl.$parsers.unshift(validator);
                return modelCtrl.$formatters.unshift(validator);
            }
        };
    } ]);
    forms.directive("agFieldGroup", [ "$timeout", function($timeout) {
        return {
            restrict: "A",
            require: "^form",
            replace: true,
            transclude: true,
            template: '<div class="control-group" ng-transclude></div>',
            link: function(scope, element, attrs, formCtrl) {
                var fields, toggleErrors;
                fields = (attrs["for"] || "").split(",");
                toggleErrors = function() {
                    return $timeout(function() {
                        var invalid;
                        invalid = _.map(fields, function(field) {
                            var _ref, _ref1;
                            return ((_ref = formCtrl[field]) != null ? _ref.$invalid : void 0) || ((_ref1 = formCtrl.$serverError) != null ? _ref1[field] : void 0);
                        });
                        if (_.any(invalid)) {
                            return element.addClass("error");
                        } else {
                            return element.removeClass("error");
                        }
                    });
                };
                angular.forEach(fields, function(fieldName) {
                    return scope.$watch("" + formCtrl.$name + "." + fieldName + ".$viewValue", function() {
                        var _ref;
                        if ((_ref = formCtrl[fieldName]) != null ? _ref.$dirty : void 0) {
                            return toggleErrors();
                        }
                    });
                });
                angular.forEach(fields, function(fieldName) {
                    var initial;
                    initial = true;
                    return scope.$watch("" + formCtrl.$name + ".$serverError." + fieldName, function() {
                        if (!initial) {
                            toggleErrors();
                        }
                        return initial = false;
                    });
                });
                return scope.$watch("" + formCtrl.$name + ".$submitted", function(submitted) {
                    if (submitted) {
                        return toggleErrors();
                    }
                });
            }
        };
    } ]);
    forms.directive("agValidationErrors", [ "validationMessages", function(validationMessages) {
        return {
            restrict: "E",
            require: "^form",
            replace: true,
            link: function(scope, element, attrs, formCtrl) {
                var appendError, clearErrors, displayErrorMessages, field, fieldName, formName, initial, messageFor;
                formName = formCtrl.$name;
                fieldName = attrs["for"];
                field = formCtrl[fieldName];
                clearErrors = function() {
                    return element.html("");
                };
                messageFor = function(error) {
                    return attrs[error] || validationMessages[error];
                };
                appendError = function(message, klass) {
                    if (klass == null) {
                        klass = "";
                    }
                    return element.append('<span class="help-inline ' + klass + '">' + message + "</span>");
                };
                displayErrorMessages = function() {
                    var error, invalid, message, _ref, _results;
                    clearErrors();
                    _ref = field.$error;
                    _results = [];
                    for (error in _ref) {
                        invalid = _ref[error];
                        if (!invalid) {
                            continue;
                        }
                        message = messageFor(error);
                        if (message != null) {
                            _results.push(appendError(message));
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                };
                initial = true;
                scope.$watch("" + formName + "." + fieldName + ".$valid", function() {
                    if (!initial) {
                        displayErrorMessages();
                    }
                    return initial = false;
                });
                scope.$watch("" + formName + "." + fieldName + ".$viewValue", function() {
                    if (field.$dirty) {
                        return displayErrorMessages();
                    }
                });
                scope.$watch("" + formName + ".$submitted", function(submitted) {
                    if (submitted) {
                        return displayErrorMessages();
                    }
                });
                scope.$watch("" + formName + ".$serverError." + fieldName, function(serverError) {
                    if (serverError != null) {
                        return appendError(serverError, "server-error");
                    } else {
                        return element.find(".server-error").remove();
                    }
                });
                return scope.$watch("saving", function(saving) {
                    if (saving) {
                        return displayErrorMessages();
                    }
                });
            }
        };
    } ]);
    forms.directive("agServerValidationErrors", function() {
        return {
            restrict: "A",
            require: "^form",
            link: function(scope, element, attrs, formCtrl) {
                formCtrl.$serverError = {};
                return scope.$watch("" + formCtrl.$name + ".$serverError", function(serverError) {
                    return angular.forEach(serverError, function(_, fieldName) {
                        var initial, unregister;
                        initial = true;
                        return unregister = scope.$watch("" + formCtrl.$name + "." + fieldName + ".$viewValue", function() {
                            if (!initial) {
                                formCtrl.$serverError[fieldName] = null;
                                unregister();
                            }
                            return initial = false;
                        });
                    });
                });
            }
        };
    });
}).call(this);

(function() {
    var EditDialog, FormDialogCtrl, forms;
    forms = angular.module("angleGrinder.forms");
    FormDialogCtrl = function() {
        FormDialogCtrl.$inject = [ "$scope", "$rootScope", "$log", "dialog", "item", "gridCtrl" ];
        function FormDialogCtrl($scope, $rootScope, $log, dialog, item, gridCtrl) {
            $scope.item = item;
            $scope.createNew = !item.persisted();
            $scope.closeEditDialog = function() {
                $log.info("Closing the dialog");
                return dialog.close($scope.item);
            };
            $scope.save = function(item) {
                var onError, onSuccess;
                if ($scope.editForm.$invalid) {
                    $log.warn("The form is invalid", $scope.editForm);
                    return;
                }
                onSuccess = function(response) {
                    $log.info("Item has been updated/created", response);
                    gridCtrl.saveRow(item.id, response);
                    return $scope.closeEditDialog();
                };
                onError = function(response) {
                    var errors, _ref, _ref1;
                    $log.error("Something went wront", response);
                    if (response.status === 422) {
                        errors = (_ref = response.data) != null ? (_ref1 = _ref.errors) != null ? _ref1[item.resourceName()] : void 0 : void 0;
                        $scope.editForm.$serverError = errors;
                        return $log.error("Server side validation errors", errors);
                    }
                };
                return item.save({
                    success: onSuccess,
                    error: onError
                });
            };
            $scope["delete"] = function() {
                var onError, onSuccess;
                onSuccess = function(response) {
                    $log.info("Item has been deleted", response);
                    gridCtrl.removeRow(item.id);
                    return $scope.closeEditDialog();
                };
                onError = function(response) {
                    return $log.error("Something went wront", response);
                };
                return item["delete"]({
                    success: onSuccess,
                    error: onError
                });
            };
        }
        return FormDialogCtrl;
    }();
    forms.controller("FormDialogCtrl", FormDialogCtrl);
    EditDialog = function() {
        EditDialog.$inject = [ "$dialog" ];
        function EditDialog($dialog) {
            this.$dialog = $dialog;
        }
        EditDialog.prototype.open = function(templateUrl, item, gridCtrl) {
            var dialog;
            if (gridCtrl == null) {
                gridCtrl = null;
            }
            dialog = this.$dialog.dialog({
                backdropFade: false,
                dialogFade: false,
                resolve: {
                    item: function() {
                        return item;
                    },
                    gridCtrl: function() {
                        return gridCtrl;
                    }
                }
            });
            dialog.handledEscapeKey = function(e) {
                if (e.which === 27) {
                    return dialog.handleBackDropClick(e);
                }
            };
            dialog.handleBackDropClick = function(e) {
                e.preventDefault();
                if (!dialog.$scope.editForm.$dirty) {
                    dialog.close();
                    return dialog.$scope.$apply();
                }
            };
            return dialog.open(templateUrl, "FormDialogCtrl");
        };
        return EditDialog;
    }();
    forms.service("editDialog", EditDialog);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.factory("massUpdateDialog", [ "$dialog", "pathWithContext", function($dialog, pathWithContext) {
        return function(options) {
            if (options == null) {
                options = {};
            }
            options.grid || (options.grid = function() {});
            options.templateUrl || (options.templateUrl = function() {});
            options.controller || (options.controller = function() {
                return "MassUpdateFormCtrl";
            });
            return function() {
                var controller, dialog, grid, selectedIds, templateUrl;
                grid = options.grid();
                if (grid == null) {
                    throw new Error("grid is not defined");
                }
                templateUrl = pathWithContext(options.templateUrl());
                controller = options.controller();
                selectedIds = grid.getSelectedRowIds();
                if (selectedIds.length === 0) {
                    return;
                }
                dialog = $dialog.dialog({
                    backdropFade: false,
                    dialogFade: false,
                    resolve: {
                        selectedIds: function() {
                            return selectedIds;
                        },
                        grid: function() {
                            return grid;
                        }
                    }
                });
                return dialog.open(templateUrl, controller);
            };
        };
    } ]);
}).call(this);

(function() {
    var ConfirmationDialog, ConfirmationDialogCtrl, forms;
    forms = angular.module("angleGrinder.forms");
    ConfirmationDialogCtrl = function() {
        ConfirmationDialogCtrl.$inject = [ "$scope", "$log", "dialog", "message" ];
        function ConfirmationDialogCtrl($scope, $log, dialog, message) {
            $scope.message = message;
            $scope.close = function(confirmed) {
                $log.info("Confirmation dialog closed", confirmed);
                return dialog.close(confirmed);
            };
        }
        return ConfirmationDialogCtrl;
    }();
    forms.controller("ConfirmationDialogCtrl", ConfirmationDialogCtrl);
    forms.run([ "$templateCache", function($templateCache) {
        return $templateCache.put("templates/dialogs/confirmation.html", '<div class="modal-body">{{message}}</div>\n  <div class="modal-footer">\n  <button class="btn" ng-click="close(false)">Cancel</button>\n  <button class="btn btn-primary" ng-click="close(true)">OK</button>\n</div>');
    } ]);
    ConfirmationDialog = function() {
        ConfirmationDialog.$inject = [ "$dialog", "$log" ];
        function ConfirmationDialog($dialog, $log) {
            this.$dialog = $dialog;
            this.$log = $log;
        }
        ConfirmationDialog.prototype.open = function(message) {
            var dialog;
            if (message == null) {
                message = null;
            }
            this.$log.info("Opening confirmation dialog, message:", message);
            dialog = this.$dialog.dialog({
                resolve: {
                    message: function() {
                        if (message != null) {
                            return message;
                        } else {
                            return "Are you sure?";
                        }
                    }
                }
            });
            return dialog.open("templates/dialogs/confirmation.html", "ConfirmationDialogCtrl");
        };
        return ConfirmationDialog;
    }();
    forms.service("confirmationDialog", ConfirmationDialog);
}).call(this);