(function() {
    var PathWithContextProvider, common, __slice = [].slice;
    common = angular.module("angleGrinder.common", []);
    PathWithContextProvider = function() {
        function PathWithContextProvider() {
            this.contextPath = "";
        }
        PathWithContextProvider.prototype.getContextPath = function() {
            return this.contextPath.replace(/\/*$/, "");
        };
        PathWithContextProvider.prototype.setContextPath = function(path) {
            this.contextPath = path;
        };
        PathWithContextProvider.prototype.sanitizePath = function(path) {
            return path.replace(/^\/*/, "");
        };
        PathWithContextProvider.prototype.$get = function() {
            var _this = this;
            return function(path) {
                if (_this.getContextPath() === "") {
                    return path;
                }
                return [ _this.getContextPath(), _this.sanitizePath(path) ].join("/");
            };
        };
        return PathWithContextProvider;
    }();
    common.provider("pathWithContext", PathWithContextProvider);
    common.filter("withContext", [ "pathWithContext", function(pathWithContext) {
        return function(path) {
            return pathWithContext(path);
        };
    } ]);
    common.factory("pendingRequests", [ "$http", function($http) {
        var pendingRequests;
        pendingRequests = function() {
            return pendingRequests.any();
        };
        pendingRequests.any = function() {
            return pendingRequests["for"]("GET", "POST", "PUT", "PATCH", "DELETE");
        };
        pendingRequests["for"] = function() {
            var httpMethods, requests;
            httpMethods = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            requests = _.filter($http.pendingRequests, function(request) {
                return _.contains(httpMethods, request.method);
            });
            return requests.length > 0;
        };
        return pendingRequests;
    } ]);
    common.value("isEmpty", function(str) {
        return !str || str.length === 0;
    });
    common.value("camelize", function(str) {
        return str.replace(/(\-|\.|_|\s)+(.)?/g, function(match, p1, p2) {
            if (p2) {
                return p2.toUpperCase();
            } else {
                return "";
            }
        });
    });
}).call(this);