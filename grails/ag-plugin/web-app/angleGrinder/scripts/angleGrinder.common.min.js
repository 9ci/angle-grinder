(function() {
    var PathWithContextProvider, common, __slice = [].slice;
    common = angular.module("angleGrinder.common", []);
    PathWithContextProvider = function() {
        function PathWithContextProvider() {
            this.contextPath = "";
        }
        PathWithContextProvider.prototype.getContextPath = function() {
            return this.contextPath.replace(/\/*$/, "");
        };
        PathWithContextProvider.prototype.setContextPath = function(path) {
            this.contextPath = path;
        };
        PathWithContextProvider.prototype.sanitizePath = function(path) {
            return path.replace(/^\/*/, "");
        };
        PathWithContextProvider.prototype.$get = function() {
            return function(_this) {
                return function(path) {
                    if (_this.getContextPath() === "") {
                        return path;
                    }
                    return [ _this.getContextPath(), _this.sanitizePath(path) ].join("/");
                };
            }(this);
        };
        return PathWithContextProvider;
    }();
    common.provider("pathWithContext", PathWithContextProvider);
    common.filter("withContext", [ "pathWithContext", function(pathWithContext) {
        return function(path) {
            return pathWithContext(path);
        };
    } ]);
    common.factory("pendingRequests", [ "$http", function($http) {
        var pendingRequests;
        pendingRequests = function() {
            return pendingRequests.any();
        };
        pendingRequests.any = function() {
            return pendingRequests["for"]("GET", "POST", "PUT", "PATCH", "DELETE");
        };
        pendingRequests["for"] = function() {
            var httpMethods, requests;
            httpMethods = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            requests = _.filter($http.pendingRequests, function(request) {
                return _.contains(httpMethods, request.method);
            });
            return requests.length > 0;
        };
        return pendingRequests;
    } ]);
    common.value("isEmpty", function(str) {
        return !str || str.length === 0;
    });
    common.value("camelize", function(str) {
        return str.replace(/(\-|\.|_|\s)+(.)?/g, function(match, p1, p2) {
            if (p2) {
                return p2.toUpperCase();
            } else {
                return "";
            }
        });
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.directive("agBackButton", [ "$window", function($window) {
        return {
            "restrict": "A",
            "link": function(scope, element) {
                return element.on("click", function(event) {
                    event.preventDefault();
                    return $window.history.back();
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.filter("checkMark", function() {
        return function(input, options) {
            if (options == null) {
                options = {};
            }
            if (input) {
                if (options.hideTruth) {
                    return "";
                }
                return "\u2713";
            } else {
                if (options.hideFalse) {
                    return "";
                }
                return "\u2718";
            }
        };
    });
}).call(this);

(function() {
    var app, __slice = [].slice;
    app = angular.module("angleGrinder.common");
    app.service("deepPick", function() {
        var getDeep, setDeep;
        getDeep = function(obj, path) {
            var key, keys, _i, _len;
            keys = path.split(".");
            for (_i = 0, _len = keys.length; _i < _len; _i++) {
                key = keys[_i];
                obj = obj[key];
                if (obj === void 0) {
                    return;
                }
            }
            return obj;
        };
        setDeep = function(obj, path, value) {
            var i, key, keys, n;
            keys = path.split(".");
            i = 0;
            n = keys.length;
            n--;
            while (i < n) {
                key = keys[i++];
                obj = obj[key] = _.isObject(obj[key]) ? obj[key] : {};
            }
            return obj[keys[i]] = value;
        };
        return function() {
            var keys, obj, path, result, value, _i, _len;
            obj = arguments[0], keys = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            result = new Object();
            for (_i = 0, _len = keys.length; _i < _len; _i++) {
                path = keys[_i];
                value = getDeep(obj, path);
                if (value !== void 0) {
                    setDeep(result, path, value);
                }
            }
            return result;
        };
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder.common");
    app.filter("newLines", function() {
        return function(text) {
            if (!angular.isString(text)) {
                return text;
            }
            return text.replace(/\n/g, "<br />");
        };
    });
}).call(this);