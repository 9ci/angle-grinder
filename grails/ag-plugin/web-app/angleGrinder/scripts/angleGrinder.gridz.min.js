(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz", [ "angleGrinder.common", "ui.select2" ]);
    gridz.directive("agGrid", [ "$log", "$parse", "agGridDataLoader", "actionPopupHandler", "pathWithContext", "camelize", function($log, $parse, agGridDataLoader, actionPopupHandler, pathWithContext, camelize) {
        var link;
        link = function(scope, element, attrs, gridCtrl) {
            var alias, initializeGrid, options, unregister;
            gridCtrl.registerGridElement(element.find("table.gridz"));
            alias = attrs.agGridName;
            if (alias) {
                $parse(alias).assign(scope, gridCtrl);
            }
            options = $parse(attrs.agGrid)(scope);
            if (!options) {
                throw new Error("undefined grid options");
            }
            if (attrs.agGridColModel) {
                options.colModel = angular.fromJson(attrs.agGridColModel);
            }
            initializeGrid = function() {
                var gridEl;
                $log.info("Initializing '" + alias + "' with", options);
                gridEl = element.find("table.gridz");
                if (options.url == null && options.path != null) {
                    options.url = pathWithContext(options.path);
                }
                if (options.datatype === void 0 || options.datatype === null) {
                    options.datatype = agGridDataLoader(options.url, gridCtrl);
                }
                if (options.pager !== false) {
                    options.pager = element.find(".gridz-pager").attr("id") || "gridz-pager";
                }
                gridEl.gridz(options);
                return actionPopupHandler(gridEl, scope);
            };
            if (element.is(":visible")) {
                return initializeGrid();
            } else {
                $log.info("grid is not visible:", alias);
                return unregister = scope.$watch(function() {
                    if (!element.is(":visible")) {
                        return;
                    }
                    initializeGrid();
                    return unregister();
                });
            }
        };
        return {
            "restrict": "A",
            "require": "agGrid",
            "controller": "AgGridCtrl",
            "template": '<table class="gridz"></table>\n<div class="gridz-pager"></div>',
            "compile": function(element, attrs) {
                var id;
                id = attrs.agGridName != null ? camelize(attrs.agGridName) : "gridz";
                element.find("table.gridz").attr("id", id);
                element.find("div.gridz-pager").attr("id", "" + id + "-pager");
                return {
                    "post": link
                };
            }
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.controller("AgGridCtrl", function() {
        _Class.$inject = [ "$rootScope", "$q", "hasSearchFilters", "flatten" ];
        function _Class($rootScope, $q, hasSearchFilters, flatten) {
            this.$rootScope = $rootScope;
            this.$q = $q;
            this.hasSearchFilters = hasSearchFilters;
            this.flatten = flatten;
        }
        _Class.prototype.registerGridElement = function($grid) {
            return this.$grid = $grid;
        };
        _Class.prototype.getGridId = function() {
            return this.$grid.attr("id");
        };
        _Class.prototype.getSelectedRowIds = function() {
            return this.getParam("selarrrow");
        };
        _Class.prototype.getRowData = function(rowId) {
            if (rowId == null) {
                rowId = null;
            }
            return this.$grid.getRowData(rowId);
        };
        _Class.prototype.addJSONData = function(data) {
            this.$grid.get(0).addJSONData(data);
            return this.$rootScope.$broadcast("gridz:loadComplete", data);
        };
        _Class.prototype.reload = function() {
            var deferred, unregister;
            deferred = this.$q.defer();
            unregister = this.$rootScope.$on("gridz:loadComplete", function(_, data) {
                deferred.resolve(data);
                return unregister();
            });
            this.$grid.trigger("reloadGrid");
            return deferred.promise;
        };
        _Class.prototype.getParam = function(name) {
            return this.$grid.getGridParam(name);
        };
        _Class.prototype.setParam = function(params) {
            return this.$grid.setGridParam(params);
        };
        _Class.prototype.updateRow = function(id, data) {
            var diff, flatData, key, prevData, restictedColumns, _i, _len;
            flatData = this.flatten(data);
            prevData = this.getRowData(id);
            if (prevData != null) {
                diff = _.difference(_.keys(prevData), _.keys(flatData));
                restictedColumns = function(key) {
                    return !key.match(/^-/);
                };
                diff = diff.filter(restictedColumns);
                for (_i = 0, _len = diff.length; _i < _len; _i++) {
                    key = diff[_i];
                    flatData[key] = null;
                }
            }
            this.$grid.setRowData(id, flatData);
            return this.flashOnSuccess(id);
        };
        _Class.prototype.addRow = function(id, data, position) {
            if (position == null) {
                position = "first";
            }
            this.$grid.addRowData(id, this.flatten(data), position);
            this.$rootScope.$broadcast("gridz:rowAdded", id, data);
            return this.flashOnSuccess(id);
        };
        _Class.prototype.hasRow = function(id) {
            return !!this.$grid.getInd(id);
        };
        _Class.prototype.getIds = function() {
            return this.$grid.getDataIDs();
        };
        _Class.prototype.getCurrentPage = function() {
            return this.getParam("page");
        };
        _Class.prototype.getTotalRecords = function() {
            return this.getParam("records");
        };
        _Class.prototype.getPageSize = function() {
            return this.getParam("rowNum");
        };
        _Class.prototype.getTotalPages = function() {
            return Math.ceil(this.getTotalRecords() / this.getPageSize());
        };
        _Class.prototype.prevPage = function() {
            var page;
            page = this.getCurrentPage();
            if (page === 1) {
                return this.lastPage();
            }
            return this.loadPage(page - 1);
        };
        _Class.prototype.nextPage = function() {
            var page;
            page = this.getCurrentPage();
            if (page === this.getTotalPages()) {
                return this.firstPage();
            }
            return this.loadPage(page + 1);
        };
        _Class.prototype.firstPage = function() {
            return this.loadPage(1);
        };
        _Class.prototype.lastPage = function() {
            return this.loadPage(this.getTotalPages());
        };
        _Class.prototype.loadPage = function(page) {
            this.setParam({
                "page": page
            });
            return this.reload();
        };
        _Class.prototype.saveRow = function(id, data) {
            if (this.hasRow(id)) {
                return this.updateRow(id, data);
            } else {
                return this.addRow(id, data);
            }
        };
        _Class.prototype.removeRow = function(id) {
            return this.flashOnSuccess(id, function(_this) {
                return function() {
                    return _this.$grid.delRowData(id);
                };
            }(this));
        };
        _Class.prototype.search = function(filters) {
            var deferred, params, promise;
            deferred = this.$q.defer();
            params = {
                "search": this.hasSearchFilters(filters),
                "postData": {
                    "filters": JSON.stringify(filters)
                }
            };
            this.setParam(params);
            promise = this.reload();
            promise.then(function() {
                return deferred.resolve(filters);
            });
            return deferred.promise;
        };
        _Class.prototype.isColumnHidden = function(columnId) {
            var column;
            column = _.findWhere(this.getParam("colModel"), {
                "name": columnId
            });
            return column != null ? column.hidden : void 0;
        };
        _Class.prototype.toggleColumn = function(columnId) {
            var showOrHide;
            showOrHide = this.isColumnHidden(columnId) ? "showCol" : "hideCol";
            this.$grid.jqGrid(showOrHide, columnId);
            return this._triggerResize();
        };
        _Class.prototype.columnChooser = function(options) {
            if (options == null) {
                options = {};
            }
            options.done = function(_this) {
                return function(perm) {
                    var choosedColumns;
                    if (perm) {
                        _this.$grid.jqGrid("remapColumns", perm, true);
                    }
                    choosedColumns = _.map(_this._getColModel(), function(column) {
                        return _.pick(column, "name", "hidden");
                    });
                    return window.localStorage.setItem("gridz." + _this.getGridId() + ".choosedColumns", angular.toJson(choosedColumns));
                };
            }(this);
            return this.$grid.jqGrid("columnChooser", options);
        };
        _Class.prototype._triggerResize = function() {
            return this.$grid.trigger("resize");
        };
        _Class.prototype.flashOnSuccess = function(id, complete) {
            if (complete == null) {
                complete = angular.noop;
            }
            return this._flashRow(id, "#DFF0D8", complete);
        };
        _Class.prototype.flashOnError = function(id, complete) {
            if (complete == null) {
                complete = angular.noop;
            }
            return this._flashRow(id, "#FF0000", complete);
        };
        _Class.prototype._flashRow = function(id, color, complete) {
            var $row;
            if (color == null) {
                color = "#DFF0D8";
            }
            if (complete == null) {
                complete = angular.noop;
            }
            $row = $(this.$grid[0].rows.namedItem(id));
            $row.css("background-color", color);
            $row.delay(250).fadeOut("medium", function() {
                return $row.css("background-color", "");
            });
            return $row.fadeIn("fast", function() {
                return complete();
            });
        };
        return _Class;
    }());
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.service("agGridDataLoader", [ "$log", "$http", "$document", function($log, $http, $document) {
        return function(url, gridCtrl) {
            return function(params, loadingDivSelector) {
                var loadingEl, promise;
                promise = $http.get(url, {
                    "params": params
                });
                promise.then(function(response) {
                    $log.debug("[gridz] grid data loaded", gridCtrl, response);
                    return gridCtrl.addJSONData(response.data);
                });
                loadingEl = $document.find("#" + $.jgrid.jqID(loadingDivSelector));
                loadingEl.show();
                return promise["finally"](function() {
                    return loadingEl.hide();
                });
            };
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.constant("rootPath", "/");
    gridz.directive("agGridPlaceholder", [ "$log", "pathWithContext", "rootPath", function($log, pathWithContext, rootPath) {
        return {
            "restrict": "E",
            "scope": true,
            "link": function(scope, element, attrs) {
                scope.templateSrc = pathWithContext(attrs.src);
                scope.showGrid = true;
                return scope.$on("$routeChangeSuccess", function(event, currentRoute) {
                    var msg, show;
                    show = currentRoute.originalPath === rootPath;
                    scope.showGrid = show;
                    msg = show ? "show grid" : "hide grid";
                    return $log.debug("[agGrid]", msg, currentRoute);
                });
            },
            "template": '<ng-include src="templateSrc" ng-show="showGrid"></ng-include>'
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.factory("actionPopupHandler", [ "$log", function($log) {
        return function($grid, scope) {
            var handleAction;
            handleAction = function(action, id) {
                if (scope[action] != null) {
                    $log.info("Trigger '" + action + "' for row '" + id + "'");
                    return scope.$apply(function() {
                        return scope[action](id);
                    });
                } else {
                    return $log.warn("`$scope." + action + "` is not defined");
                }
            };
            $grid.on("showAction", function(event, id) {
                event.preventDefault();
                return handleAction("showItem", id);
            });
            $grid.on("editAction", function(event, id) {
                event.preventDefault();
                return handleAction("editItem", id);
            });
            $grid.on("deleteAction", function(event, id) {
                event.preventDefault();
                return handleAction("deleteItem", id);
            });
            return $grid.on("click", "a.editActionLink", function(event) {
                var id;
                event.preventDefault();
                id = $(this).parents("tr:first").attr("id");
                return handleAction("editItem", id);
            });
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.value("flatten", function(target, opts) {
        var delimiter, getKey, output, step;
        if (opts == null) {
            opts = {
                "delimiter": "."
            };
        }
        delimiter = opts.delimiter;
        getKey = function(key, prev) {
            if (prev) {
                return prev + delimiter + key;
            } else {
                return key;
            }
        };
        step = function(object, prev) {
            return angular.forEach(Object.keys(object), function(key) {
                var isArray, isObject, type;
                isArray = opts.safe && object[key] instanceof Array;
                type = Object.prototype.toString.call(object[key]);
                isObject = type === "[object Object]" || type === "[object Array]";
                if (!isArray && isObject) {
                    return step(object[key], getKey(key, prev));
                }
                return output[getKey(key, prev)] = object[key];
            });
        };
        output = {};
        step(target);
        return output;
    });
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.value("hasSearchFilters", function(filters) {
        var value, _;
        for (_ in filters) {
            value = filters[_];
            if (value == null) {
                continue;
            }
            if (typeof value === "string") {
                if ($.trim(value) !== "") {
                    return true;
                }
            } else {
                return true;
            }
        }
        return false;
    });
    gridz.directive("agSearchButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "template": '<button type="submit" ng-click="advancedSearch(filters)" ng-disabled="searching" class="btn btn-info">\n  <i class="icon-search icon-white"></i> Search<span ng-show="searching">...</span>\n</button>'
        };
    });
    gridz.directive("agResetSearchButton", function() {
        return {
            "restrict": "E",
            "replace": true,
            "template": '<button type="button" ng-click="resetSearch()" ng-disabled="searching" class="btn">\n  <i class="icon-remove"></i> Reset<span ng-show="searching">...</span>\n</button>'
        };
    });
    gridz.directive("agSearchForm", [ "$log", function($log) {
        return {
            "restrict": "A",
            "scope": true,
            "require": "^form",
            "link": function(scope, element, attrs, form) {
                return scope.searchForm = form;
            },
            "controller": [ "$scope", "$parse", "$attrs", function($scope, $parse, $attrs) {
                var gridSearch;
                $scope.filters = {};
                $scope.searching = false;
                gridSearch = function(filters) {
                    var grid;
                    if (filters == null) {
                        filters = {};
                    }
                    grid = $parse($attrs.agSearchForm)($scope);
                    if (grid == null) {
                        $log.warn("[gridz] grid is not defined");
                        return;
                    }
                    $scope.searching = true;
                    return grid.search(filters)["finally"](function() {
                        return $scope.searching = false;
                    });
                };
                $scope.advancedSearch = function(filters) {
                    var form;
                    if (filters == null) {
                        filters = {};
                    }
                    form = $scope.searchForm;
                    if (!(form != null ? form.$valid : void 0)) {
                        return $log.info("[gridz] advanced search form is invalid", form);
                    }
                    return gridSearch(filters);
                };
                return $scope.resetSearch = function(filters) {
                    if (filters == null) {
                        filters = {};
                    }
                    $scope.filters = filters;
                    return gridSearch(filters);
                };
            } ]
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.directive("agSelect2", [ "$rootScope", "$compile", "$log", "pathWithContext", function($rootScope, $compile, $log, pathWithContext) {
        return {
            "restrict": "E",
            "replace": true,
            "transclude": true,
            "scope": {
                "selectOptions": "=",
                "ngModel": "="
            },
            "compile": function(element, attrs, transclude) {
                var resultTemplate, scope;
                resultTemplate = null;
                scope = $rootScope.$new();
                transclude(scope, function(clone) {
                    var _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = clone.length; _i < _len; _i++) {
                        element = clone[_i];
                        if (element instanceof HTMLElement && element.getAttribute("ag-select2-result") != null) {
                            resultTemplate = element.outerHTML;
                            break;
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                });
                return {
                    "pre": function(scope, element, attrs) {
                        var options;
                        options = angular.copy(scope.selectOptions || {});
                        scope.options = options;
                        if (options.minimumInputLength == null) {
                            options.minimumInputLength = 1;
                        }
                        if (attrs.selectMinimumInputLength != null) {
                            options.minimumInputLength = parseInt(attrs.selectMinimumInputLength);
                        }
                        if (options.width == null) {
                            options.width = "resolve";
                        }
                        if (options.ajax == null && attrs.selectAjaxUrl != null) {
                            options.ajax = {
                                "url": pathWithContext(attrs.selectAjaxUrl),
                                "data": function(term, page) {
                                    return {
                                        "q": term,
                                        "max": 20,
                                        "page": page,
                                        "sort": "name",
                                        "order": "asc"
                                    };
                                },
                                "results": function(data, page) {
                                    var more;
                                    more = page < data.total;
                                    return {
                                        "results": data.rows,
                                        "more": more
                                    };
                                }
                            };
                            options.ajax.quietMillis = 500;
                            if (attrs.selectAjaxQuietMillis != null) {
                                options.ajax.quietMillis = parseInt(attrs.selectAjaxQuietMillis);
                            }
                        }
                        if (resultTemplate != null) {
                            if (options.formatResult == null) {
                                options.formatResult = function(item) {
                                    var resultElement;
                                    scope = scope.$new();
                                    scope.item = item;
                                    resultElement = angular.element(resultTemplate);
                                    return $compile(resultElement)(scope);
                                };
                            }
                        }
                        if (options.formatSelection == null) {
                            options.formatSelection = function(item) {
                                return item.name;
                            };
                        }
                        return $log.debug("Initializing the Select2 component", scope.options);
                    }
                };
            },
            "template": '<div>\n  <input ui-select2="options" multiple ng-model="ngModel" type="text"/>\n  <ag-select2-open></ag-select2-open>\n</div>'
        };
    } ]);
    gridz.directive("agSelect2Open", function() {
        return {
            "restrict": "E",
            "replace": true,
            "scope": true,
            "controller": [ "$scope", "$element", function($scope, $element) {
                return $scope.openSelect2 = function() {
                    var $select;
                    $select = $element.parent().find(".select2-container");
                    $select.select2("open");
                };
            } ],
            "template": '<button class="btn open-select2" type="button" ng-click="openSelect2()">\n  <i class="icon-search"></i>\n</button>'
        };
    });
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.value("idsArrayPager", function(rowId, ids) {
        if (ids == null) {
            ids = [];
        }
        if (ids === "") {
            ids = [];
        }
        if (typeof ids === "string") {
            ids = _.map(ids.split(","), function(id) {
                return parseInt(id);
            });
        }
        return {
            "length": function() {
                return ids.length;
            },
            "currIndex": function() {
                return ids.indexOf(rowId);
            },
            "prev": function() {
                return this._get(this.currIndex() - 1);
            },
            "next": function() {
                return this._get(this.currIndex() + 1);
            },
            "_get": function(indx) {
                if (indx < 0) {
                    return ids[ids.length - 1];
                }
                if (indx > ids.length - 1) {
                    return ids[0];
                }
                return ids[indx];
            }
        };
    });
    gridz.directive("agShowPagePager", [ "$parse", "$routeParams", "$log", "idsArrayPager", function($parse, $routeParams, $log, idsArrayPager) {
        return {
            "restrict": "A",
            "scope": true,
            "link": function(scope, element, attrs) {
                var pager, row;
                row = $parse(attrs.agShowPagePager)(scope);
                $log.debug("current row:", row);
                scope.ids = $routeParams.ids;
                $log.debug("row ids:", scope.ids);
                pager = idsArrayPager(row.id, scope.ids);
                scope.showPager = function() {
                    return pager.length() > 0;
                };
                scope.prevId = function() {
                    return pager.prev();
                };
                return scope.nextId = function() {
                    return pager.next();
                };
            }
        };
    } ]);
    gridz.directive("agGridWithPager", [ "$location", "$log", function($location, $log) {
        return {
            "restrict": "A",
            "require": "^agGrid",
            "link": function(scope, element, attrs, gridCtrl) {
                return element.on("click", "a.with-pager", function(event) {
                    var ids, path;
                    event.preventDefault();
                    $log.debug("intercept click on", $(this));
                    path = $(this).attr("href").replace(/^#/, "");
                    ids = gridCtrl.getIds().join(",");
                    return scope.$apply(function() {
                        return $location.search({
                            "ids": ids
                        }).path(path);
                    });
                });
            }
        };
    } ]);
}).call(this);

(function() {
    var mixin;
    mixin = angular.module("angleGrinder.gridz");
    mixin.controller("gridPagerCtrlMixin", [ "$log", "$scope", "$parse", "$location", "$q", "gridName", "currentId", "path", function($log, $scope, $parse, $location, $q, gridName, currentId, path) {
        var currIdGetter, currIdSetter, getCurrent, getGridIds, nextGridPage, prevGridPage;
        currIdGetter = $parse(currentId);
        currIdSetter = currIdGetter.assign;
        $scope.$watch(currentId, function(id, oldId) {
            if (id == null) {
                return;
            }
            if (id === oldId) {
                return;
            }
            return $location.path(path.replace(":id", id));
        });
        getGridIds = function() {
            var grid;
            grid = $parse(gridName)($scope);
            return grid.getIds();
        };
        prevGridPage = function() {
            var deferred, grid, promise;
            grid = $parse(gridName)($scope);
            deferred = $q.defer();
            promise = grid.prevPage();
            promise.then(function(data) {
                var ids;
                ids = getGridIds();
                $log.debug("[agGrid] previous page was loaded", ids);
                return deferred.resolve(ids);
            });
            return deferred.promise;
        };
        nextGridPage = function() {
            var deferred, grid, promise;
            grid = $parse(gridName)($scope);
            deferred = $q.defer();
            promise = grid.nextPage();
            promise.then(function(data) {
                var ids;
                ids = getGridIds();
                $log.debug("[agGrid] next page was loaded", ids);
                return deferred.resolve(ids);
            });
            return deferred.promise;
        };
        getCurrent = function() {
            var ids;
            ids = getGridIds();
            return [ ids, ids.indexOf(currIdGetter($scope).toString()) ];
        };
        this.prevRow = function() {
            var ids, indx, _ref;
            _ref = getCurrent(), ids = _ref[0], indx = _ref[1];
            if (indx > 0) {
                return currIdSetter($scope, ids[indx - 1]);
            } else {
                return prevGridPage().then(function(ids) {
                    return currIdSetter($scope, ids[ids.length - 1]);
                });
            }
        };
        this.nextRow = function() {
            var ids, indx, _ref;
            _ref = getCurrent(), ids = _ref[0], indx = _ref[1];
            if (indx < ids.length - 1) {
                return currIdSetter($scope, ids[indx + 1]);
            } else {
                return nextGridPage().then(function(ids) {
                    return currIdSetter($scope, ids[0]);
                });
            }
        };
        return this;
    } ]);
}).call(this);