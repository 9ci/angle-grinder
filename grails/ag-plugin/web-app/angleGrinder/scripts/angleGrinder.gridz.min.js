(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz", [ "angleGrinder.common", "ui.select2" ]);
    gridz.directive("agGrid", [ "$log", "pathWithContext", function($log, pathWithContext) {
        var link;
        link = function(scope, element, attrs, gridCtrl) {
            var alias, initializeGrid, unregister, visibilityChecker;
            gridCtrl.registerGridElement(element.find("table.gridz"));
            alias = attrs.agGridName;
            if (alias != null) {
                scope[alias] = gridCtrl;
            }
            initializeGrid = function(gridOptions) {
                var $grid, handleAction;
                if (gridOptions == null) {
                    return;
                }
                $log.info("Initializing the grid", gridOptions);
                $grid = element.find("table.gridz");
                if (gridOptions.url == null && gridOptions.path != null) {
                    gridOptions.url = pathWithContext(gridOptions.path);
                }
                gridOptions.pager = element.find(".gridz-pager").attr("id") || "gridz-pager";
                gridOptions.gridComplete = function() {
                    var width;
                    width = element.parent().width() - 1;
                    return $grid.setGridWidth(width);
                };
                $grid.gridz(gridOptions);
                handleAction = function(action, id) {
                    if (scope[action] != null) {
                        return scope.$apply(function() {
                            return scope[action](id);
                        });
                    } else {
                        return $log.warn("`$scope." + action + "` is not defined");
                    }
                };
                $grid.on("showAction", function(event, id) {
                    event.preventDefault();
                    return handleAction("showItem", id);
                });
                $grid.on("editAction", function(event, id) {
                    event.preventDefault();
                    return handleAction("editItem", id);
                });
                $grid.on("deleteAction", function(event, id) {
                    event.preventDefault();
                    return handleAction("deleteItem", id);
                });
                return $grid.on("click", "a.editActionLink", function(event) {
                    var id;
                    event.preventDefault();
                    id = $(this).parents("tr:first").attr("id");
                    return handleAction("editItem", id);
                });
            };
            visibilityChecker = scope[attrs.agGrid].visibilityChecker || function(element) {
                return element.is(":visible");
            };
            return unregister = scope.$watch(function() {
                if (visibilityChecker(element)) {
                    initializeGrid(scope[attrs.agGrid]);
                    return unregister();
                }
            });
        };
        return {
            restrict: "A",
            template: '<table class="gridz"></table>\n<div class="gridz-pager"></div>',
            compile: function(element, attrs) {
                var alias;
                alias = attrs.agGridName || "gridz";
                element.find("table.gridz").attr("id", alias);
                element.find("div.gridz-pager").attr("id", "" + alias + "-pager");
                return {
                    post: link
                };
            },
            require: "agGrid",
            controller: "AgGridCtrl"
        };
    } ]);
    gridz.value("flatten", function(target, opts) {
        var delimiter, getKey, output, step;
        if (opts == null) {
            opts = {
                delimiter: "."
            };
        }
        delimiter = opts.delimiter;
        getKey = function(key, prev) {
            if (prev) {
                return prev + delimiter + key;
            } else {
                return key;
            }
        };
        step = function(object, prev) {
            return angular.forEach(Object.keys(object), function(key) {
                var isArray, isObject, type;
                isArray = opts.safe && object[key] instanceof Array;
                type = Object.prototype.toString.call(object[key]);
                isObject = type === "[object Object]" || type === "[object Array]";
                if (!isArray && isObject) {
                    return step(object[key], getKey(key, prev));
                }
                return output[getKey(key, prev)] = object[key];
            });
        };
        output = {};
        step(target);
        return output;
    });
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.controller("AgGridCtrl", function() {
        _Class.$inject = [ "$q", "hasSearchFilters", "flatten" ];
        function _Class($q, hasSearchFilters, flatten) {
            this.$q = $q;
            this.hasSearchFilters = hasSearchFilters;
            this.flatten = flatten;
        }
        _Class.prototype.registerGridElement = function($grid) {
            return this.$grid = $grid;
        };
        _Class.prototype.getGridId = function() {
            return this.$grid.attr("id");
        };
        _Class.prototype.getSelectedRowIds = function() {
            return this.getParam("selarrrow");
        };
        _Class.prototype.reload = function(callback) {
            if (callback == null) {
                callback = angular.noop;
            }
            this.$grid.trigger("reloadGrid");
            return this.$grid.one("jqGridAfterLoadComplete", callback);
        };
        _Class.prototype.getParam = function(name) {
            return this.$grid.getGridParam(name);
        };
        _Class.prototype.setParam = function(params) {
            return this.$grid.setGridParam(params);
        };
        _Class.prototype.updateRow = function(id, data) {
            this.$grid.setRowData(id, this.flatten(data));
            return this._flashRow(id);
        };
        _Class.prototype.addRow = function(id, data, position) {
            if (position == null) {
                position = "first";
            }
            this.$grid.addRowData(id, this.flatten(data), position);
            return this._flashRow(id);
        };
        _Class.prototype.hasRow = function(id) {
            return !!this.$grid.getInd(id);
        };
        _Class.prototype.saveRow = function(id, data) {
            if (this.hasRow(id)) {
                return this.updateRow(id, data);
            } else {
                return this.addRow(id, data);
            }
        };
        _Class.prototype.removeRow = function(id) {
            var _this = this;
            return this._flashRow(id, function() {
                return _this.$grid.delRowData(id);
            });
        };
        _Class.prototype.search = function(filters) {
            var deferred, params;
            deferred = this.$q.defer();
            params = {
                search: this.hasSearchFilters(filters),
                postData: {
                    filters: JSON.stringify(filters)
                }
            };
            this.setParam(params);
            this.reload(function() {
                return deferred.resolve(filters);
            });
            return deferred.promise;
        };
        _Class.prototype.isColumnHidden = function(columnId) {
            var column;
            column = _.findWhere(this._getColModel(), {
                name: columnId
            });
            return column != null ? column.hidden : void 0;
        };
        _Class.prototype.toggleColumn = function(columnId) {
            var showOrHide;
            showOrHide = this.isColumnHidden(columnId) ? "showCol" : "hideCol";
            this.$grid.jqGrid(showOrHide, columnId);
            return this._triggerResize();
        };
        _Class.prototype.columnChooser = function(options) {
            var _this = this;
            if (options == null) {
                options = {};
            }
            options.done = function(perm) {
                var choosedColumns;
                if (perm) {
                    _this.$grid.jqGrid("remapColumns", perm, true);
                }
                choosedColumns = _.map(_this._getColModel(), function(column) {
                    return _.pick(column, "name", "hidden");
                });
                return window.localStorage.setItem("gridz." + _this.getGridId() + ".choosedColumns", angular.toJson(choosedColumns));
            };
            return this.$grid.jqGrid("columnChooser", options);
        };
        _Class.prototype._getColModel = function() {
            return this.$grid.jqGrid("getGridParam", "colModel");
        };
        _Class.prototype._triggerResize = function() {
            return this.$grid.trigger("resize");
        };
        _Class.prototype._flashRow = function(id, complete) {
            var $row;
            if (complete == null) {
                complete = angular.noop;
            }
            $row = $(this.$grid[0].rows.namedItem(id));
            $row.css("background-color", "#DFF0D8");
            $row.delay(100).fadeOut("medium", function() {
                return $row.css("background-color", "");
            });
            return $row.fadeIn("fast", function() {
                return complete();
            });
        };
        return _Class;
    }());
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.value("hasSearchFilters", function(filters) {
        var value, _;
        for (_ in filters) {
            value = filters[_];
            if (value == null) {
                continue;
            }
            if (typeof value === "string") {
                if ($.trim(value) !== "") {
                    return true;
                }
            } else {
                return true;
            }
        }
        return false;
    });
    gridz.directive("agSearchButton", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<button type="submit" ng-click="advancedSearch(filters)" ng-disabled="!promise" class="btn btn-info">\n  <i class="icon-search icon-white"></i> Search<span ng-show="!promise">...</span>\n</button>'
        };
    });
    gridz.directive("agResetSearchButton", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<button type="button" ng-click="resetSearch()" ng-disabled="!promise" class="btn">\n  <i class="icon-remove"></i> Reset<span ng-show="!promise">...</span>\n</button>'
        };
    });
    gridz.directive("agSearchForm", [ "$log", function($log) {
        return {
            restrict: "A",
            scope: true,
            controller: [ "$scope", "$attrs", function($scope, $attrs) {
                $scope.filters = {};
                $scope.promise = true;
                $scope.advancedSearch = function(filters) {
                    var gridCtrl;
                    gridCtrl = $scope.$parent[$attrs.agSearchForm];
                    if (!gridCtrl) {
                        $log.warn("grid is not defined");
                        return;
                    }
                    $scope.promise = gridCtrl.search(filters);
                    $(document).ajaxError(function(event, jqxhr, settings, exception) {
                        if (settings.type === "GET") {
                            return $scope.$apply(function() {
                                return $scope.promise = true;
                            });
                        }
                    });
                };
                return $scope.resetSearch = function(filters) {
                    if (filters == null) {
                        filters = {};
                    }
                    $scope.filters = filters;
                    return $scope.advancedSearch(filters);
                };
            } ]
        };
    } ]);
}).call(this);

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz");
    gridz.directive("agSelect2", [ "$rootScope", "$compile", "pathWithContext", function($rootScope, $compile, pathWithContext) {
        return {
            restrict: "E",
            replace: true,
            transclude: true,
            scope: {
                selectOptions: "=",
                ngModel: "="
            },
            compile: function(element, attrs, transclude) {
                var resultTemplate, scope;
                resultTemplate = null;
                scope = $rootScope.$new();
                transclude(scope, function(clone) {
                    var _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = clone.length; _i < _len; _i++) {
                        element = clone[_i];
                        if (element instanceof HTMLElement && element.getAttribute("ag-select2-result") != null) {
                            resultTemplate = element.outerHTML;
                            break;
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                });
                return {
                    pre: function(scope, element, attrs) {
                        var options;
                        options = angular.copy(scope.selectOptions || {});
                        scope.options = options;
                        if (options.minimumInputLength == null) {
                            options.minimumInputLength = 1;
                        }
                        if (attrs.selectMinimumInputLength != null) {
                            options.minimumInputLength = parseInt(attrs.selectMinimumInputLength);
                        }
                        if (options.width == null) {
                            options.width = "resolve";
                        }
                        if (options.ajax == null && attrs.selectAjaxUrl != null) {
                            options.ajax = {
                                url: pathWithContext(attrs.selectAjaxUrl),
                                data: function(term, page) {
                                    return {
                                        q: term,
                                        max: 20,
                                        page: page,
                                        sort: "name",
                                        order: "asc"
                                    };
                                },
                                results: function(result, page) {
                                    var more;
                                    more = page < result.total;
                                    return {
                                        results: result.rows,
                                        more: more
                                    };
                                }
                            };
                            options.ajax.quietMillis = 500;
                            if (attrs.selectAjaxQuietMillis != null) {
                                options.ajax.quietMillis = parseInt(attrs.selectAjaxQuietMillis);
                            }
                        }
                        if (resultTemplate != null) {
                            if (options.formatResult == null) {
                                options.formatResult = function(item) {
                                    var resultElement;
                                    scope = scope.$new();
                                    scope.item = item;
                                    resultElement = angular.element(resultTemplate);
                                    return $compile(resultElement)(scope);
                                };
                            }
                        }
                        return options.formatSelection != null ? options.formatSelection : options.formatSelection = function(item) {
                            return item.name;
                        };
                    }
                };
            },
            template: '<div>\n  <input ui-select2="options" multiple ng-model="ngModel" type="text"/>\n  <ag-select2-open></ag-select2-open>\n</div>'
        };
    } ]);
    gridz.directive("agSelect2Open", function() {
        return {
            restrict: "E",
            replace: true,
            scope: true,
            controller: [ "$scope", "$element", function($scope, $element) {
                return $scope.openSelect2 = function() {
                    var $select;
                    $select = $element.parent().find(".select2-container");
                    $select.select2("open");
                };
            } ],
            template: '<button class="btn open-select2" type="button" ng-click="openSelect2()">\n  <i class="icon-search"></i>\n</button>'
        };
    });
}).call(this);