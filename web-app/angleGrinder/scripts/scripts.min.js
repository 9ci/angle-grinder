(function() {
    var resources;
    resources = angular.module("angleGrinder.resources", [ "ngResource", "ngRoute" ]);
    resources.factory("Users", [ "$resource", function($resource) {
        var Users;
        Users = $resource("/api/users/:id/:action", {
            id: "@id"
        }, {
            get: {
                method: "GET"
            },
            massUpdate: {
                method: "PUT",
                params: {
                    action: "massUpdate"
                }
            },
            save: {
                method: "POST"
            },
            update: {
                method: "PUT"
            },
            "delete": {
                method: "DELETE"
            }
        });
        angular.extend(Users.prototype, {
            resourceName: function() {
                return "user";
            },
            persisted: function() {
                return this.id != null;
            },
            newRecord: function() {
                return !this.persisted();
            },
            save: function(options) {
                var method;
                method = !this.persisted() ? "save" : "update";
                return Users[method]({}, this, options.success, options.error);
            },
            "delete": function(options) {
                return Users["delete"]({}, this, options.success, options.error);
            }
        });
        return Users;
    } ]);
    resources.factory("userResolver", [ "$q", "$route", "Users", function($q, $route, Users) {
        return function(id) {
            var deferred, onError, onSuccess;
            deferred = $q.defer();
            onSuccess = function(user) {
                return deferred.resolve(user);
            };
            onError = function() {
                return deferred.reject();
            };
            Users.get({
                id: id
            }, onSuccess, onError);
            return deferred.promise;
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder", [ "ngRoute", "angleGrinder.common", "angleGrinder.gridz", "angleGrinder.forms", "angleGrinder.alerts", "angleGrinder.dataGenerator", "angleGrinder.resources", "angleGrinder.spinner" ]);
    app.config([ "pathWithContextProvider", function(pathWithContextProvider) {
        var contextPath;
        contextPath = $("body").data("context-path");
        if (contextPath != null) {
            return pathWithContextProvider.setContextPath(contextPath);
        }
    } ]);
    app.factory("httpErrorsInterceptor", [ "$injector", "$q", "alerts", function($injector, $q, alerts) {
        return function(promise) {
            var $http, onError;
            $http = $injector.get("$http");
            onError = function(response) {
                var errorMessage, _ref;
                errorMessage = ((_ref = response.data) != null ? _ref.error : void 0) || "Unexpected HTTP error";
                if (response.status !== 422) {
                    alerts.error(errorMessage);
                }
                return $q.reject(response);
            };
            return promise.then(null, onError);
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder");
    app.config([ "$provide", "$routeProvider", "$httpProvider", function($provide, $routeProvider, $httpProvider) {
        $httpProvider.responseInterceptors.push("httpErrorsInterceptor");
        return $routeProvider.when("/list", {
            templateUrl: "templates/list.html",
            controller: "ListCtrl"
        }).when("/users_list", {
            templateUrl: "templates/usersList.html",
            controller: "UsersListCtrl"
        }).when("/users", {
            templateUrl: "templates/users/list.html",
            controller: "users.ListCtrl"
        }).when("/users/create", {
            templateUrl: "templates/users/form.html",
            controller: "users.FormCtrl",
            resolve: {
                user: [ "Users", function(Users) {
                    return new Users();
                } ]
            }
        }).when("/users/:id", {
            templateUrl: "templates/users/show.html",
            controller: "users.ShowCtrl",
            resolve: {
                user: [ "$route", "userResolver", function($route, userResolver) {
                    return userResolver($route.current.params.id);
                } ]
            }
        }).when("/users/:id/edit", {
            templateUrl: "templates/users/form.html",
            controller: "users.FormCtrl",
            resolve: {
                user: [ "$route", "userResolver", function($route, userResolver) {
                    return userResolver($route.current.params.id);
                } ]
            }
        }).otherwise({
            redirectTo: "/users_list"
        });
    } ]);
}).call(this);

angular.module("angleGrinder").run([ "$templateCache", function($templateCache) {
    $templateCache.put("templates/list.html", '<section class="anchor">\n' + "  <h2>Grid example</h2>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" style="padding-left: 2px">\n' + '            <i class="icon-selected-pointer"> </i> Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href=""><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href=""><i class="icon-external-link"></i> Export</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href=""><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + "        <li>\n" + '          <a href="" class="create-button" ng-click="createItem()">\n' + '            <i class="icon-edit"></i>New\n' + "          </a>\n" + "        </li>\n" + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + '        <li><a href="" title="search screen"><i class="icon-search"></i></a></li>\n' + '        <li class="divider-vertical skinny"></li>\n' + '        <li class="dropdown grid-options">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href=""><i class="icon-cog"></i><b\n' + '              class="caret"></b></i></a>\n' + '          <ul class="dropdown-menu">\n' + '            <li><a href=""><i class="icon-th-list"></i> Columns</a></li>\n' + '            <li><a href=""><i class="icon-edit"></i> Another action</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href=""><i class="icon-external-link"></i> Separated link</a></li>\n' + "          </ul>\n" + "        </li>\n" + "      </ul>\n" + '      <form action="" class="navbar-search pull-right">\n' + '        <input type="text" value="" placeholder="Search" class="search-query span2"\n' + '               style="width: 150px;"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div ag-grid="gridOptions"\n' + '       ag-grid-name="grid"></div>\n' + "</section>\n");
    $templateCache.put("templates/navbarTop.html", '<div class="navbar navbar-inverse navbar-fixed-top">\n' + '  <div class="navbar-inner">\n' + '    <div class="container">\n' + '      <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">\n' + '        <span class="icon-bar"></span>\n' + '        <span class="icon-bar"></span>\n' + '        <span class="icon-bar"></span>\n' + "      </button>\n" + '      <a class="brand" href="#">Examples</a>\n' + "\n" + '      <div class="nav-collapse collapse">\n' + '        <ul class="nav">\n' + '          <li><a href="#about">Gridz</a></li>\n' + '          <li class="dropdown">\n' + '            <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown<b class="caret"></b></a>\n' + '            <ul class="dropdown-menu">\n' + '              <li><a href="#"><i class="icon-edit"></i> Create New Invoice</a></li>\n' + '              <li><a href="#"><i class="icon-list"></i> Transaction List</a></li>\n' + '              <li><a href="#"><i class="icon-briefcase"></i> History</a></li>\n' + '              <li class="divider"></li>\n' + '              <li><a href="#"><i class="icon-money"></i> Receive Payment</a></li>\n' + "            </ul>\n" + "          </li>\n" + '          <li><a href="#">Reports</a></li>\n' + "        </ul>\n" + '        <ul class="nav pull-right">\n' + '          <li><a href="#"><i class="icon-cogs"></i> Control Panel</a></li>\n' + '          <li class="divider-vertical"></li>\n' + '          <li class="dropdown">\n' + '            <a href="#" class="dropdown-toggle " data-toggle="dropdown">\n' + '              <i class="icon-user"></i> Joshua Burnett <b class="caret"></b>\n' + "            </a>\n" + '            <ul class="dropdown-menu">\n' + "              <li>\n" + '                <a href="#"><i class="icon-user"></i> Account Settings </a>\n' + "              </li>\n" + "\n" + "              <li>\n" + '                <a href="#"><i class="icon-lock"></i> Change Password</a>\n' + "              </li>\n" + '              <li class="divider"></li>\n' + "              <li>\n" + '                <a href="#"><i class="icon-off"></i> Logout</a>\n' + "              </li>\n" + "            </ul>\n" + "          </li>\n" + "          <ag-spinner></ag-spinner>\n" + "        </ul>\n" + "      </div>\n" + "    </div>\n" + "  </div>\n" + "</div>\n");
    $templateCache.put("templates/partials/itemForm.html", '<div class="modal-header">\n' + '  <button type="button" class="close" ng-click="closeEditDialog()" aria-hidden="true">&times;</button>\n' + "\n" + '  <h3 ng-show="createNew">Create New Item</h3>\n' + '  <h3 ng-hide="createNew">Edit Item {{item.customer.name}}</h3>\n' + "</div>\n" + "\n" + '<div class="modal-body">\n' + '  <form name="editForm" novalidate class="form-horizontal no-margin" ng-submit="save(item)">\n' + "\n" + '    <div ag-field-group for="customerName">\n' + '      <label class="control-label">Customer Name</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="customerName" placeholder="Enter Customer Name"\n' + '               ng-model="item.customer.name" autofocus required />\n' + '        <ag-validation-errors for="customerName" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="control-group">\n' + '      <label class="control-label">Date</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="date" placeholder="Enter Date"\n' + '               ng-model="item.invoiceDate" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="control-group">\n' + '      <label class="control-label">Note</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="note" placeholder="Enter Note"\n' + '               ng-model="item.note" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="password,passwordConfirmation">\n' + '      <label class="control-label">Password</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="password" name="password" placeholder="Enter Password"\n' + '               ng-model="item.password" autofocus required ng-minlength="6" />\n' + '        <ag-validation-errors for="password"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters." />\n' + "      </div>\n" + "\n" + '      <div class="controls">\n' + '        <input type="password" name="passwordConfirmation" placeholder="Enter Password Confirmation"\n' + '               ng-model="item.passwordConfirmation" autofocus\n' + '               required match="item.password" ng-minlength="6" />\n' + '        <ag-validation-errors for="passwordConfirmation"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters."\n' + '                          mismatch="The password does not match the confirmation" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="modal-footer">\n' + '      <span ng-hide="createNew">\n' + '        <ag-delete-button when-confirmed="delete(item)"></ag-delete-button>\n' + "      </span>\n" + "\n" + '      <cancel-button ng-click="closeEditDialog()"></cancel-button>\n' + "      <ag-submit-button></ag-submit-button>\n" + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/partials/userForm.html", '<div class="modal-header">\n' + '  <button type="button" class="close" ng-click="closeEditDialog()" aria-hidden="true">&times;</button>\n' + "\n" + '  <h3 ng-show="createNew">Create New User</h3>\n' + '  <h3 ng-hide="createNew">Edit User {{item.name}}</h3>\n' + "</div>\n" + "\n" + '<div class="modal-body">\n' + '  <form name="editForm" novalidate class="form-horizontal no-margin"\n' + "        ag-server-validation-errors\n" + '        ng-submit="save(item)">\n' + "\n" + '    <div ag-field-group for="name">\n' + '      <label class="control-label">Name</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="name" placeholder="Enter Name"\n' + '               ng-model="item.name" autofocus required />\n' + '        <ag-validation-errors for="name" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="login">\n' + '      <label class="control-label">Login</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="login" placeholder="Enter Login"\n' + '               ng-model="item.login" autofocus required />\n' + '        <ag-validation-errors for="login" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="allowance">\n' + '      <label class="control-label">Allowance</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="allowance" placeholder="Enter Allowance"\n' + '               ng-model="item.allowance" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="birthday">\n' + '      <label class="control-label">Birthday</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" bs-datepicker\n' + '               name="birthday" ng-model="item.birthday"\n' + '               ng-required="true" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="password,passwordConfirmation">\n' + '      <label class="control-label">Password</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="password" name="password" placeholder="Enter Password"\n' + '               ng-model="item.password" autofocus ng-required="item.newRecord()" ng-minlength="6" />\n' + '        <ag-validation-errors for="password"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters." />\n' + "      </div>\n" + "\n" + '      <div class="controls">\n' + '        <input type="password" name="passwordConfirmation" placeholder="Enter Password Confirmation"\n' + '               ng-model="item.passwordConfirmation" autofocus\n' + '               ng-required="item.newRecord()" match="item.password" ng-minlength="6" />\n' + '        <ag-validation-errors for="passwordConfirmation"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters."\n' + '                          mismatch="The password does not match the confirmation" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="modal-footer">\n' + "      <ag-submit-button></ag-submit-button>\n" + '      <span ng-hide="createNew">\n' + '        <ag-delete-button when-confirmed="delete(item)"></ag-delete-button>\n' + "      </span>\n" + '      <ag-cancel-button ng-click="closeEditDialog()"></ag-cancel-button>\n' + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/partials/userSearch.html", '<div class="well">\n' + '  <form ag-search-form="usersGrid" class="form-horizontal form-multi-column no-margin">\n' + '    <div class="row-fluid">\n' + '      <div class="control-group span6">\n' + '        <label class="control-label">Name</label>\n' + '        <div class="controls">\n' + '          <input type="text" ng-model="filters.name">\n' + "        </div>\n" + "      </div>\n" + "\n" + '      <div class="control-group span6">\n' + '        <label class="control-label">Allowance</label>\n' + '        <div class="controls">\n' + '          <input type="text" ng-model="filters.allowance">\n' + "        </div>\n" + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="row-fluid">\n' + '      <div class="control-group span6">\n' + '        <label class="control-label">Birthday from</label>\n' + '        <div class="controls">\n' + '          <input type="text" bs-datepicker ng-model="filters.birthday.from" />\n' + "        </div>\n" + "      </div>\n" + "\n" + '      <div class="control-group span6">\n' + '        <label class="control-label">Birthday to</label>\n' + '        <div class="controls">\n' + '          <input type="text" bs-datepicker ng-model="filters.birthday.to" />\n' + "        </div>\n" + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="row-fluid">\n' + '      <div class="control-group span8">\n' + '        <label class="control-label" >Org</label>\n' + '        <div class="controls">\n' + '          <div class="input-append">\n' + "\n" + '            <ag-select2 select-ajax-url="/api/orgs.json"\n' + '                        select-minimum-input-length="3"\n' + '                        select-ajax-quiet-millis="300"\n' + '                        ng-model="filters.org">\n' + '              <table ag-select2-result class="table table-condensed org-select-result">\n' + "                <tr>\n" + "                  <td>{{item.num}}</td>\n" + "                  <td>{{item.name}}</td>\n" + "                </tr>\n" + "              </table>\n" + "            </ag-select2>\n" + "\n" + "          </div>\n" + "        </div>\n" + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="pull-right">\n' + "      <ag-search-button></ag-search-button>\n" + "      <ag-reset-search-button></ag-reset-search-button>\n" + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/users/form.html", '<div class="subnav">\n' + '  <ul class="nav nav-pills">\n' + '    <li><a class="list" href="#/users"><i class="icon-list"></i> Users List</a></li>\n' + '    <li><a ng-show="user.persisted()" class="list" href="#/users/{{user.id}}"><i class="icon-th"></i> Show user</a></li>\n' + '    <li><a class="create" href="#/users/create"><i class="icon-plus"></i> New user</a></li>\n' + "  </ul>\n" + "</div>\n" + "\n" + '<div class="content">\n' + '  <h2 class="page-header" ng-show="user.newRecord()">Create user</h2>\n' + '  <h2 class="page-header" ng-show="user.persisted()">Edit user</h2>\n' + "\n" + '  <form name="editForm" novalidate class="form-horizontal no-margin"\n' + "        ag-server-validation-errors\n" + '        ng-submit="save(user)">\n' + "\n" + '    <div ag-field-group for="name">\n' + '      <label class="control-label">Name</label>\n' + '      <div class="controls">\n' + '        <input type="text" name="name" placeholder="Enter Name"\n' + '               ng-model="user.name" autofocus\n' + "               required />\n" + '        <ag-validation-errors for="name" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="login">\n' + '      <label class="control-label">Login</label>\n' + '      <div class="controls">\n' + '        <input type="text" name="login" placeholder="Enter Login"\n' + '               ng-model="user.login"\n' + '               required ng-minlength="6" />\n' + '        <ag-validation-errors for="login" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="allowance">\n' + '      <label class="control-label">Allowance</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="allowance" placeholder="Enter Allowance"\n' + '               ng-model="user.allowance" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="birthday">\n' + '      <label class="control-label">Birthday</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" bs-datepicker\n' + '               name="birthday" ng-model="user.birthday"\n' + '               ng-required="true" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="password,passwordConfirmation">\n' + '      <label class="control-label">Password</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="password" name="password" placeholder="Enter Password"\n' + '               ng-model="user.password" autofocus ng-required="user.newRecord()" ng-minlength="6" />\n' + '        <ag-validation-errors for="password"\n' + '                              required="This field is required"\n' + '                              minlength="Password must be at least 6 characters." />\n' + "      </div>\n" + "\n" + '      <div class="controls">\n' + '        <input type="password" name="passwordConfirmation" placeholder="Enter Password Confirmation"\n' + '               ng-model="user.passwordConfirmation" autofocus\n' + '               ng-required="user.newRecord()" match="user.password" ng-minlength="6" />\n' + '        <ag-validation-errors for="passwordConfirmation"\n' + '                              required="This field is required"\n' + '                              minlength="Password must be at least 6 characters."\n' + '                              mismatch="The password does not match the confirmation" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="form-actions">\n' + "      <ag-submit-button></ag-submit-button>\n" + '      <span ng-show="user.persisted()">\n' + '        <ag-delete-button when-confirmed="delete(user)"></ag-delete-button>\n' + "      </span>\n" + '      <a href="#/users" class="btn">Cancel</a>\n' + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/users/list.html", '<section class="anchor">\n' + '  <h2 class="page-header">Users list</h2>\n' + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" style="padding-left: 2px">\n' + '            <i class="icon-selected-pointer"></i> Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href="" ng-click="massUpdate()"><i class="icon-edit"></i> Mass update</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + "        <li>\n" + '          <a href="#/users/create" class="create-button">\n' + '            <i class="icon-edit"></i>Create user\n' + "          </a>\n" + "        </li>\n" + "      </ul>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div ag-grid="gridOptions"\n' + '       ag-grid-name="usersGrid"></div>\n' + "</section>\n");
    $templateCache.put("templates/users/massUpdateForm.html", '<div class="modal-header">\n' + '  <button type="button" class="close" ng-click="closeDialog()" aria-hidden="true">&times;</button>\n' + "  <h3>Mass update</h3>\n" + "</div>\n" + "\n" + '<form name="usersForm" novalidate class="form-horizontal no-margin"\n' + '      ng-submit="save(users)">\n' + "\n" + '  <div class="modal-body">\n' + '    <div ag-field-group for="allowance">\n' + '      <label class="control-label">Allowance</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="allowance" placeholder="Enter Allowance"\n' + '               ng-model="users.allowance" ng-required="true" />\n' + '        <ag-validation-errors for="allowance" />\n' + "      </div>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div class="modal-footer">\n' + "    <ag-submit-button></ag-submit-button>\n" + '    <ag-cancel-button ng-click="closeDialog()"></ag-cancel-button>\n' + "  </div>\n" + "</form>\n");
    $templateCache.put("templates/users/show.html", '<div class="subnav">\n' + '  <ul class="nav nav-pills">\n' + '    <li><a class="list" href="#/users"><i class="icon-list"></i> Users List</a></li>\n' + '    <li><a class="create" href="#/users/create"><i class="icon-plus"></i> New user</a></li>\n' + "  </ul>\n" + "</div>\n" + "\n" + '<div class="content">\n' + '  <h2 class="page-header">Show user</h2>\n' + "\n" + '  <dl class="dl-horizontal">\n' + "    <dt>ID</dt>\n" + "    <dd>{{user.id}}</dd>\n" + "\n" + "    <dt>Email</dt>\n" + "    <dd>{{user.name}}</dd>\n" + "\n" + "    <dt>Login</dt>\n" + "    <dd>{{user.login}}</dd>\n" + "\n" + "    <dt>Birthday</dt>\n" + "    <dd>{{user.birthday | date}}</dd>\n" + "\n" + "    <dt>Paid</dt>\n" + "    <dd>{{user.paid}}</dd>\n" + "  </dl>\n" + "\n" + '  <div class="form-actions">\n' + '    <a href="#/users/{{user.id}}/edit" class="btn"><i class="icon-edit"></i> Edit</a>\n' + '    <ag-delete-button when-confirmed="delete(user)"></ag-delete-button>\n' + "  </div>\n" + "</div>\n");
    $templateCache.put("templates/usersList.html", '<section class="anchor">\n' + "  <h2>Users dialog based example</h2>\n" + "\n" + '  <div collapse="!showSearchForm"\n' + "       ng-include src=\"'templates/partials/userSearch.html'\"></div>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" style="padding-left: 2px">\n' + '            <i class="icon-selected-pointer"></i> Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href=""><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href=""><i class="icon-external-link"></i> Export</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href=""><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + "        <li>\n" + '          <a href="" class="create-button" ng-click="createItem()">\n' + '            <i class="icon-edit"></i>New\n' + "          </a>\n" + "        </li>\n" + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + "        <li>\n" + '          <a href="" title="search screen"\n' + '             ng-click="showSearchForm = !showSearchForm"><i class="icon-search"></i></a>\n' + "        </li>\n" + "      </ul>\n" + "\n" + '      <form class="navbar-search pull-right" ng-submit="usersGrid.search(filters)">\n' + '        <input type="text" value="" placeholder="quick search" class="search-query span2" style="width: 150px;"\n' + '               ng-model="filters.quickSearch"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div ag-grid="gridOptions"\n' + '       ag-grid-name="usersGrid"></div>\n' + "</section>\n");
} ]);

(function() {
    var ListCtrl;
    ListCtrl = function() {
        ListCtrl.$inject = [ "$scope", "sampleData", "editDialog" ];
        function ListCtrl($scope, sampleData, editDialog) {
            var _this = this;
            this.data = sampleData.generate(100);
            $scope.data = this.data;
            $scope.gridOptions = {
                data: this.data,
                datatype: "local",
                colModel: this.gridColumns(),
                sortname: "id"
            };
            $scope.editItem = function(id) {
                var item, self;
                item = _this.findItemById(id);
                item.persisted = function() {
                    return true;
                };
                item.save = function(callback) {
                    return callback.success(this);
                };
                self = _this;
                item["delete"] = function(callback) {
                    self.deleteItemById(id);
                    return callback.success(this);
                };
                return editDialog.open("templates/partials/itemForm.html", item, $scope.grid);
            };
            $scope.createItem = function() {
                var item;
                item = {};
                item.persisted = function() {
                    return false;
                };
                item.save = function(callback) {
                    var generateId;
                    generateId = function() {
                        return new Date().getTime();
                    };
                    item.id = generateId();
                    return callback.success(this);
                };
                return editDialog.open("templates/partials/itemForm.html", item, $scope.grid).then(function(item) {
                    return _this.data.push(item);
                });
            };
            $scope.deleteItem = function(id) {
                var item;
                item = _this.deleteItemById(id);
                return $scope.grid.removeRow(item.id);
            };
        }
        ListCtrl.prototype.findItemById = function(id) {
            id = parseInt(id);
            return _.find(this.data, function(row) {
                return row.id === id;
            });
        };
        ListCtrl.prototype.deleteItemById = function(id) {
            var row;
            row = this.findItemById(id);
            if (row != null) {
                this.data = _.reject(this.data, function(item) {
                    return item.id === row.id;
                });
                return row;
            }
        };
        ListCtrl.prototype.gridColumns = function() {
            return [ {
                name: "id",
                label: "Inv No",
                width: 80,
                sorttype: "int"
            }, {
                name: "customer.name",
                label: "Customer",
                formatter: "editActionLink"
            }, {
                name: "invoiceDate",
                label: "Date"
            }, {
                name: "note",
                label: "Note"
            }, {
                name: "complete",
                label: "Complete"
            } ];
        };
        return ListCtrl;
    }();
    angular.module("angleGrinder").controller("ListCtrl", ListCtrl);
}).call(this);

(function() {
    var UsersListCtrl;
    UsersListCtrl = function() {
        UsersListCtrl.$inject = [ "$scope", "$log", "$dialog", "$filter", "confirmationDialog", "editDialog", "Users", "pathWithContext" ];
        function UsersListCtrl($scope, $log, $dialog, $filter, confirmationDialog, editDialog, Users, pathWithContext) {
            this.$filter = $filter;
            $scope.showSearchForm = true;
            $scope.gridOptions = {
                url: pathWithContext("/api/users"),
                colModel: this.gridColumns(),
                rowNum: 10,
                sortname: "id"
            };
            $scope.editItem = function(id) {
                var promise;
                promise = Users.get({
                    id: id
                }).$promise;
                return editDialog.open(pathWithContext("templates/partials/userForm.html"), promise, $scope.usersGrid);
            };
            $scope.createItem = function() {
                var user;
                user = new Users();
                return editDialog.open(pathWithContext("templates/partials/userForm.html"), user, $scope.usersGrid);
            };
            $scope.deleteItem = function(id) {
                return confirmationDialog.open().then(function(confirmed) {
                    var promise;
                    if (!confirmed) {
                        return;
                    }
                    promise = Users["delete"]({
                        id: id
                    }).$promise;
                    return promise.then(function(response) {
                        return $scope.usersGrid.removeRow(response.id);
                    });
                });
            };
        }
        UsersListCtrl.prototype.gridColumns = function() {
            var _this = this;
            return [ {
                name: "id",
                width: 50,
                formatter: "editActionLink"
            }, {
                name: "login",
                label: "Login",
                formatter: "editActionLink"
            }, {
                name: "name",
                label: "Name",
                formatter: "editActionLink"
            }, {
                name: "allowance",
                label: "Allowance"
            }, {
                name: "birthday",
                label: "Birthday",
                formatter: function(cellVal) {
                    return _this.$filter("date")(cellVal);
                }
            }, {
                name: "paid",
                label: "Paid"
            } ];
        };
        return UsersListCtrl;
    }();
    angular.module("angleGrinder").controller("UsersListCtrl", UsersListCtrl);
}).call(this);

(function() {
    var ListCtrl;
    ListCtrl = function() {
        ListCtrl.$inject = [ "$scope", "$location", "$filter", "$dialog", "confirmationDialog", "Users", "pathWithContext" ];
        function ListCtrl($scope, $location, $filter, $dialog, confirmationDialog, Users, pathWithContext) {
            this.$filter = $filter;
            $scope.gridOptions = {
                url: pathWithContext("/api/users"),
                colModel: this.gridColumns(),
                rowNum: 10,
                sortname: "id",
                multiselect: true
            };
            $scope.showItem = function(id) {
                return $location.path("/users/" + id);
            };
            $scope.editItem = function(id) {
                return $location.path("/users/" + id + "/edit");
            };
            $scope.deleteItem = function(id) {
                return confirmationDialog.open().then(function(confirmed) {
                    var promise;
                    if (!confirmed) {
                        return;
                    }
                    promise = Users["delete"]({
                        id: id
                    }).$promise;
                    return promise.then(function(response) {
                        return $scope.usersGrid.removeRow(response.id);
                    });
                });
            };
            $scope.massUpdate = function() {
                var dialog, userIds;
                userIds = $scope.usersGrid.getSelectedRowIds();
                if (userIds.length === 0) {
                    return;
                }
                dialog = $dialog.dialog({
                    backdropFade: false,
                    dialogFade: false,
                    resolve: {
                        userIds: function() {
                            return userIds;
                        },
                        usersGrid: function() {
                            return $scope.usersGrid;
                        }
                    }
                });
                return dialog.open(pathWithContext("/templates/users/massUpdateForm.html"), "users.MassUpdateFormCtrl");
            };
        }
        ListCtrl.prototype.gridColumns = function() {
            var showActionLink, _this = this;
            showActionLink = function(cellVal, options, rowdata) {
                return '<a href="#/users/' + rowdata.id + '">' + cellVal + "</a>";
            };
            return [ {
                name: "id",
                width: 50,
                formatter: showActionLink
            }, {
                name: "login",
                label: "Login",
                formatter: showActionLink
            }, {
                name: "name",
                label: "Name",
                formatter: showActionLink
            }, {
                name: "allowance",
                label: "Allowance"
            }, {
                name: "birthday",
                label: "Birthday",
                formatter: function(cellVal) {
                    return _this.$filter("date")(cellVal);
                }
            }, {
                name: "paid",
                label: "Paid"
            } ];
        };
        return ListCtrl;
    }();
    angular.module("angleGrinder").controller("users.ListCtrl", ListCtrl);
}).call(this);

(function() {
    var ShowCtrl;
    ShowCtrl = function() {
        ShowCtrl.$inject = [ "$scope", "$location", "user" ];
        function ShowCtrl($scope, $location, user) {
            $scope.user = user;
            $scope["delete"] = function(user) {
                var onSuccess;
                onSuccess = function() {
                    return $location.path("/users");
                };
                return user["delete"]({
                    success: onSuccess
                });
            };
        }
        return ShowCtrl;
    }();
    angular.module("angleGrinder").controller("users.ShowCtrl", ShowCtrl);
}).call(this);

(function() {
    var FormCtrl;
    FormCtrl = function() {
        FormCtrl.$inject = [ "$scope", "$location", "user" ];
        function FormCtrl($scope, $location, user) {
            $scope.user = user;
            $scope.save = function(user) {
                var onError, onSuccess;
                if ($scope.editForm.$invalid) {
                    return;
                }
                onSuccess = function(user) {
                    return $location.path("/users/" + user.id);
                };
                onError = function(response) {
                    var errors;
                    if (response.status === 422) {
                        errors = response.data.errors;
                        return $scope.editForm.$serverError = errors[user.resourceName()];
                    }
                };
                return user.save({
                    success: onSuccess,
                    error: onError
                });
            };
            $scope["delete"] = function(user) {
                var onSuccess;
                onSuccess = function() {
                    return $location.path("/users");
                };
                return user["delete"]({
                    success: onSuccess
                });
            };
        }
        return FormCtrl;
    }();
    angular.module("angleGrinder").controller("users.FormCtrl", FormCtrl);
}).call(this);

(function() {
    var MassUpdateFormCtrl;
    MassUpdateFormCtrl = function() {
        MassUpdateFormCtrl.$inject = [ "$scope", "Users", "userIds", "dialog", "usersGrid" ];
        function MassUpdateFormCtrl($scope, Users, userIds, dialog, usersGrid) {
            $scope.users = {
                allowance: 0
            };
            $scope.save = function(users) {
                var promise;
                promise = Users.massUpdate({
                    ids: userIds,
                    data: users
                }).$promise;
                return promise.then(function() {
                    usersGrid.reload();
                    return dialog.close();
                });
            };
            $scope.closeDialog = function() {
                return dialog.close();
            };
        }
        return MassUpdateFormCtrl;
    }();
    angular.module("angleGrinder").controller("users.MassUpdateFormCtrl", MassUpdateFormCtrl);
}).call(this);