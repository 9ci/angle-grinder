(function() {
    var ConfirmationDialog, ConfirmationDialogCtrl, EditDialog, FormDialogCtrl, forms;
    forms = angular.module("angleGrinder.forms", [ "angleGrinder.common", "ui.bootstrap" ]);
    FormDialogCtrl = function() {
        FormDialogCtrl.$inject = [ "$scope", "$rootScope", "$log", "dialog", "item", "flatten" ];
        function FormDialogCtrl($scope, $rootScope, $log, dialog, item, flatten) {
            $scope.item = item;
            $scope.createNew = !item.persisted();
            $scope.serverValidationErrors = {};
            $scope.closeEditDialog = function() {
                $log.info("Closing the dialog");
                return dialog.close($scope.item);
            };
            $scope.save = function(item) {
                var onError, onSuccess;
                if ($scope.editForm.$invalid) {
                    $log.warn("The form is invalid", $scope.editForm);
                    return;
                }
                $scope.serverValidationErrors = {};
                onSuccess = function(response) {
                    $log.info("Item has been updated/created", response);
                    $rootScope.$broadcast("itemUpdated", flatten(response));
                    return $scope.closeEditDialog();
                };
                onError = function(response) {
                    var errors, _ref, _ref1;
                    $log.error("Something went wront", response);
                    if (response.status === 422) {
                        errors = (_ref = response.data) != null ? (_ref1 = _ref.errors) != null ? _ref1[item.resourceName()] : void 0 : void 0;
                        $scope.serverValidationErrors = errors;
                        return $log.error("Server side validation errors", errors);
                    }
                };
                return item.save({
                    success: onSuccess,
                    error: onError
                });
            };
            $scope["delete"] = function() {
                var onError, onSuccess;
                onSuccess = function(response) {
                    $log.info("Item has been deleted", response);
                    $rootScope.$broadcast("itemDeleted", item);
                    return $scope.closeEditDialog();
                };
                onError = function(response) {
                    return $log.error("Something went wront", response);
                };
                return item["delete"]({
                    success: onSuccess,
                    error: onError
                });
            };
        }
        return FormDialogCtrl;
    }();
    forms.controller("FormDialogCtrl", FormDialogCtrl);
    EditDialog = function() {
        EditDialog.$inject = [ "$dialog" ];
        function EditDialog($dialog) {
            this.$dialog = $dialog;
        }
        EditDialog.prototype.open = function(templateUrl, item) {
            var dialog;
            dialog = this.$dialog.dialog({
                backdropFade: false,
                dialogFade: false,
                resolve: {
                    item: function() {
                        return item;
                    }
                }
            });
            dialog.handledEscapeKey = function(e) {
                if (e.which === 27) {
                    e.preventDefault();
                    if (!dialog.$scope.editForm.$dirty) {
                        dialog.close();
                        return dialog.$scope.$apply();
                    }
                }
            };
            dialog.handleBackDropClick = function(e) {
                e.preventDefault();
                if (!dialog.$scope.editForm.$dirty) {
                    dialog.close();
                    return dialog.$scope.$apply();
                }
            };
            return dialog.open(templateUrl, "FormDialogCtrl");
        };
        return EditDialog;
    }();
    forms.service("editDialog", EditDialog);
    ConfirmationDialogCtrl = function() {
        ConfirmationDialogCtrl.$inject = [ "$scope", "$log", "dialog", "message" ];
        function ConfirmationDialogCtrl($scope, $log, dialog, message) {
            $scope.message = message;
            $scope.close = function(confirmed) {
                $log.info("Confirmation dialog closed", confirmed);
                return dialog.close(confirmed);
            };
        }
        return ConfirmationDialogCtrl;
    }();
    forms.controller("ConfirmationDialogCtrl", ConfirmationDialogCtrl);
    forms.run([ "$templateCache", function($templateCache) {
        return $templateCache.put("templates/dialogs/confirmation.html", '<div class="modal-body">{{message}}</div>\n  <div class="modal-footer">\n  <button class="btn" ng-click="close(false)">Cancel</button>\n  <button class="btn btn-primary" ng-click="close(true)">OK</button>\n</div>');
    } ]);
    ConfirmationDialog = function() {
        ConfirmationDialog.$inject = [ "$dialog", "$log" ];
        function ConfirmationDialog($dialog, $log) {
            this.$dialog = $dialog;
            this.$log = $log;
        }
        ConfirmationDialog.prototype.open = function(message) {
            var dialog;
            if (message == null) {
                message = null;
            }
            this.$log.info("Opening confirmation dialog, message:", message);
            dialog = this.$dialog.dialog({
                resolve: {
                    message: function() {
                        if (message != null) {
                            return message;
                        } else {
                            return "Are you sure?";
                        }
                    }
                }
            });
            return dialog.open("templates/dialogs/confirmation.html", "ConfirmationDialogCtrl");
        };
        return ConfirmationDialog;
    }();
    forms.service("confirmationDialog", ConfirmationDialog);
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.directive("agDeleteButton", function() {
        return {
            restrict: "E",
            replace: true,
            scope: {
                whenConfirmed: "&"
            },
            controller: [ "$scope", "pendingRequests", "$element", function($scope, pendingRequests, $element) {
                $scope.confirmation = false;
                $scope["delete"] = function() {
                    if ($scope.confirmation) {
                        $scope.whenConfirmed();
                    }
                    return $scope.confirmation = !$scope.confirmation;
                };
                $scope.$watch(function() {
                    return $scope.deleting = pendingRequests["for"]("POST", "DELETE");
                });
                return $scope.$watch("confirmation", function(confirmation) {
                    $scope.label = !confirmation ? "Delete" : "Are you sure?";
                    if (confirmation) {
                        $element.removeClass("btn-danger");
                        return $element.addClass("btn-warning");
                    } else {
                        $element.addClass("btn-danger");
                        return $element.removeClass("btn-warning");
                    }
                });
            } ],
            template: '<button type="button" class="btn btn-danger ag-delete-button" ng-disabled="deleting"\n        ng-mouseleave="confirmation = false"\n        ng-click="delete()">\n  <i class="icon-trash"></i> {{label}}<span ng-show="deleting">...</span>\n</button>'
        };
    });
    forms.directive("agCreateButton", function() {
        return {
            restrict: "E",
            replace: true,
            transclude: true,
            compile: function(element, attrs, trasclude) {
                return {
                    pre: function(scope, element) {
                        return trasclude(scope, function(clone) {
                            if ($.trim(clone.text()) === "") {
                                return element.append("Create");
                            }
                        });
                    }
                };
            },
            template: '<a href="" class="btn">\n  <i class="icon-edit"></i>\n  <span ng-transclude></span>\n</a>'
        };
    });
    forms.directive("agCancelButton", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<button type="button" class="btn">\n  <i class="icon-remove"></i> Cancel\n</button>'
        };
    });
    forms.directive("agSubmitButton", function() {
        return {
            restrict: "E",
            replace: true,
            controller: [ "$scope", "pendingRequests", function($scope, pendingRequests) {
                return $scope.$watch(function() {
                    return $scope.saving = pendingRequests["for"]("POST", "PUT", "PATCH");
                });
            } ],
            template: '<button type="submit" class="btn btn-primary"\n        ng-click="submitted = true"\n        ng-disabled="saving"\n  <i class="icon-ok icon-white"></i> Save<span ng-show="saving">...</span>\n</button>'
        };
    });
}).call(this);

(function() {
    var forms;
    forms = angular.module("angleGrinder.forms");
    forms.value("validationMessages", {
        required: "This field is required",
        mismatch: "Does not match the confirmation",
        minlength: "This field is too short",
        maxlength: "This field is too long",
        email: "Invalid email address",
        pattern: "Invalid pattern"
    });
    forms.directive("match", function() {
        return {
            require: "ngModel",
            link: function(scope, elem, attrs, ctrl) {
                var validateEqual, validator;
                validateEqual = function(value, otherValue) {
                    var allEmpty, valid;
                    allEmpty = _.compact([ value, otherValue ]).length === 0;
                    valid = allEmpty || value === otherValue;
                    ctrl.$setValidity("mismatch", valid);
                    return value;
                };
                scope.$watch(attrs.match, function(otherValue) {
                    return validateEqual(ctrl.$viewValue, otherValue);
                });
                validator = function(value) {
                    var otherValue;
                    otherValue = scope.$eval(attrs.match);
                    return validateEqual(value, otherValue);
                };
                ctrl.$parsers.unshift(validator);
                return ctrl.$formatters.unshift(validator);
            }
        };
    });
    forms.directive("agFieldGroup", function() {
        return {
            restrict: "A",
            require: "^form",
            replace: true,
            transclude: true,
            template: '<div class="control-group" ng-transclude></div>',
            link: function($scope, element, attrs, formCtrl) {
                var displayErrors, fields;
                fields = (attrs["for"] || "").split(",");
                displayErrors = function() {
                    var valid;
                    valid = _.map(fields, function(field) {
                        var _ref;
                        return formCtrl[field].$valid && !((_ref = formCtrl.$serverError) != null ? _ref[field] : void 0);
                    });
                    if (_.all(valid)) {
                        return element.removeClass("error");
                    } else {
                        return element.addClass("error");
                    }
                };
                angular.forEach(fields, function(fieldName) {
                    $scope.$watch("" + formCtrl.$name + "." + fieldName + ".$viewValue", function() {
                        var _ref;
                        if ((_ref = formCtrl[fieldName]) != null ? _ref.$dirty : void 0) {
                            return displayErrors();
                        }
                    });
                    return $scope.$watch("" + formCtrl.$name + ".$serverError." + fieldName, function(error) {
                        if (error != null) {
                            return displayErrors();
                        }
                    });
                });
                return $scope.$watch("submitted", function(submitted) {
                    if (submitted) {
                        return displayErrors();
                    }
                });
            }
        };
    });
    forms.directive("agValidationErrors", [ "validationMessages", function(validationMessages) {
        return {
            restrict: "E",
            require: "^form",
            replace: true,
            link: function($scope, element, attrs, formCtrl) {
                var clearErrors, displayErrorMessages, field, fieldName, formName, messageFor;
                formName = formCtrl.$name;
                fieldName = attrs["for"];
                field = formCtrl[fieldName];
                clearErrors = function() {
                    return element.html("");
                };
                messageFor = function(error) {
                    return attrs[error] || validationMessages[error];
                };
                displayErrorMessages = function() {
                    var error, invalid, message, serverError, _ref, _ref1;
                    clearErrors();
                    _ref = field.$error;
                    for (error in _ref) {
                        invalid = _ref[error];
                        if (!invalid) {
                            continue;
                        }
                        message = messageFor(error);
                        if (message == null) {
                            continue;
                        }
                        element.append('<span class="help-inline">' + message + "</span>");
                    }
                    serverError = (_ref1 = formCtrl.$serverError) != null ? _ref1[fieldName] : void 0;
                    if (serverError != null) {
                        return element.append('<span class="help-inline">' + serverError + "</span>");
                    }
                };
                $scope.$watch("" + formName + "." + fieldName + ".$viewValue", function() {
                    if (field.$dirty) {
                        return displayErrorMessages();
                    }
                });
                $scope.$watch("submitted", function(submitted) {
                    if (submitted) {
                        return displayErrorMessages();
                    }
                });
                return $scope.$watch("saving", function(newValue, oldValue) {
                    if (!newValue && newValue !== oldValue) {
                        return displayErrorMessages();
                    }
                });
            }
        };
    } ]);
    forms.directive("agServerValidationErrors", function() {
        return {
            restrict: "A",
            require: "^form",
            link: function(scope, element, attrs, form) {
                var fieldName, _, _results;
                form.$serverError = {};
                scope.$watch("serverValidationErrors", function(serverError) {
                    return form.$serverError = serverError;
                });
                _results = [];
                for (fieldName in form) {
                    _ = form[fieldName];
                    _results.push(scope.$watch("" + form.$name + "." + fieldName + ".$viewValue", function() {
                        return form.$serverError = {};
                    }));
                }
                return _results;
            }
        };
    });
}).call(this);