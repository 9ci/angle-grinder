(function() {
    var ConfirmationDialog, ConfirmationDialogCtrl, EditDialog, EditItemCtrl, forms;
    forms = angular.module("angleGrinder.forms", [ "ui.bootstrap" ]);
    EditItemCtrl = function() {
        EditItemCtrl.$inject = [ "$scope", "$rootScope", "$log", "dialog", "item", "flatten" ];
        function EditItemCtrl($scope, $rootScope, $log, dialog, item, flatten) {
            $scope.item = item;
            $scope.createNew = !item.persisted();
            $scope.serverValidationErrors = {};
            $scope.closeEditDialog = function() {
                $log.info("Closing the dialog");
                return dialog.close($scope.item);
            };
            $scope.save = function(item) {
                var onError, onSuccess;
                $scope.$broadcast("saving");
                if ($scope.editForm.$valid) {
                    $log.info("The form is valid", $scope.editForm);
                    $scope.saving = true;
                    $scope.serverValidationErrors = {};
                    onSuccess = function(response) {
                        $scope.saving = false;
                        $log.info("Item has been updated/created", response);
                        $rootScope.$broadcast("itemUpdated", flatten(response));
                        return $scope.closeEditDialog();
                    };
                    onError = function(response) {
                        var errors;
                        $scope.saving = false;
                        $log.error("Something went wront", response);
                        if (response.status === 422) {
                            errors = response.data.errors;
                            $scope.serverValidationErrors = errors;
                            return $log.error("Server side validation errors", errors);
                        }
                    };
                    return item.save({
                        success: onSuccess,
                        error: onError
                    });
                } else {
                    return $log.warn("The form is invalid", $scope.editForm);
                }
            };
            $scope["delete"] = function() {
                var onError, onSuccess;
                $scope.deleting = true;
                onSuccess = function(response) {
                    $scope.deleting = false;
                    $log.info("Item has been deleted", response);
                    $rootScope.$broadcast("itemDeleted", item);
                    return $scope.closeEditDialog();
                };
                onError = function(response) {
                    $scope.deleting = false;
                    return $log.error("Something went wront", response);
                };
                return item["delete"]({
                    success: onSuccess,
                    error: onError
                });
            };
        }
        return EditItemCtrl;
    }();
    forms.controller("EditItemCtrl", EditItemCtrl);
    EditDialog = function() {
        EditDialog.$inject = [ "$dialog" ];
        function EditDialog($dialog) {
            this.$dialog = $dialog;
        }
        EditDialog.prototype.open = function(templateUrl, item) {
            var dialog;
            dialog = this.$dialog.dialog({
                backdropFade: false,
                dialogFade: false,
                resolve: {
                    item: function() {
                        return item;
                    }
                }
            });
            dialog.handledEscapeKey = function(e) {
                if (e.which === 27) {
                    e.preventDefault();
                    if (!dialog.$scope.editForm.$dirty) {
                        dialog.close();
                        return dialog.$scope.$apply();
                    }
                }
            };
            dialog.handleBackDropClick = function(e) {
                e.preventDefault();
                if (!dialog.$scope.editForm.$dirty) {
                    dialog.close();
                    return dialog.$scope.$apply();
                }
            };
            return dialog.open(templateUrl, "EditItemCtrl");
        };
        return EditDialog;
    }();
    forms.service("editDialog", EditDialog);
    ConfirmationDialogCtrl = function() {
        ConfirmationDialogCtrl.$inject = [ "$scope", "$log", "dialog", "message" ];
        function ConfirmationDialogCtrl($scope, $log, dialog, message) {
            $scope.message = message;
            $scope.close = function(confirmed) {
                $log.info("Confirmation dialog closed", confirmed);
                return dialog.close(confirmed);
            };
        }
        return ConfirmationDialogCtrl;
    }();
    forms.controller("ConfirmationDialogCtrl", ConfirmationDialogCtrl);
    forms.run([ "$templateCache", function($templateCache) {
        return $templateCache.put("templates/dialogs/confirmation.html", '<div class="modal-body">{{message}}</div>\n  <div class="modal-footer">\n  <button class="btn" ng-click="close(false)">Cancel</button>\n  <button class="btn btn-primary" ng-click="close(true)">OK</button>\n</div>');
    } ]);
    ConfirmationDialog = function() {
        ConfirmationDialog.$inject = [ "$dialog", "$log" ];
        function ConfirmationDialog($dialog, $log) {
            this.$dialog = $dialog;
            this.$log = $log;
        }
        ConfirmationDialog.prototype.open = function(message) {
            var dialog;
            if (message == null) {
                message = null;
            }
            this.$log.info("Opening confirmation dialog, message:", message);
            dialog = this.$dialog.dialog({
                resolve: {
                    message: function() {
                        if (message != null) {
                            return message;
                        } else {
                            return "Are you sure?";
                        }
                    }
                }
            });
            return dialog.open("templates/dialogs/confirmation.html", "ConfirmationDialogCtrl");
        };
        return ConfirmationDialog;
    }();
    forms.service("confirmationDialog", ConfirmationDialog);
    forms.value("validationMessages", {
        required: "This field is required",
        mismatch: "Does not match the confirmation",
        minlength: "This field is too short",
        maxlength: "This field is too long",
        email: "Invalid email address",
        pattern: "Ivalid pattern"
    });
    forms.directive("match", function() {
        return {
            require: "ngModel",
            link: function(scope, elem, attrs, ctrl) {
                var validateEqual;
                validateEqual = function(value, otherValue) {
                    var valid;
                    valid = value === otherValue;
                    ctrl.$setValidity("mismatch", valid);
                    return value;
                };
                scope.$watch(attrs.match, function(otherValue) {
                    return validateEqual(ctrl.$viewValue, otherValue);
                });
                ctrl.$parsers.unshift(function(value) {
                    var otherValue;
                    otherValue = scope.$eval(attrs.match);
                    return validateEqual(value, otherValue);
                });
                return ctrl.$formatters.unshift(function(value) {
                    return validateEqual(value, scope.$eval(attrs.match));
                });
            }
        };
    });
    forms.directive("fieldGroup", function() {
        return {
            restrict: "A",
            require: "^form",
            replace: true,
            transclude: true,
            template: '<div class="control-group" ng-transclude></div>',
            link: function($scope, element, attrs, formCtrl) {
                var displayErrors, fields, formName;
                formName = formCtrl.$name;
                fields = (attrs["for"] || "").split(",");
                displayErrors = function() {
                    var valid;
                    valid = _.map(fields, function(field) {
                        return formCtrl[field].$valid;
                    });
                    if (_.all(valid)) {
                        return element.removeClass("error");
                    } else {
                        return element.addClass("error");
                    }
                };
                angular.forEach(fields, function(fieldName) {
                    return $scope.$watch("" + formName + "." + fieldName + ".$viewValue", function() {
                        var _ref;
                        if ((_ref = formCtrl[fieldName]) != null ? _ref.$dirty : void 0) {
                            return displayErrors();
                        }
                    });
                });
                return $scope.$on("saving", function() {
                    return displayErrors();
                });
            }
        };
    });
    forms.directive("validationError", [ "validationMessages", function(validationMessages) {
        return {
            restrict: "E",
            require: "^form",
            transclude: false,
            link: function($scope, element, attrs, formCtrl) {
                var clearErrors, field, fieldName, formName, messageFor, toggleErrors;
                formName = formCtrl.$name;
                fieldName = attrs["for"];
                field = $scope[formName][fieldName];
                clearErrors = function() {
                    return element.html("");
                };
                messageFor = function(error) {
                    return attrs[error] || validationMessages[error];
                };
                toggleErrors = function() {
                    var error, invalid, message, _ref, _results;
                    clearErrors();
                    _ref = field.$error;
                    _results = [];
                    for (error in _ref) {
                        invalid = _ref[error];
                        if (!invalid) {
                            continue;
                        }
                        message = messageFor(error);
                        if (message == null) {
                            continue;
                        }
                        _results.push(element.append('<span class="help-inline">' + message + "</span>"));
                    }
                    return _results;
                };
                $scope.$watch("" + formName + "." + fieldName + ".$viewValue", function() {
                    if (field.$dirty) {
                        return toggleErrors();
                    }
                });
                return $scope.$on("saving", function() {
                    return toggleErrors();
                });
            }
        };
    } ]);
    forms.directive("deleteButton", function() {
        return {
            restrict: "E",
            replace: true,
            scope: {
                whenConfirmed: "&"
            },
            controller: [ "$scope", "$element", function($scope, $element) {
                $scope.deleting = $scope.$parent.deleting;
                $scope.confirmation = false;
                $scope["delete"] = function() {
                    if ($scope.confirmation) {
                        $scope.whenConfirmed();
                    }
                    return $scope.confirmation = !$scope.confirmation;
                };
                $scope.$watch("confirmation", function(confirmation) {
                    $scope.label = !confirmation ? "Delete" : "Are you sure?";
                    if (confirmation) {
                        $element.removeClass("btn-danger");
                        return $element.addClass("btn-warning");
                    } else {
                        $element.addClass("btn-danger");
                        return $element.removeClass("btn-warning");
                    }
                });
                return $scope.$watch("$parent.deleting", function(deleting) {
                    $scope.deleting = deleting;
                    if (deleting) {
                        return $element.addClass("disabled");
                    } else {
                        return $element.removeClass("disabled");
                    }
                });
            } ],
            template: '<button type="button" class="btn btn-danger pull-left"\n        ng-mouseleave="confirmation = false"\n        ng-click="delete()">\n  <i class="icon-trash"></i> {{label}}<span ng-show="deleting">...</span>\n</button>'
        };
    });
    forms.directive("cancelButton", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<button type="button" class="btn">\n  <i class="icon-remove"></i> Cancel\n</button>'
        };
    });
    forms.directive("submitButton", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<button type="submit" class="btn btn-primary"\n        ng-class="{disabled: saving}">\n  <i class="icon-ok icon-white"></i> Save<span ng-show="saving">...</span>\n</button>'
        };
    });
    forms.directive("serverValidationErrors", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<span>\n  <span x-errors-for="{{entity}}" ng-repeat="(entity, errors) in serverValidationErrors">\n    <div class="alert alert-error" ng-repeat="(field, message) in errors">\n      {{message}}\n    </div>\n  </span>\n</span>'
        };
    });
}).call(this);