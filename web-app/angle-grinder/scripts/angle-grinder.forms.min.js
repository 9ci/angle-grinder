(function() {
    var forms;
    forms = angular.module("angleGrinder.forms", []);
    forms.value("validationMessages", {
        required: "This field is required",
        mismatch: "Does not match the confirmation",
        minlength: "This field is too short",
        maxlength: "This field is too long",
        email: "Invalid email address"
    });
    forms.directive("match", function() {
        return {
            require: "ngModel",
            link: function(scope, elem, attrs, ctrl) {
                var validateEqual;
                validateEqual = function(value, otherValue) {
                    var valid;
                    valid = value === otherValue;
                    ctrl.$setValidity("mismatch", valid);
                    return value;
                };
                scope.$watch(attrs.match, function(otherValue) {
                    return validateEqual(ctrl.$viewValue, otherValue);
                });
                ctrl.$parsers.unshift(function(value) {
                    var otherValue;
                    otherValue = scope.$eval(attrs.match);
                    return validateEqual(value, otherValue);
                });
                return ctrl.$formatters.unshift(function(value) {
                    return validateEqual(value, scope.$eval(attrs.match));
                });
            }
        };
    });
    forms.directive("fieldGroup", function() {
        return {
            restrict: "A",
            require: "^form",
            replace: true,
            transclude: true,
            template: '<div class="control-group" ng-transclude></div>',
            link: function($scope, element, attrs, ctrl) {
                var fields, formName, watchExpression;
                formName = ctrl.$name;
                fields = (attrs["for"] || "").split(",");
                watchExpression = function(formName, fields) {
                    var conditions, field, _i, _len;
                    conditions = [];
                    for (_i = 0, _len = fields.length; _i < _len; _i++) {
                        field = fields[_i];
                        conditions.push("(" + formName + "." + field + ".$dirty && " + formName + "." + field + ".$invalid)");
                    }
                    return conditions.join(" || ");
                };
                return $scope.$watch(watchExpression(formName, fields), function() {
                    var $field, allPristine, allValid, field, _i, _len;
                    allPristine = true;
                    allValid = true;
                    for (_i = 0, _len = fields.length; _i < _len; _i++) {
                        field = fields[_i];
                        $field = $scope[formName][field];
                        if ($field != null) {
                            allPristine = allPristine && $field.$pristine;
                            allValid = allValid && $field.$valid;
                        }
                    }
                    if (allPristine) {
                        return;
                    }
                    if (allValid) {
                        return element.removeClass("error");
                    } else {
                        return element.addClass("error");
                    }
                });
            }
        };
    });
    forms.directive("validationError", [ "validationMessages", function(validationMessages) {
        return {
            restrict: "E",
            require: "^form",
            transclude: false,
            link: function($scope, element, attrs, ctrl) {
                var expression, fieldName, formName;
                formName = ctrl.$name;
                fieldName = attrs["for"];
                expression = "" + formName + "." + fieldName + ".$dirty && " + formName + "." + fieldName + ".$invalid";
                return $scope.$watch(expression, function() {
                    var $field, error, html, invalid, message, _ref;
                    $field = $scope[formName][fieldName];
                    html = "";
                    if ($field.$dirty && $field.$invalid) {
                        _ref = $field.$error;
                        for (error in _ref) {
                            invalid = _ref[error];
                            if (invalid) {
                                message = attrs[error] || validationMessages[error];
                                if (message != null) {
                                    html += '<span class="help-inline">' + message + "</span>";
                                }
                            }
                        }
                    }
                    return element.html(html);
                });
            }
        };
    } ]);
}).call(this);