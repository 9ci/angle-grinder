(function() {
    var EditDialog, EditItemCtrl, flatten, gridz, hasSearchFilters;
    gridz = angular.module("angleGrinder.gridz", [ "ui.bootstrap" ]);
    gridz.directive("agGrid", [ "hasSearchFilters", function(hasSearchFilters) {
        var link;
        link = function($scope, element, attrs) {
            var $grid, gridOptions, invokeEditItemDialogFor;
            $grid = $("#grid", element);
            gridOptions = $scope.$eval(attrs.agGrid);
            $grid.gridz(gridOptions);
            invokeEditItemDialogFor = function(id) {
                return $scope.$apply(function() {
                    return $scope.editDialog(id);
                });
            };
            $grid.on("editAction", function(event, id) {
                event.preventDefault();
                return invokeEditItemDialogFor(id);
            });
            $grid.on("click", "a.editActionLink", function(event) {
                var id;
                event.preventDefault();
                id = $(this).parents("tr:first").attr("id");
                return invokeEditItemDialogFor(id);
            });
            $grid.on("deleteAction", function(event, id) {
                event.preventDefault();
                return $scope.$apply(function() {
                    return $scope.deleteItem(id);
                });
            });
            $scope.$on("itemUpdated", function(event, data) {
                var ind;
                if ($grid.jqGrid("getInd", data.id)) {
                    $grid.jqGrid("setRowData", data.id, data);
                } else {
                    $grid.jqGrid("addRowData", data.id, data, "first");
                }
                ind = $grid[0].rows.namedItem(data.id);
                $(ind).css("background-color", "#DFF0D8");
                return $(ind).delay(100).fadeOut("medium", function() {
                    return $(ind).css("background-color", "");
                }).fadeIn("fast");
            });
            $scope.$on("itemDeleted", function(event, item) {
                return $grid.jqGrid("delRowData", item.id);
            });
            return $scope.$on("searchUpdated", function(event, filters) {
                var params;
                params = {
                    search: hasSearchFilters(filters),
                    postData: {
                        filters: JSON.stringify(filters)
                    }
                };
                return $grid.setGridParam(params).trigger("reloadGrid");
            });
        };
        return {
            restrict: "A",
            template: '<table id="grid"></table>\n<div id="gridPager"></div>',
            link: link
        };
    } ]);
    EditItemCtrl = function() {
        EditItemCtrl.$inject = [ "$scope", "$rootScope", "$log", "dialog", "item", "createNew", "flatten" ];
        function EditItemCtrl($scope, $rootScope, $log, dialog, item, createNew, flatten) {
            $scope.item = item;
            $scope.createNew = createNew;
            $scope.closeEditDialog = function() {
                $log.info("Closing the dialog");
                return dialog.close($scope.item);
            };
            $scope.save = function() {
                if ($scope.editForm.$valid) {
                    $log.info("The form is valid", $scope.editForm);
                    return item.save(function(response) {
                        $log.info("Item has been updated/created", response);
                        $rootScope.$broadcast("itemUpdated", flatten(response));
                        return $scope.closeEditDialog();
                    });
                } else {
                    return $log.warn("The form is invalid", $scope.editForm);
                }
            };
            $scope["delete"] = function() {
                return item["delete"](function(response) {
                    $log.info("Item has been deleted", response);
                    $rootScope.$broadcast("itemDeleted", item);
                    return $scope.closeEditDialog();
                });
            };
        }
        return EditItemCtrl;
    }();
    gridz.controller("EditItemCtrl", EditItemCtrl);
    EditDialog = function() {
        EditDialog.$inject = [ "$dialog" ];
        function EditDialog($dialog) {
            this.$dialog = $dialog;
        }
        EditDialog.prototype.open = function(templateUrl, item) {
            var dialog;
            dialog = this.$dialog.dialog({
                backdropFade: false,
                dialogFade: false,
                resolve: {
                    item: function() {
                        return item;
                    },
                    createNew: function() {
                        return item.id == null;
                    }
                }
            });
            dialog.handledEscapeKey = function(e) {
                if (e.which === 27) {
                    e.preventDefault();
                    if (!dialog.$scope.editForm.$dirty) {
                        dialog.close();
                        return dialog.$scope.$apply();
                    }
                }
            };
            dialog.handleBackDropClick = function(e) {
                e.preventDefault();
                if (!dialog.$scope.editForm.$dirty) {
                    dialog.close();
                    return dialog.$scope.$apply();
                }
            };
            return dialog.open(templateUrl, "EditItemCtrl");
        };
        return EditDialog;
    }();
    gridz.service("editDialog", EditDialog);
    flatten = function(target, opts) {
        var delimiter, getKey, output, step;
        if (opts == null) {
            opts = {
                delimiter: "."
            };
        }
        delimiter = opts.delimiter;
        getKey = function(key, prev) {
            if (prev) {
                return prev + delimiter + key;
            } else {
                return key;
            }
        };
        step = function(object, prev) {
            return Object.keys(object).forEach(function(key) {
                var isarray, isobject, type;
                isarray = opts.safe && Array.isArray(object[key]);
                type = Object.prototype.toString.call(object[key]);
                isobject = type === "[object Object]" || type === "[object Array]";
                if (!isarray && isobject) {
                    return step(object[key], getKey(key, prev));
                }
                return output[getKey(key, prev)] = object[key];
            });
        };
        output = {};
        step(target);
        return output;
    };
    gridz.value("flatten", flatten);
    hasSearchFilters = function(filters) {
        var value, _;
        for (_ in filters) {
            value = filters[_];
            if (value != null && value.trim() !== "") {
                return true;
            }
        }
        return false;
    };
    gridz.value("hasSearchFilters", hasSearchFilters);
}).call(this);