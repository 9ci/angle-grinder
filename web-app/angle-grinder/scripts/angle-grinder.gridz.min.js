(function() {
    var gridz, hasSearchFilters;
    gridz = angular.module("angleGrinder.gridz", [ "angleGrinder.common", "ui.select2" ]);
    gridz.directive("agGrid", [ "hasSearchFilters", "$log", function(hasSearchFilters, $log) {
        var link;
        link = function($scope, $element, attrs) {
            var initializeGrid;
            initializeGrid = function(gridOptions) {
                var $grid, editItem, flashRowFor, showItem;
                if (gridOptions == null) {
                    return;
                }
                $log.info("Initializing the grid", gridOptions);
                $grid = $("#grid", $element);
                gridOptions.gridComplete = function() {
                    var width;
                    width = $element.parent().width() - 1;
                    return $grid.setGridWidth(width);
                };
                $grid.gridz(gridOptions);
                showItem = function(id) {
                    return $scope.$apply(function() {
                        if ($scope.showItem != null) {
                            return $scope.showItem(id);
                        } else {
                            return $log.warn("`$scope.showItem` is not defined");
                        }
                    });
                };
                editItem = function(id) {
                    return $scope.$apply(function() {
                        if ($scope.editItem != null) {
                            return $scope.editItem(id);
                        } else {
                            return $log.warn("`$scope.editItem` is not defined");
                        }
                    });
                };
                flashRowFor = function(item, complete) {
                    var $row;
                    if (complete == null) {
                        complete = function() {};
                    }
                    $row = $($grid[0].rows.namedItem(item.id));
                    $row.css("background-color", "#DFF0D8");
                    $row.delay(100).fadeOut("medium", function() {
                        return $row.css("background-color", "");
                    });
                    return $row.fadeIn("fast", function() {
                        return complete();
                    });
                };
                $grid.on("showAction", function(event, id) {
                    event.preventDefault();
                    return showItem(id);
                });
                $grid.on("editAction", function(event, id) {
                    event.preventDefault();
                    return editItem(id);
                });
                $grid.on("click", "a.editActionLink", function(event) {
                    var id;
                    event.preventDefault();
                    id = $(this).parents("tr:first").attr("id");
                    return editItem(id);
                });
                $grid.on("deleteAction", function(event, id) {
                    event.preventDefault();
                    return $scope.$apply(function() {
                        return $scope.deleteItem(id);
                    });
                });
                $grid.on("jqGridAfterLoadComplete", function() {
                    return $scope.$broadcast("gridzLoadComplete");
                });
                $scope.$on("itemUpdated", function(event, item) {
                    if ($grid.jqGrid("getInd", item.id)) {
                        $grid.jqGrid("setRowData", item.id, item);
                    } else {
                        $grid.jqGrid("addRowData", item.id, item, "first");
                    }
                    return flashRowFor(item);
                });
                $scope.$on("itemDeleted", function(event, item) {
                    return flashRowFor(item, function() {
                        return $grid.jqGrid("delRowData", item.id);
                    });
                });
                return $scope.$on("searchUpdated", function(event, filters) {
                    var params;
                    params = {
                        search: hasSearchFilters(filters),
                        postData: {
                            filters: JSON.stringify(filters)
                        }
                    };
                    return $grid.setGridParam(params).trigger("reloadGrid");
                });
            };
            return $scope.$watch(attrs.agGrid, initializeGrid);
        };
        return {
            restrict: "A",
            template: '<table id="grid"></table>\n<div id="gridPager"></div>',
            link: link
        };
    } ]);
    gridz.value("flatten", function(target, opts) {
        var delimiter, getKey, output, step;
        if (opts == null) {
            opts = {
                delimiter: "."
            };
        }
        delimiter = opts.delimiter;
        getKey = function(key, prev) {
            if (prev) {
                return prev + delimiter + key;
            } else {
                return key;
            }
        };
        step = function(object, prev) {
            return angular.forEach(Object.keys(object), function(key) {
                var isArray, isObject, type;
                isArray = opts.safe && object[key] instanceof Array;
                type = Object.prototype.toString.call(object[key]);
                isObject = type === "[object Object]" || type === "[object Array]";
                if (!isArray && isObject) {
                    return step(object[key], getKey(key, prev));
                }
                return output[getKey(key, prev)] = object[key];
            });
        };
        output = {};
        step(target);
        return output;
    });
    hasSearchFilters = function(filters) {
        var value, _;
        for (_ in filters) {
            value = filters[_];
            if (value == null) {
                continue;
            }
            if (typeof value === "string") {
                if ($.trim(value) !== "") {
                    return true;
                }
            } else {
                return true;
            }
        }
        return false;
    };
    gridz.value("hasSearchFilters", hasSearchFilters);
    gridz.directive("agSearchButton", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<button type="button" ng-click="advancedSearch(search)" ng-class="{disabled: searching}" class="btn btn-info">\n  <i class="icon-search icon-white"></i> Search<span ng-show="searching">...</span>\n</button>'
        };
    });
    gridz.directive("agResetSearchButton", function() {
        return {
            restrict: "E",
            replace: true,
            template: '<button type="button" ng-click="resetSearch()" ng-class="{disabled: searching}" class="btn">\n  <i class="icon-remove"></i> Reset<span ng-show="searching">...</span>\n</button>'
        };
    });
    gridz.directive("agSearchForm", [ "$rootScope", function($rootScope) {
        return {
            restrict: "A",
            scope: false,
            link: function($scope, $element, attrs) {
                $scope.searching = false;
                $scope.search = {};
                $scope.advancedSearch = function(search) {
                    $scope.searching = true;
                    return $rootScope.$broadcast("searchUpdated", search);
                };
                $scope.$on("gridzLoadComplete", function() {
                    return $scope.searching = false;
                });
                return $scope.resetSearch = function() {
                    $scope.search = {};
                    return $scope.advancedSearch($scope.search);
                };
            }
        };
    } ]);
    gridz.directive("agSelect2", [ "$rootScope", "$compile", "pathWithContext", function($rootScope, $compile, pathWithContext) {
        return {
            restrict: "E",
            replace: true,
            transclude: true,
            scope: {
                selectOptions: "=",
                ngModel: "="
            },
            compile: function($element, attrs, transclude) {
                var resultTemplate, scope;
                resultTemplate = null;
                scope = $rootScope.$new();
                transclude(scope, function(clone) {
                    var element, _i, _len, _results;
                    _results = [];
                    for (_i = 0, _len = clone.length; _i < _len; _i++) {
                        element = clone[_i];
                        if (element instanceof HTMLElement && element.getAttribute("ag-select2-result") != null) {
                            resultTemplate = element.outerHTML;
                            break;
                        } else {
                            _results.push(void 0);
                        }
                    }
                    return _results;
                });
                return {
                    pre: function($scope, $element, attrs) {
                        var options;
                        options = angular.copy($scope.selectOptions || {});
                        $scope.options = options;
                        options.minimumInputLength || (options.minimumInputLength = 1);
                        options.width || (options.width = "resolve");
                        if (options.ajax == null && attrs.selectAjaxUrl != null) {
                            options.ajax = {
                                url: pathWithContext(attrs.selectAjaxUrl),
                                quietMillis: 500,
                                data: function(term, page) {
                                    return {
                                        q: term,
                                        max: 20,
                                        page: page,
                                        sort: "name",
                                        order: "asc"
                                    };
                                },
                                results: function(result, page) {
                                    var more;
                                    more = page < result.total;
                                    return {
                                        results: result.rows,
                                        more: more
                                    };
                                }
                            };
                        }
                        if (resultTemplate != null) {
                            options.formatResult || (options.formatResult = function(item) {
                                var resultElement;
                                scope = $scope.$new();
                                scope.item = item;
                                resultElement = angular.element(resultTemplate);
                                return $compile(resultElement)(scope);
                            });
                        }
                        options.formatSelection || (options.formatSelection = function(item) {
                            return item.name;
                        });
                        return $element.find("button.open").click(function() {
                            return $element.find("input").select2("open");
                        });
                    }
                };
            },
            template: '<div>\n  <input ui-select2="options" multiple ng-model="ngModel" type="text"/>\n  <button class="btn open" type="button">\n    <i class="icon-search"></i>\n  </button>\n</div>'
        };
    } ]);
}).call(this);