(function() {
    var EditDialog, EditItemCtrl, flatten, gridz, hasSearchFilters;
    gridz = angular.module("angleGrinder.gridz", [ "ui.bootstrap" ]);
    gridz.value("defaultValidationMessages", {
        required: "This field is required",
        mismatch: "Does not match the confirmation",
        minlength: "Too short"
    });
    gridz.directive("agGrid", [ "hasSearchFilters", function(hasSearchFilters) {
        var link;
        link = function($scope, element, attrs) {
            var $grid, gridOptions, invokeEditItemDialogFor;
            $grid = $("#grid", element);
            gridOptions = $scope.$eval(attrs.agGrid);
            $grid.gridz(gridOptions);
            invokeEditItemDialogFor = function(id) {
                return $scope.$apply(function() {
                    return $scope.editDialog(id);
                });
            };
            $grid.on("editAction", function(event, id) {
                event.preventDefault();
                return invokeEditItemDialogFor(id);
            });
            $grid.on("click", "a.editActionLink", function(event) {
                var id;
                event.preventDefault();
                id = $(this).parents("tr:first").attr("id");
                return invokeEditItemDialogFor(id);
            });
            $grid.on("deleteAction", function(event, id) {
                event.preventDefault();
                return $scope.$apply(function() {
                    return $scope.deleteItem(id);
                });
            });
            $scope.$on("itemUpdated", function(event, data) {
                var ind;
                if ($grid.jqGrid("getInd", data.id)) {
                    $grid.jqGrid("setRowData", data.id, data);
                } else {
                    $grid.jqGrid("addRowData", data.id, data, "first");
                }
                ind = $grid[0].rows.namedItem(data.id);
                $(ind).css("background-color", "#DFF0D8");
                return $(ind).delay(100).fadeOut("medium", function() {
                    return $(ind).css("background-color", "");
                }).fadeIn("fast");
            });
            $scope.$on("itemDeleted", function() {
                return $grid.trigger("reloadGrid");
            });
            return $scope.$on("searchUpdated", function(event, filters) {
                var params;
                params = {
                    search: hasSearchFilters(filters),
                    postData: {
                        filters: JSON.stringify(filters)
                    }
                };
                return $grid.setGridParam(params).trigger("reloadGrid");
            });
        };
        return {
            restrict: "A",
            template: '<table id="grid"></table>\n<div id="gridPager"></div>',
            link: link
        };
    } ]);
    gridz.directive("fieldGroup", function() {
        return {
            restrict: "A",
            require: "^form",
            replace: true,
            transclude: true,
            template: '<div class="control-group" ng-transclude></div>',
            link: function($scope, element, attrs, ctrl) {
                var fields, formName, watchExpression;
                formName = ctrl.$name;
                fields = (attrs["for"] || "").split(",");
                watchExpression = function(formName, fields) {
                    var conditions, field, _i, _len;
                    conditions = [];
                    for (_i = 0, _len = fields.length; _i < _len; _i++) {
                        field = fields[_i];
                        conditions.push("(" + formName + "." + field + ".$dirty && " + formName + "." + field + ".$invalid)");
                    }
                    return conditions.join(" || ");
                };
                return $scope.$watch(watchExpression(formName, fields), function() {
                    var $field, allPristine, allValid, field, _i, _len;
                    allPristine = true;
                    allValid = true;
                    for (_i = 0, _len = fields.length; _i < _len; _i++) {
                        field = fields[_i];
                        $field = $scope[formName][field];
                        if ($field != null) {
                            allPristine = allPristine && $field.$pristine;
                            allValid = allValid && $field.$valid;
                        }
                    }
                    if (allPristine) {
                        return;
                    }
                    if (allValid) {
                        return element.removeClass("error");
                    } else {
                        return element.addClass("error");
                    }
                });
            }
        };
    });
    gridz.directive("validationError", [ "defaultValidationMessages", function(defaultValidationMessages) {
        return {
            restrict: "E",
            require: "^form",
            transclude: false,
            link: function($scope, element, attrs, ctrl) {
                var expression, fieldName, formName;
                formName = ctrl.$name;
                fieldName = attrs["for"];
                expression = "" + formName + "." + fieldName + ".$dirty && " + formName + "." + fieldName + ".$invalid";
                return $scope.$watch(expression, function() {
                    var $field, error, html, invalid, message, _ref;
                    $field = $scope[formName][fieldName];
                    html = "";
                    if ($field.$dirty && $field.$invalid) {
                        _ref = $field.$error;
                        for (error in _ref) {
                            invalid = _ref[error];
                            if (invalid) {
                                message = attrs[error] || defaultValidationMessages[error];
                                if (message != null) {
                                    html += '<span class="help-inline">' + message + "</span>";
                                }
                            }
                        }
                    }
                    return element.html(html);
                });
            }
        };
    } ]);
    EditItemCtrl = function() {
        EditItemCtrl.$inject = [ "$scope", "$rootScope", "$log", "dialog", "item", "createNew", "flatten" ];
        function EditItemCtrl($scope, $rootScope, $log, dialog, item, createNew, flatten) {
            $scope.item = item;
            $scope.createNew = createNew;
            $scope.closeEditDialog = function() {
                $log.info("Closing the dialog");
                return dialog.close($scope.item);
            };
            $scope.save = function() {
                if ($scope.editForm.$valid) {
                    $log.info("The form is valid", $scope.editForm);
                    return item.save(function(response) {
                        $log.info("Updating item", item);
                        $rootScope.$broadcast("itemUpdated", flatten(response));
                        return $scope.closeEditDialog();
                    });
                } else {
                    return $log.warn("The form is invalid", $scope.editForm);
                }
            };
        }
        return EditItemCtrl;
    }();
    gridz.controller("EditItemCtrl", EditItemCtrl);
    EditDialog = function() {
        EditDialog.$inject = [ "$dialog" ];
        function EditDialog($dialog) {
            this.$dialog = $dialog;
        }
        EditDialog.prototype.open = function(templateUrl, item) {
            var dialog;
            dialog = this.$dialog.dialog({
                backdropFade: false,
                dialogFade: false,
                resolve: {
                    item: function() {
                        return item;
                    },
                    createNew: function() {
                        return item.id == null;
                    }
                }
            });
            dialog.handledEscapeKey = function(e) {
                if (e.which === 27) {
                    e.preventDefault();
                    if (!dialog.$scope.editForm.$dirty) {
                        dialog.close();
                        return dialog.$scope.$apply();
                    }
                }
            };
            dialog.handleBackDropClick = function(e) {
                e.preventDefault();
                if (!dialog.$scope.editForm.$dirty) {
                    dialog.close();
                    return dialog.$scope.$apply();
                }
            };
            return dialog.open(templateUrl, "EditItemCtrl");
        };
        return EditDialog;
    }();
    gridz.service("editDialog", EditDialog);
    flatten = function(target, opts) {
        var delimiter, getKey, output, step;
        if (opts == null) {
            opts = {
                delimiter: "."
            };
        }
        delimiter = opts.delimiter;
        getKey = function(key, prev) {
            if (prev) {
                return prev + delimiter + key;
            } else {
                return key;
            }
        };
        step = function(object, prev) {
            return Object.keys(object).forEach(function(key) {
                var isarray, isobject, type;
                isarray = opts.safe && Array.isArray(object[key]);
                type = Object.prototype.toString.call(object[key]);
                isobject = type === "[object Object]" || type === "[object Array]";
                if (!isarray && isobject) {
                    return step(object[key], getKey(key, prev));
                }
                return output[getKey(key, prev)] = object[key];
            });
        };
        output = {};
        step(target);
        return output;
    };
    gridz.value("flatten", flatten);
    hasSearchFilters = function(filters) {
        var value, _;
        for (_ in filters) {
            value = filters[_];
            if (value != null && value.trim() !== "") {
                return true;
            }
        }
        return false;
    };
    gridz.value("hasSearchFilters", hasSearchFilters);
    gridz.directive("match", function() {
        return {
            require: "ngModel",
            link: function(scope, elem, attrs, ctrl) {
                var validateEqual;
                validateEqual = function(value, otherValue) {
                    if (value === otherValue) {
                        ctrl.$setValidity("mismatch", true);
                        return value;
                    } else {
                        return ctrl.$setValidity("mismatch", false);
                    }
                };
                scope.$watch(attrs.match, function(otherValue) {
                    return validateEqual(ctrl.$viewValue, otherValue);
                });
                ctrl.$parsers.unshift(function(value) {
                    var otherValue;
                    otherValue = scope.$eval(attrs.match);
                    return validateEqual(value, otherValue);
                });
                return ctrl.$formatters.unshift(function(value) {
                    return validateEqual(value, scope.$eval(attrs.match));
                });
            }
        };
    });
}).call(this);