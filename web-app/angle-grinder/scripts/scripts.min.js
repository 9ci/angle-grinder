(function() {
    var SampleData, dataGenerator;
    dataGenerator = angular.module("angleGrinder.dataGenerator", []);
    dataGenerator.value("random", {
        range: function(min, max) {
            return Math.floor(Math.random() * (max - min) + min);
        },
        date: function(minDate, maxDate) {
            var date, day, max, min, month, randomMilis, year;
            if (maxDate == null) {
                maxDate = new Date();
            }
            min = minDate.getTime();
            max = maxDate.getTime();
            randomMilis = this.range(min, max);
            date = new Date(randomMilis);
            year = date.getFullYear();
            month = ("0" + (date.getUTCMonth() + 1)).slice(-2);
            day = ("0" + date.getUTCDate()).slice(-2);
            return "" + year + "-" + month + "-" + day;
        }
    });
    SampleData = function() {
        SampleData.$inject = [ "random" ];
        function SampleData(random) {
            this.random = random;
        }
        SampleData.prototype.generate = function(count) {
            var id, rows, _i;
            if (count == null) {
                count = 50;
            }
            rows = [];
            for (id = _i = 1; 1 <= count ? _i <= count : _i >= count; id = 1 <= count ? ++_i : --_i) {
                rows.push({
                    id: id,
                    invoiceDate: this.random.date(new Date(2001, 1, 1)),
                    tranDate: this.random.date(new Date(2001, 1, 1)),
                    customer: {
                        name: "Test Customer " + id
                    },
                    name: "Test Item " + id,
                    description: "Test Description " + id,
                    note: "Note number " + id,
                    amount: this.random.range(20, 200) / 10,
                    tax: this.random.range(10, 100) / 10,
                    total: this.random.range(100, 1e3) / 10,
                    complete: Math.random() > .5
                });
            }
            return rows;
        };
        return SampleData;
    }();
    dataGenerator.factory("sampleData", [ "random", function(random) {
        return new SampleData(random);
    } ]);
}).call(this);

(function() {
    var resources;
    resources = angular.module("angleGrinder.resources", [ "ngResource" ]);
    resources.factory("Users", [ "$resource", function($resource) {
        var Users;
        Users = $resource("/api/users/:id", {
            id: "@id"
        }, {
            get: {
                method: "GET"
            },
            save: {
                method: "POST"
            },
            update: {
                method: "PUT"
            },
            "delete": {
                method: "DELETE"
            }
        });
        angular.extend(Users.prototype, {
            persisted: function() {
                return this.id != null;
            },
            save: function(options) {
                var method;
                method = !this.persisted() ? "save" : "update";
                return Users[method]({}, this, options.success, options.error);
            },
            "delete": function(options) {
                return Users["delete"]({}, this, options.success, options.error);
            }
        });
        return Users;
    } ]);
}).call(this);

angular.module("angleGrinder.templates", []).run([ "$templateCache", function($templateCache) {
    $templateCache.put("templates/ag_grid_directive.html", '<section class="anchor">\n' + "  <h2>Angular directive example</h2>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li><span class="icon-selected-pointer"> </span></li>\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" stlye="padding-left:5px">\n' + '            Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href="#"><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href="#"><i class="icon-external-link"></i> Export</a></li>\n' + '            <li><a href="#"><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + "        <li>\n" + '          <a href="" class="create-button" ng-click="createDialog()">\n' + '            <i class="icon-edit"></i>New\n' + "          </a>\n" + "        </li>\n" + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + '        <li><a href="#" title="search screen"><i class="icon-search"></i></a></li>\n' + '        <li class="divider-vertical skinny"></li>\n' + '        <li class="dropdown grid-options">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#"><i class="icon-cog"></i><b\n' + '              class="caret"></b></i></a>\n' + '          <ul class="dropdown-menu">\n' + '            <li><a href="#">Columns</a></li>\n' + '            <li><a href="#">Another action</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href="#">Separated link</a></li>\n' + "          </ul>\n" + "        </li>\n" + "      </ul>\n" + '      <form action="" class="navbar-search pull-right">\n' + '        <input type="text" value="" placeholder="Search" class="search-query span2"\n' + '               style="width: 150px;"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div ag-grid="gridOptions"></div>\n' + "</section>\n");
    $templateCache.put("templates/alerts.html", '<aside id="alerts">\n' + '  <div ng-repeat="message in alertMessages" class="alert alert-{{message.type}}">\n' + '    <button ng-click="disposeAlert(message.id)" type="button" class="close">Ã—</button>\n' + "    <strong>{{message.type}}</strong> <span>{{message.text}}</span>\n" + "  </div>\n" + "</aside>\n");
    $templateCache.put("templates/gridz_with_toolbar.html", '<section class="anchor">\n' + "  <h2>Gridz with toolbar</h2>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li><span class="icon-selected-pointer"> </span></li>\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" stlye="padding-left:5px">\n' + '            Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href="#"><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href="#"><i class="icon-external-link"></i> Export</a></li>\n' + '            <li><a href="#"><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + '        <li><a href="#"><i class="icon-edit"></i> New</a></a></li>\n' + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + '        <li><a href="#" title="search screen"><i class="icon-search"></i></a></li>\n' + '        <li class="divider-vertical skinny"></li>\n' + '        <li class="dropdown grid-options">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#"><i class="icon-cog"></i><b\n' + '              class="caret"></b></i></a>\n' + '          <ul class="dropdown-menu">\n' + '            <li><a href="#">Columns</a></li>\n' + '            <li><a href="#">Another action</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href="#">Separated link</a></li>\n' + "          </ul>\n" + "        </li>\n" + "      </ul>\n" + '      <form action="" class="navbar-search pull-right">\n' + '        <input type="text" value="" placeholder="Search" class="search-query span2"\n' + '               style="width: 150px;"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <table id="demoGrid"></table>\n' + '  <div id="gridPager"></div>\n' + "</section>\n");
    $templateCache.put("templates/jqgrid_basic.html", '<section class="anchor">\n' + "  <h2>jqGrid basic</h2>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li><span class="icon-selected-pointer"> </span></li>\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" stlye="padding-left:5px">\n' + '            <i class="icon-cog"></i> Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href="#"><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href="#"><i class="icon-external-link"></i> Export</a></li>\n' + '            <li><a href="#"><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + '        <li><a href="#"><i class="icon-edit"></i> New</a></a></li>\n' + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + '        <li><a href="#" title="search screen"><i class="icon-search"></i></a></li>\n' + '        <li class="divider-vertical skinny"></li>\n' + '        <li class="dropdown grid-options">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#"><i class="icon-cogs"></i></a>\n' + '          <ul class="dropdown-menu">\n' + '            <li><a href="#">Columns</a></li>\n' + '            <li><a href="#">Another action</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href="#">Separated link</a></li>\n' + "          </ul>\n" + "        </li>\n" + "      </ul>\n" + '      <form action="" class="navbar-search pull-right">\n' + '        <input type="text" value="" placeholder="Search" class="search-query span2"\n' + '               style="width: 150px;"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <table id="demoGrid"></table>\n' + '  <div id="gridPager"></div>\n' + "</section>\n");
    $templateCache.put("templates/partials/item_form.html", '<div class="modal-header">\n' + '  <button type="button" class="close" ng-click="closeEditDialog()" aria-hidden="true">&times;</button>\n' + "\n" + '  <h3 ng-show="createNew">Create New Item</h3>\n' + '  <h3 ng-hide="createNew">Edit Item {{item.customer.name}}</h3>\n' + "</div>\n" + "\n" + '<div class="modal-body">\n' + '  <form name="editForm" class="form-horizontal no-margin" ng-submit="save(item)">\n' + "\n" + '    <div field-group for="customerName">\n' + '      <label class="control-label">Customer Name</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="customerName" placeholder="Enter Customer Name"\n' + '               ng-model="item.customer.name" autofocus required />\n' + '        <validation-error for="customerName" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="control-group">\n' + '      <label class="control-label">Date</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="date" placeholder="Enter Date"\n' + '               ng-model="item.invoiceDate" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="control-group">\n' + '      <label class="control-label">Note</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="note" placeholder="Enter Note"\n' + '               ng-model="item.note" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div field-group for="password,passwordConfirmation">\n' + '      <label class="control-label">Password</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="password" name="password" placeholder="Enter Password"\n' + '               ng-model="item.password" autofocus required ng-minlength="6" />\n' + '        <validation-error for="password"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters." />\n' + "      </div>\n" + "\n" + '      <div class="controls">\n' + '        <input type="password" name="passwordConfirmation" placeholder="Enter Password Confirmation"\n' + '               ng-model="item.passwordConfirmation" autofocus\n' + '               required match="item.password" />\n' + '        <validation-error for="passwordConfirmation"\n' + '                          required="This field is required"\n' + '                          mismatch="The password does not match the confirmation" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="modal-footer">\n' + '      <span ng-hide="createNew">\n' + '        <delete-button when-confirmed="delete(item)"></delete-button>\n' + "      </span>\n" + "\n" + '      <cancel-button ng-click="closeEditDialog()"></cancel-button>\n' + "      <submit-button></submit-button>\n" + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/partials/user_form.html", '<div class="modal-header">\n' + '  <button type="button" class="close" ng-click="closeEditDialog()" aria-hidden="true">&times;</button>\n' + "\n" + '  <h3 ng-show="createNew">Create New User</h3>\n' + '  <h3 ng-hide="createNew">Edit User {{item.name}}</h3>\n' + "</div>\n" + "\n" + '<div class="modal-body">\n' + '  <form name="editForm" class="form-horizontal no-margin" novalidate ng-submit="save(item)">\n' + "\n" + '    <div field-group for="name">\n' + '      <label class="control-label">Name</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="name" placeholder="Enter Name"\n' + '               ng-model="item.name" autofocus required />\n' + '        <validation-error for="name" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div field-group for="allowance">\n' + '      <label class="control-label">Allowance</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="allowance" placeholder="Enter Allowance"\n' + '               ng-model="item.allowance" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div field-group for="birthday">\n' + '      <label class="control-label">Birthday</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="birthday" placeholder="Birthday"\n' + '               ng-model="item.birthday" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="modal-footer">\n' + '      <span ng-hide="createNew">\n' + '        <delete-button when-confirmed="delete(item)"></delete-button>\n' + "      </span>\n" + "\n" + '      <cancel-button ng-click="closeEditDialog()"></cancel-button>\n' + "      <submit-button></submit-button>\n" + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/server_side.html", '<section class="anchor">\n' + "  <h2>Server side ag-grid example</h2>\n" + "\n" + '  <div ng-controller="SearchFormCtrl" collapse="!showSearchForm"\n' + "       ng-include src=\"'/_search.html'\"></div>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li><span class="icon-selected-pointer"> </span></li>\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" stlye="padding-left:5px">\n' + '            Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href="#"><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href="#"><i class="icon-external-link"></i> Export</a></li>\n' + '            <li><a href="#"><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + "        <li>\n" + '          <a href="" class="create-button" ng-click="createDialog()">\n' + '            <i class="icon-edit"></i>New\n' + "          </a>\n" + "        </li>\n" + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + "        <li>\n" + '          <a href="" title="search screen"\n' + '             ng-click="showSearchForm = !showSearchForm"><i class="icon-search"></i></a>\n' + "        </li>\n" + "      </ul>\n" + "\n" + '      <form action="" class="navbar-search pull-right" ng-submit="quickSearch(search)">\n' + '        <input type="text" value="" placeholder="quick search" class="search-query span2" style="width: 150px;"\n' + '               ng-model="search.quickSearch"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div ag-grid="gridOptions"></div>\n' + "</section>\n");
    $templateCache.put("templates/simple_gridz.html", '<section class="anchor">\n' + "  <h2>Simple gridz</h2>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li><span class="icon-selected-pointer"> </span></li>\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" stlye="padding-left:5px">\n' + '            Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href="#"><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href="#"><i class="icon-external-link"></i> Export</a></li>\n' + '            <li><a href="#"><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + '        <li><a href="#"><i class="icon-edit"></i> New</a></a></li>\n' + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + '        <li><a href="#" title="search screen"><i class="icon-search"></i></a></li>\n' + '        <li class="divider-vertical skinny"></li>\n' + '        <li class="dropdown grid-options">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#"><i class="icon-cog"></i><b\n' + '              class="caret"></b></i></a>\n' + '          <ul class="dropdown-menu">\n' + '            <li><a href="#">Columns</a></li>\n' + '            <li><a href="#">Another action</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href="#">Separated link</a></li>\n' + "          </ul>\n" + "        </li>\n" + "      </ul>\n" + '      <form action="" class="navbar-search pull-right">\n' + '        <input type="text" value="" placeholder="Search" class="search-query span2"\n' + '               style="width: 150px;"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <table id="demoGrid"></table>\n' + '  <div id="gridPager"></div>\n' + "</section>");
    $templateCache.put("templates/simple_jqgrid.html", '<section class="anchor">\n' + "  <h2>Simple jqgrid</h2>\n" + "\n" + '  <div class="row-fluid">\n' + '    <div class="span9">\n' + '      <table id="demoGrid"></table>\n' + '      <div id="gridPager"></div>\n' + "    </div>\n" + "  </div>\n" + "</section>\n");
} ]);

(function() {
    var app;
    $(function() {
        return $("#topbar").load("/_navbar_top.html");
    });
    app = angular.module("angleGrinder", [ "angleGrinder.templates", "angleGrinder.gridz", "angleGrinder.forms", "angleGrinder.alerts", "angleGrinder.dataGenerator", "angleGrinder.resources" ]);
    app.config([ "$provide", "$routeProvider", "$httpProvider", function($provide, $routeProvider, $httpProvider) {
        $httpProvider.responseInterceptors.push("httpErrorsInterceptor");
        return $routeProvider.when("/", {
            templateUrl: "templates/gridz_with_toolbar.html",
            controller: "GridzWithToolbarCtrl"
        }).when("/simple_jqgrid", {
            templateUrl: "templates/simple_jqgrid.html",
            controller: "SimpleJqGridCtrl"
        }).when("/simple_gridz", {
            templateUrl: "templates/simple_gridz.html",
            controller: "SimpleGridzCtrl"
        }).when("/jqgrid_basic", {
            templateUrl: "templates/jqgrid_basic.html",
            controller: "JqGridBasicCtrl"
        }).when("/ag_grid_directive", {
            templateUrl: "templates/ag_grid_directive.html",
            controller: "AgGridDirectiveCtrl"
        }).when("/server_side", {
            templateUrl: "templates/server_side.html",
            controller: "ServerSideCtrl"
        }).otherwise({
            redirectTo: "/"
        });
    } ]);
    app.factory("httpErrorsInterceptor", [ "$injector", "$q", "alerts", function($injector, $q, alerts) {
        return function(promise) {
            var $http, onError;
            $http = $injector.get("$http");
            onError = function(response) {
                var errorMessage, _ref;
                errorMessage = ((_ref = response.data) != null ? _ref.error : void 0) || "Unexpected HTTP error";
                alerts.error(errorMessage);
                return $q.reject(response);
            };
            return promise.then(null, onError);
        };
    } ]);
}).call(this);

(function() {
    var AgGridDirectiveCtrl;
    AgGridDirectiveCtrl = function() {
        AgGridDirectiveCtrl.$inject = [ "$scope", "sampleData", "editDialog" ];
        function AgGridDirectiveCtrl($scope, sampleData, editDialog) {
            var _this = this;
            this.data = sampleData.generate(100);
            $scope.data = this.data;
            $scope.gridOptions = {
                data: this.data,
                datatype: "local",
                colModel: this.gridColumns(),
                sortname: "id"
            };
            $scope.editDialog = function(id) {
                var item, self;
                item = _this.findItemById(id);
                item.save = function(callback) {
                    return callback.success(this);
                };
                self = _this;
                item["delete"] = function(callback) {
                    self.deleteItemById(id);
                    return callback.success(this);
                };
                return editDialog.open("templates/partials/item_form.html", item);
            };
            $scope.createDialog = function() {
                var item;
                item = {};
                item.save = function(callback) {
                    var generateId;
                    generateId = function() {
                        return new Date().getTime();
                    };
                    item.id = generateId();
                    return callback.success(this);
                };
                return editDialog.open("templates/partials/item_form.html", item).then(function(item) {
                    return _this.data.push(item);
                });
            };
            $scope.deleteItem = function(id) {
                var item;
                item = _this.deleteItemById(id);
                return $scope.$broadcast("itemDeleted", item);
            };
        }
        AgGridDirectiveCtrl.prototype.findItemById = function(id) {
            id = parseInt(id);
            return _.find(this.data, function(row) {
                return row.id === id;
            });
        };
        AgGridDirectiveCtrl.prototype.deleteItemById = function(id) {
            var row;
            row = this.findItemById(id);
            if (row != null) {
                this.data = _.reject(this.data, function(item) {
                    return item.id === row.id;
                });
                return row;
            }
        };
        AgGridDirectiveCtrl.prototype.gridColumns = function() {
            return [ {
                name: "id",
                label: "Inv No",
                width: 60,
                sorttype: "int"
            }, {
                name: "customer.name",
                label: "Customer",
                formatter: "editActionLink"
            }, {
                name: "invoiceDate",
                label: "Date"
            }, {
                name: "note",
                label: "Note"
            }, {
                name: "complete",
                label: "Complete"
            } ];
        };
        return AgGridDirectiveCtrl;
    }();
    angular.module("angleGrinder").controller("AgGridDirectiveCtrl", AgGridDirectiveCtrl);
}).call(this);

(function() {
    var GridzWithToolbarCtrl;
    GridzWithToolbarCtrl = function() {
        GridzWithToolbarCtrl.$inject = [ "sampleData" ];
        function GridzWithToolbarCtrl(sampleData) {
            var $grid;
            $grid = $("#demoGrid");
            $grid.gridz({
                data: sampleData.generate(100),
                datatype: "local",
                colModel: this.gridColumns()
            });
            $grid.data("gridz");
            $grid.on("editAction", function(e, rowId, gridObject) {
                return $grid.jqGrid("editGridRow", rowId, {
                    reloadAfterSubmit: false
                });
            });
        }
        GridzWithToolbarCtrl.prototype.custFormatter = function(cellValue, colOptions, rowObject) {
            return '<a class="" title="" data-toggle="popover" href="#" >' + cellValue + '&nbsp;&nbsp;</a><i class="icon-zoom-in" style="font-size:11px;color:#777"></i>';
        };
        GridzWithToolbarCtrl.prototype.gridColumns = function() {
            return [ {
                name: "id",
                label: "Inv No",
                key: true,
                width: 60,
                align: "right",
                sorttype: "int",
                search: true
            }, {
                name: "customer.name",
                label: "Customer",
                width: 250,
                formatter: this.custFormatter
            }, {
                name: "tranDate",
                label: "Date",
                editable: true,
                width: 90,
                sorttype: "date",
                formatter: "date"
            }, {
                name: "description",
                width: 150
            }, {
                name: "amount",
                width: 80,
                align: "right",
                sorttype: "float",
                formatter: "number"
            }, {
                name: "tax",
                width: 80,
                align: "right",
                sorttype: "float"
            }, {
                name: "total",
                width: 80,
                align: "right",
                sorttype: "float"
            }, {
                name: "note",
                width: 250,
                sortable: false,
                hidden: true
            } ];
        };
        return GridzWithToolbarCtrl;
    }();
    angular.module("angleGrinder").controller("GridzWithToolbarCtrl", GridzWithToolbarCtrl);
}).call(this);

(function() {
    var JqGridBasicCtrl;
    JqGridBasicCtrl = function() {
        JqGridBasicCtrl.$inject = [ "sampleData" ];
        function JqGridBasicCtrl(sampleData) {
            var $grid, editColFormatter, gboxId, setupActionClickOver;
            setupActionClickOver = function() {
                var actionMenu;
                actionMenu = '<ul class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu" style="display: block;position: relative;min-width:100px">                               <li><a tabindex="-1" href="#" class="row_action_show" data-dismiss="clickover"><i class="icon-eye-open"></i> show</a></li>                               <li><a tabindex="-1" href="#" class="row_action_edit" data-dismiss="clickover"><i class="icon-edit"></i> edit</a></li>                               <li><a tabindex="-1" href="#" class="row_action_delete" data-dismiss="clickover"><i class="icon-trash"></i> delete</a></li>                           </ul>';
                return $(".jqg-row-action").clickover({
                    html: true,
                    content: actionMenu,
                    template: '<div class="popover row-action-popover"><div class="arrow"></div><div class="popover-content dropdown clearfix" style="padding:0;"></div></div>',
                    onShown: function() {
                        assignActionRowId(this);
                        return addActionPopupListeners(this);
                    }
                });
            };
            $grid = $("#demoGrid");
            gboxId = "gbox_" + $grid.attr("id");
            $grid.jqGrid({
                data: sampleData.generate(100),
                datatype: "local",
                rowNum: 10,
                rowList: [ 10, 20, 30 ],
                colModel: this.gridColumns(),
                pager: "#gridPager",
                viewrecords: true,
                hidegrid: false,
                altRows: true,
                shrinkToFit: false,
                autowidth: true,
                height: "100%",
                sortable: true,
                multiselect: true,
                gridComplete: function() {
                    return setupActionClickOver();
                }
            });
            $(window).on("resize", function(event, ui) {
                var curWidth, parWidth, w;
                parWidth = $("#" + gboxId).parent().width();
                curWidth = $("#" + gboxId).width();
                w = parWidth - 1;
                if (Math.abs(w - curWidth) > 2) {
                    return $grid.setGridWidth(w);
                }
            }).trigger("resize");
            editColFormatter = function(cellvalue, options, rowObject) {
                return '<a class="jqg-row-action" title="" data-toggle="popover" href="#" data-container="#' + gboxId + '"><i class="icon-cog"></i></a>';
            };
        }
        JqGridBasicCtrl.prototype.gridColumns = function() {
            return [ {
                name: "edit_actions",
                label: " ",
                width: 20,
                sortable: false,
                search: false,
                hidedlg: true,
                formatter: this.editColFormatter
            }, {
                name: "id",
                index: "id",
                label: "Inv No",
                key: true,
                width: 60,
                sorttype: "int",
                search: true
            }, {
                name: "invoiceDate",
                index: "invoiceDate",
                editable: true,
                label: "Date",
                width: 90,
                sorttype: "date",
                formatter: "date"
            }, {
                name: "name",
                index: "name",
                width: 200
            }, {
                name: "amount",
                index: "amount",
                width: 80,
                align: "right",
                sorttype: "float",
                formatter: "number"
            }, {
                name: "tax",
                index: "tax",
                width: 80,
                align: "right",
                sorttype: "float"
            }, {
                name: "total",
                index: "total",
                width: 80,
                align: "right",
                sorttype: "float"
            }, {
                name: "note",
                index: "note",
                width: 250,
                sortable: false,
                hidden: true
            } ];
        };
        return JqGridBasicCtrl;
    }();
    angular.module("angleGrinder").controller("JqGridBasicCtrl", JqGridBasicCtrl);
}).call(this);

(function() {
    var SearchFormCtrl;
    SearchFormCtrl = function() {
        SearchFormCtrl.$inject = [ "$scope", "$rootScope" ];
        function SearchFormCtrl($scope, $rootScope) {
            $scope.search = {};
            $scope.advancedSearch = function(search) {
                return $rootScope.$broadcast("searchUpdated", search);
            };
            $scope.reset = function() {
                return $scope.search = {};
            };
        }
        return SearchFormCtrl;
    }();
    angular.module("angleGrinder").controller("SearchFormCtrl", SearchFormCtrl);
}).call(this);

(function() {
    var ServerSideCtrl;
    ServerSideCtrl = function() {
        ServerSideCtrl.$inject = [ "$scope", "$log", "$dialog", "confirmationDialog", "editDialog", "Users" ];
        function ServerSideCtrl($scope, $log, $dialog, confirmationDialog, editDialog, Users) {
            $scope.gridOptions = {
                url: "/api/users",
                colModel: this.gridColumns(),
                rowNum: 10,
                sortname: "id"
            };
            $scope.editDialog = function(id) {
                return Users.get({
                    id: id
                }, function(user) {
                    return editDialog.open("templates/partials/user_form.html", user);
                });
            };
            $scope.createDialog = function() {
                var user;
                user = new Users();
                return editDialog.open("templates/partials/user_form.html", user);
            };
            $scope.deleteItem = function(id) {
                return confirmationDialog.open().then(function(confirmed) {
                    var user;
                    if (!confirmed) {
                        return;
                    }
                    user = new Users({
                        id: id
                    });
                    return user["delete"]({
                        success: function(response) {
                            return $scope.$broadcast("itemDeleted", response);
                        },
                        error: function(response) {
                            return $log.error("Something went wront", response);
                        }
                    });
                });
            };
            $scope.quickSearch = function(search) {
                return $scope.$broadcast("searchUpdated", search);
            };
        }
        ServerSideCtrl.prototype.gridColumns = function() {
            return [ {
                name: "id",
                width: 50,
                formatter: "editActionLink"
            }, {
                name: "name",
                label: "Name",
                formatter: "editActionLink"
            }, {
                name: "allowance",
                label: "Allowance"
            }, {
                name: "birthday",
                label: "Birthday"
            }, {
                name: "paid",
                label: "Paid"
            } ];
        };
        return ServerSideCtrl;
    }();
    angular.module("angleGrinder").controller("ServerSideCtrl", ServerSideCtrl);
}).call(this);

(function() {
    var SimpleGridzCtrl;
    SimpleGridzCtrl = function() {
        SimpleGridzCtrl.$inject = [ "sampleData" ];
        function SimpleGridzCtrl(sampleData) {
            var $grid, gridz;
            $grid = $("#demoGrid");
            $grid.gridz({
                data: sampleData.generate(200),
                datatype: "local",
                colModel: this.gridColumns()
            });
            gridz = $grid.data("gridz");
            $grid.on("editAction", function(e, rowId, gridObject) {
                return $grid.jqGrid("editGridRow", rowId, {
                    reloadAfterSubmit: false
                });
            });
        }
        SimpleGridzCtrl.prototype.custFormatter = function(cellValue, colOptions, rowObject) {
            return '<a class="" title="" data-toggle="popover" href="#" >' + cellValue + '&nbsp;&nbsp;</a><i class="icon-zoom-in" style="font-size:11px;color:#777"></i>';
        };
        SimpleGridzCtrl.prototype.gridColumns = function() {
            return [ {
                name: "id",
                label: "Inv No",
                key: true,
                width: 60,
                align: "right",
                sorttype: "int",
                search: true
            }, {
                name: "customer.name",
                label: "Customer",
                width: 250,
                formatter: this.custFormatter
            }, {
                name: "tranDate",
                label: "Date",
                editable: true,
                width: 90,
                sorttype: "date",
                formatter: "date"
            }, {
                name: "description",
                width: 150
            }, {
                name: "amount",
                width: 80,
                align: "right",
                sorttype: "float",
                formatter: "number"
            }, {
                name: "tax",
                width: 80,
                align: "right",
                sorttype: "float"
            }, {
                name: "total",
                width: 80,
                align: "right",
                sorttype: "float"
            }, {
                name: "note",
                width: 250,
                sortable: false,
                hidden: true
            } ];
        };
        return SimpleGridzCtrl;
    }();
    angular.module("angleGrinder").controller("SimpleGridzCtrl", SimpleGridzCtrl);
}).call(this);

(function() {
    var SimpleJqGridCtrl;
    SimpleJqGridCtrl = function() {
        SimpleJqGridCtrl.$inject = [ "sampleData" ];
        function SimpleJqGridCtrl(sampleData) {
            var $grid;
            $grid = $("#demoGrid");
            $grid.jqGrid({
                data: sampleData.generate(200),
                datatype: "local",
                rowNum: 10,
                rowList: [ 10, 20, 30 ],
                colModel: this.gridColumns(),
                pager: "#gridPager",
                viewrecords: true,
                hidegrid: false,
                altRows: true,
                shrinkToFit: false,
                autowidth: true,
                height: "100%",
                sortable: true,
                multiselect: true
            });
        }
        SimpleJqGridCtrl.prototype.gridColumns = function() {
            return [ {
                name: "id",
                index: "id",
                label: "Inv No",
                key: true,
                width: 60,
                sorttype: "int",
                search: true
            }, {
                name: "name",
                index: "name",
                label: "Inv No",
                width: 200,
                editable: true
            }, {
                name: "invoiceDate",
                index: "invoiceDate",
                label: "Date",
                editable: true,
                width: 90,
                sorttype: "date",
                formatter: "date",
                editoptions: {
                    dataInit: function(el) {
                        return $(el).datepicker();
                    }
                }
            }, {
                name: "amount",
                index: "amount",
                width: 80,
                align: "right",
                sorttype: "float",
                formatter: "number",
                editable: true
            }, {
                name: "tax",
                index: "tax",
                width: 80,
                align: "right",
                sorttype: "float"
            }, {
                name: "total",
                index: "total",
                width: 80,
                align: "right",
                sorttype: "float"
            }, {
                name: "note",
                index: "note",
                width: 250,
                sortable: false,
                editable: true
            } ];
        };
        return SimpleJqGridCtrl;
    }();
    angular.module("angleGrinder").controller("SimpleJqGridCtrl", SimpleJqGridCtrl);
}).call(this);