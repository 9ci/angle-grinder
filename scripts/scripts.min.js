(function() {
    var resources;
    resources = angular.module("angleGrinder.resources", [ "ngResource", "ngRoute" ]);
    resources.factory("Users", [ "$resource", function($resource) {
        var Users;
        Users = $resource("/api/users/:id/:action", {
            id: "@id"
        }, {
            get: {
                method: "GET"
            },
            massUpdate: {
                method: "PUT",
                params: {
                    action: "massUpdate"
                }
            },
            save: {
                method: "POST"
            },
            update: {
                method: "PUT"
            },
            "delete": {
                method: "DELETE"
            }
        });
        angular.extend(Users.prototype, {
            resourceName: function() {
                return "user";
            },
            persisted: function() {
                return this.id != null;
            },
            newRecord: function() {
                return !this.persisted();
            },
            save: function(options) {
                var method;
                method = !this.persisted() ? "save" : "update";
                return Users[method]({}, this, options.success, options.error);
            },
            "delete": function(options) {
                return Users["delete"]({}, this, options.success, options.error);
            }
        });
        return Users;
    } ]);
    resources.factory("userResolver", [ "$q", "$route", "Users", function($q, $route, Users) {
        return function(id) {
            var deferred, onError, onSuccess;
            deferred = $q.defer();
            onSuccess = function(user) {
                return deferred.resolve(user);
            };
            onError = function() {
                return deferred.reject();
            };
            Users.get({
                id: id
            }, onSuccess, onError);
            return deferred.promise;
        };
    } ]);
}).call(this);

(function() {
    var docs;
    docs = angular.module("angleGrinder.docs", []);
    docs.directive("prettyprint", function() {
        return {
            restrict: "C",
            terminal: true,
            compile: function(element) {
                var code, extractLang, lang;
                extractLang = function() {
                    var className, classes, lang, _i, _len, _ref;
                    classes = element[0].className;
                    lang = "coffee";
                    if (classes.indexOf("lang-") !== -1) {
                        _ref = classes.split(" ");
                        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                            className = _ref[_i];
                            if (className.indexOf("lang-") !== -1) {
                                lang = className.split("-")[1];
                                break;
                            }
                        }
                    }
                    return lang;
                };
                lang = extractLang();
                code = element.html();
                return element.html(window.prettyPrintOne(code, lang, true));
            }
        };
    });
    docs.factory("scrollTo", [ "$routeParams", "$timeout", function($routeParams, $timeout) {
        return function(id) {
            var scroll;
            scroll = function() {
                var element;
                element = document.getElementById(id);
                if (element != null) {
                    return element.scrollIntoView();
                }
            };
            return $timeout(scroll, 10);
        };
    } ]);
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder", [ "ngRoute", "angleGrinder.resources", "angleGrinder.docs", "angleGrinder.common", "angleGrinder.gridz", "angleGrinder.forms", "angleGrinder.alerts", "angleGrinder.dataGenerator", "angleGrinder.spinner" ]);
    app.config([ "pathWithContextProvider", function(pathWithContextProvider) {
        var contextPath;
        contextPath = $("body").data("context-path");
        if (contextPath != null) {
            return pathWithContextProvider.setContextPath(contextPath);
        }
    } ]);
    app.factory("httpErrorsInterceptor", [ "$injector", "$q", "alerts", function($injector, $q, alerts) {
        return function(promise) {
            var $http, onError;
            $http = $injector.get("$http");
            onError = function(response) {
                var errorMessage, _ref;
                errorMessage = ((_ref = response.data) != null ? _ref.error : void 0) || "Unexpected HTTP error";
                if (response.status !== 422) {
                    alerts.error(errorMessage);
                }
                return $q.reject(response);
            };
            return promise.then(null, onError);
        };
    } ]);
    app.run([ "$log", "alerts", function($log, alerts) {
        return $(document).ajaxError(function(event, jqxhr, settings, exception) {
            $log.error("Network error:", event, jqxhr, settings, exception);
            return alerts.error(exception);
        });
    } ]);
    $(function() {
        return setTimeout(function() {
            var $sidenav;
            $sidenav = $(".bs-docs-sidenav");
            if ($sidenav.affix == null) {
                return;
            }
            return $sidenav.affix({
                offset: {
                    top: function() {
                        if ($(window).width() <= 980) {
                            return 140;
                        } else {
                            return 160;
                        }
                    },
                    bottom: 270
                }
            });
        }, 100);
    });
}).call(this);

(function() {
    var app;
    app = angular.module("angleGrinder");
    app.config([ "$provide", "$routeProvider", "$httpProvider", function($provide, $routeProvider, $httpProvider) {
        $httpProvider.responseInterceptors.push("httpErrorsInterceptor");
        return $routeProvider.when("/", {
            templateUrl: "templates/angleGrinder.html"
        }).when("/documentation", {
            templateUrl: "templates/documentation.html"
        }).when("/examples", {
            redirectTo: "/examples/gridExample"
        }).when("/examples/gridExample", {
            templateUrl: "templates/gridExample/index.html",
            controller: "gridExample.ListCtrl"
        }).when("/examples/usersDialog", {
            templateUrl: "templates/usersDialog/index.html",
            controller: "usersDialog.ListCtrl"
        }).when("/examples/users", {
            templateUrl: "templates/users/list.html",
            controller: "users.ListCtrl"
        }).when("/examples/users/create", {
            templateUrl: "templates/users/form.html",
            controller: "users.FormCtrl",
            resolve: {
                user: [ "Users", function(Users) {
                    return new Users();
                } ]
            }
        }).when("/examples/users/:id", {
            templateUrl: "templates/users/show.html",
            controller: "users.ShowCtrl",
            resolve: {
                user: [ "$route", "userResolver", function($route, userResolver) {
                    return userResolver($route.current.params.id);
                } ]
            }
        }).when("/examples/users/:id/edit", {
            templateUrl: "templates/users/form.html",
            controller: "users.FormCtrl",
            resolve: {
                user: [ "$route", "userResolver", function($route, userResolver) {
                    return userResolver($route.current.params.id);
                } ]
            }
        }).otherwise({
            redirectTo: "/"
        });
    } ]);
}).call(this);

angular.module("angleGrinder").run([ "$templateCache", function($templateCache) {
    $templateCache.put("templates/angleGrinder.html", '<div class="bs-docs-section">\n' + "\n" + '<div class="page-header">\n' + '  <h1 id="develop">Develop AngleGrinder</h1>\n' + "</div>\n" + '<p class="lead">There are a few easy ways to quickly get started with AngleGrinder</p>\n' + "\n" + '<h3 id="develop-checkout">Checkout from GitHub repository</h3>\n' + "\n" + '<pre class="prettyprint lang-sh">\n' + "git checkout https://github.com/9ci/angle-grinder.git\n" + "</pre>\n" + "\n" + '<h3 id="develop-install-nodejs">Install the latest nodejs version</h3>\n' + "\n" + '<pre class="prettyprint lang-sh">\n' + "sudo apt-get install build-essential openssl libssl-dev pkg-config\n" + "\n" + "wget http://nodejs.org/dist/v0.10.12/node-v0.10.12.tar.gz\n" + "tar -xzf node-v0.10.12.tar.gz\n" + "\n" + "cd node-v0.10.12\n" + "./configure\n" + "make\n" + "sudo make instal\n" + "</pre>\n" + "\n" + '<h3 id="develop-install-libraries">Install required tools and libraries</h3>\n' + "\n" + 'Install <a href="https://npmjs.org/">npm</a> packages for\n' + '<span class="label label-info">coffee-script</span>,\n' + '<span class="label label-info">grunt-cli</span>,\n' + '<span class="label label-info">bower</span> and\n' + '<span class="label label-info">karma</span>\n' + "\n" + "<br/>\n" + "\n" + '<pre class="prettyprint lang-sh">\n' + "npm install -g coffee-script\n" + "npm install -g grunt-cli\n" + "npm install -g bower\n" + "npm install -g karma\n" + "</pre>\n" + "\n" + "Install npm and bower components\n" + "<br/>\n" + "\n" + '<pre class="prettyprint lang-sh">\n' + "npm install\n" + "bower install\n" + "</pre>\n" + "\n" + 'Install <span class="label label-info">foreman</span> ruby gem\n' + "<br/>\n" + "\n" + '<pre class="prettyprint lang-sh">\n' + "gem install foreman\n" + "</pre>\n" + "\n" + '<h3 id="develop-install-phantomjs">Install PhantomsJS and CasperJS for integration testing</h3>\n' + "\n" + "<h4>Download and install PhantomJS</h4>\n" + "\n" + '<pre class="prettyprint lang-sh">\n' + "wget https://phantomjs.googlecode.com/files/phantomjs-1.9.1-linux-x86_64.tar.bz2\n" + "tar xvjf phantomjs-1.9.1-linux-x86_64.tar.bz2\n" + "cd tar xvjf phantomjs-1.9.1-linux-x86_64\n" + "ln -sf `pwd`/bin/phantomjs /usr/local/bin/phantomjs\n" + "</pre>\n" + "\n" + "Detailed instructions about PhantomJS installation:\n" + '<a href="http://phantomjs.org/build.html">http://phantomjs.org/build.html</a>\n' + "\n" + "<h4>Checkout and install CasperJS</h4>\n" + "\n" + '<pre class="prettyprint lang-sh">\n' + "git clone git://github.com/n1k0/casperjs.git\n" + "cd casperjs\n" + "git checkout tags/1.0.2\n" + "ln -sf `pwd`/bin/casperjs /usr/local/bin/casperjs\n" + "</pre>\n" + "\n" + "Detailed instructions about CasperJS installation:\n" + '<a href="http://casperjs.org/installation.html">http://casperjs.org/installation.html</a>\n' + "\n" + '<h3 id="develop-grunt-tasts">Grunt tasks</h3>\n' + "\n" + 'The list of basic <a href="http://gruntjs.com/">grunt</a> tasks useful during the delopment:\n' + "\n" + "<dl>\n" + "  <dt><code>grunt server</code></dt>\n" + "  <dd>Compile assets and start the web server on <code>localhost:9000</code></dd>\n" + "\n" + "  <dt><code>grunt build</code></dt>\n" + "  <dd>Build the production minified release of AngleGrinder</dd>\n" + "\n" + "  <dt><code>grunt clean</code></dt>\n" + "  <dd>Clear all temporary files and folders including the production release</dd>\n" + "</dl>\n" + "\n" + '<h3 id="develop-running-tests">Running tests</h3>\n' + "\n" + "<dl>\n" + "  <dt><code>grunt coffeling</code></dt>\n" + '  <dd>Run style checker for <a href="http://coffeescript.org/">CoffeeScript</a> source files</dd>\n' + "\n" + "  <dt><code>grunt test</code></dt>\n" + "  <dd>\n" + "    Run unit tests.<br/>\n" + '    It will also generate <a href="http://gotwarlost.github.io/istanbul">istanbul</a> test coverage report inside <code>./coverate</code>\n' + "    directory.\n" + "  </dd>\n" + "\n" + "  <dt><code>grunt test:casperjs</code></dt>\n" + "  <dd>Run CasperJS integration tests</dd>\n" + "</dl>\n" + "\n" + 'Unit test might be also executed directly by <a href="http://karma-runner.github.io">karma</a> with the following\n' + "command <code>karma start test/karma-coffee.conf.coffee</code>.\n" + "<br/>\n" + "Karma watches all the files, specified within the configuration file, and whenever any file changes, it triggers the\n" + "test run.\n" + "\n" + "<br/>\n" + "<br/>\n" + "\n" + "Example tests execution output:\n" + "\n" + '<pre class="prettyprint lang-sh">\n' + "> karma start test/karma-coffee.conf.coffee\n" + "................................................................................\n" + "................................................................................\n" + "....\n" + "PhantomJS 1.9.1 (Linux): Executed 164 of 164 SUCCESS (1.386 secs / 0.854 secs)\n" + "</pre>\n" + "\n" + '<h3 id="develop-running-app">Running the example application</h3>\n' + "\n" + "Execute <code>foreman start</code> and navigate to <code>http://localhost:9000</code>.<br/>\n" + "This command will start <code>grunt server</code> along with simple express application.\n" + "\n" + '<h3 id="develop-directory-structure">Directory structure</h3>\n' + "\n" + "<h4>Application sources and tests</h4>\n" + "\n" + "<ul>\n" + "  <li>\n" + '    <span class="label label-info">app</span>\n' + "    - contains CoffeeScript sources, styles, images, fonts and other assets\n" + "    <ul>\n" + "      <li>\n" + '        <span class="label label-info">app/scripts</span>\n' + "        - CoffeeScript sources\n" + "      </li>\n" + "      <li>\n" + '        <span class="label label-info">app/styles</span>\n' + "        - less and css stylesheets\n" + "      </li>\n" + "      <li>\n" + '        <span class="label label-info">app/views</span>\n' + "        - html views used by AngularJS\n" + "      </li>\n" + "    </ul>\n" + "  </li>\n" + "  <li>\n" + '    <span class="label label-info">tests</span>\n' + "    - contains tests for the application\n" + "    <ul>\n" + "      <li>\n" + '        <span class="label label-info">tests/unit</span>\n' + "        - unit tests for AngularJS components\n" + "      </li>\n" + "      <li>\n" + '        <span class="label label-info">tests/casperjs</span>\n' + "        - CasperJS integration specs\n" + "      </li>\n" + "    </ul>\n" + "  </li>\n" + "</ul>\n" + "\n" + "<h4>Third-party libraries</h4>\n" + "\n" + "<ul>\n" + "  <li>\n" + '    <span class="label label-info">bower_components</span>\n' + "    - components installed by bower\n" + "  </li>\n" + "  <li>\n" + '    <span class="label label-info">custom_components</span>\n' + "    - custom components\n" + "  </li>\n" + "  <li>\n" + '    <span class="label label-info">node_modules</span>\n' + "    - locally installed npm packages\n" + "  </li>\n" + "</ul>\n" + "\n" + "<h4>Generated stuff</h4>\n" + "\n" + "<ul>\n" + "  <li>\n" + '    <span class="label label-info">dev</span>\n' + "    - compiled development release\n" + "  </li>\n" + "  <li>\n" + '    <span class="label label-info">dist</span>\n' + "    - created by grunt build command,\n" + "    contains the production concatenated and minified release of the app\n" + "  </li>\n" + "</ul>\n" + "\n" + '<h2 id="develop-building">Building the app</h2>\n' + "\n" + "Build it with <code>grunt build</code> command.<br/>\n" + "This command will generate the following files.\n" + "\n" + '<pre class="prettyprint lang-sh">\n' + "dist\n" + "├── scripts\n" + "│   ├── angle-grinder.alerts.min.js\n" + "│   ├── angle-grinder.common.min.js\n" + "│   ├── angle-grinder.forms.min.js\n" + "│   ├── angle-grinder.gridz.min.js\n" + "│   ├── angle-grinder.spinner.min.js\n" + "│   ├── angularjs-all.min.js\n" + "│   ├── bootstrap.min.js\n" + "│   ├── gridz.min.js\n" + "│   ├── jquery.min.js\n" + "│   ├── scripts.min.js\n" + "│   └── underscore.min.js\n" + "└── styles\n" + "├── bootstrap.min.css\n" + "├── gridz.min.css\n" + "└── style.min.css\n" + "</pre>\n" + "\n" + "<dl>\n" + '  <dt><a href="{{ page.base_path }}docs#docs-alerts">angleGrinder.alerts.min.js</a></dt>\n' + '  <dd>AngularJS module for handling <a href="http://getbootstrap.com/2.3.2/javascript.html#alerts">alerts</a></dd>\n' + "\n" + '  <dt><a href="{{ page.base_path }}docs#docs-common">angleGrinder.common.min.js</a></dt>\n' + "  <dd>AngularJS module with common services used in various places of the app</dd>\n" + "\n" + '  <dt><a href="{{ page.base_path }}docs#docs-forms">angleGrinder.forms.min.js</a></dt>\n' + "  <dd>AngularJS module with some useful forms extensions</dd>\n" + "\n" + '  <dt><a href="{{ page.base_path }}docs#docs-gridz">angleGrinder.gridz.min.js</a></dt>\n' + '  <dd>AngularJS wrapper for <a href="http://www.trirand.com/blog/">jqGrid</a></dd>\n' + "\n" + '  <dt><a href="{{ page.base_path }}docs#docs-spinner">angleGrinder.spinner.min.js</a></dt>\n' + "  <dd>AngularJS module for displaying spinners</dd>\n" + "</dl>\n" + "\n" + "</div>\n");
    $templateCache.put("templates/documentation.html", '<div class="bs-docs-section">\n' + '  <div class="page-header">\n' + '    <h1 id="docs">AngleGrinder Documentation</h1>\n' + "  </div>\n" + "\n" + '  <h2 id="docs-common"><code>angleGrinder.common</code> module</h2>\n' + "\n" + "  Contains common services used in various places of the application.\n" + "\n" + '  <h3 id="docs-common-pathWithContext">pathWithContext</h3>\n' + "\n" + "  This service might be used for appending the context path to the given url.\n" + "  It helps to make the app more context path agnostic.<br/>\n" + "  Usage:\n" + "\n" + '<pre class="prettyprint">\n' + "class UsersListCtrl\n" + '  @$inject = ["$scope", "pathWithContext"]\n' + "    constructor: ($scope, pathWithContext) ->\n" + "\n" + "  $scope.gridOptions =\n" + "    # now the grid data url will be context aware\n" + '    url: pathWithContext("/api/users")\n' + "    # ...other grid options\n" + "\n" + 'angular.module("myApp")\n' + '  .controller("UsersListCtrl", UsersListCtrl)\n' + "</pre>\n" + "\n" + "  <h4>Configuration</h4>\n" + "\n" + "  Inside grails application the context path might be taken from <code>request.contextPath</code> property\n" + "  and assigned to the <code>body</code> html element.\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;body data-context-path=&quot;${request.contextPath}&quot;&gt;\n" + "&lt;/body&gt;\n" + "</pre>\n" + "\n" + "  During AngularJS application initialization this variable could be used for configuring the\n" + "  <code>pathWithContext</code> service provider.\n" + "\n" + '<pre class="prettyprint">\n' + 'app = angular.module("myApp", [\n' + '  "angleGrinder.common"\n' + "])\n" + "\n" + "# Sample `pathWithContext` configuration block\n" + "app.config [\n" + '  "pathWithContextProvider", (pathWithContextProvider) ->\n' + '    contextPath = $("body").data("context-path")\n' + "    pathWithContextProvider.setContextPath(contextPath) if contextPath?\n" + "]\n" + "</pre>\n" + "\n" + '  <h3 id="docs-common-pendingRequests">pendingRequests</h3>\n' + "\n" + "  Service designed for the internal usage.<br/>\n" + "  For example it is used for enabling / disabling <code>ag-submit-button</code> and <code>ag-delete-button</code>.\n" + "\n" + '<pre class="prettyprint">\n' + 'app = angular.module("myApp", [\n' + '  "angleGrinder.common"\n' + "])\n" + "\n" + "class MyCtrl\n" + '  @$inject = ["$scope", "pendingRequests"]\n' + "  constructor: ($scope, pendingRequests) ->\n" + "\n" + "    # will return `true` if any http request is in progress\n" + "    pendingRequests.any()\n" + "\n" + "    # shortcut for `pendingRequests.any()`\n" + "    pendingRequests()\n" + "\n" + "    # returns `true` if any http DELETE request is in progress\n" + '    pendingRequests.for("DELETE")\n' + "\n" + "    # returns `true` if POST or PUT request is in progress\n" + "    # it can accept multiple arguments with other http methods\n" + '    pendingRequests.for("POST", "PUT")\n' + "\n" + 'app.controller("MyCtrl", MyCtrl)\n' + "</pre>\n" + "\n" + '  <h2 id="docs-resources"><code>angleGrinder.resources</code> module</h2>\n' + "\n" + "  This module defines the resource mappings required by Angular JS to map to a\n" + '  standard Grails CRUD URL scheme that uses <code>"/$controller/$action?/$id?"</code>.\n' + "\n" + '  <h3 id="docs-resources-resourceBuilder">resourceBuilder</h3>\n' + "\n" + "  A factory which creates a resource object that lets you interact with RESTful server-side data sources.<br/>\n" + "  It decorates standard AngularJS <code>$resource</code> service with some useful methods\n" + "  internally used by other services and directives in the application.<br/>\n" + "\n" + "  Example usage:\n" + "\n" + '<pre class="prettyprint">\n' + 'app = angular.module("myApp", [\n' + '  "angleGrinder.common"\n' + "])\n" + "\n" + "class MyCtrl\n" + '  @$inject = ["$scope", "resourceBuilder"]\n' + "  constructor: ($scope, resourceBuilder) ->\n" + "\n" + "    # Create resource for users\n" + '    Users = resourceBuilder("/user")\n' + "    # load all users\n" + "    $scope.users = Users.get()\n" + "\n" + "    # create a record\n" + '    user = new Users(login: "foo")\n' + "    user.save() # will perform create action\n" + '    user.login = "new-foo"\n' + "    user.save() # will perform update action\n" + "\n" + "    # retrieve a record from the server side\n" + "    user = Users.get(id: 123)\n" + "\n" + 'app.controller("MyCtrl", MyCtrl)\n' + "</pre>\n" + "\n" + "  <h4>Methods on the resource object</h4>\n" + "\n" + "  <dl>\n" + "    <dt><code>resourceName()</code></dt>\n" + "    <dd>\n" + "      Returns resource name.<br/>\n" + "      This method is internally used by other services like <code>ag-server-validation-errors</code>\n" + "    </dd>\n" + "\n" + "    <dt><code>persisted()</code></dt>\n" + "    <dd>\n" + "      Returns <code>true</code> is a record is persisted on the server side.<br/>\n" + "      (it has <code>id</code> property)\n" + "    </dd>\n" + "\n" + "    <dt><code>newRecord()</code></dt>\n" + "    <dd>\n" + "      Opposite to <code>persisted()</code> method.<br/>\n" + "      Returns <code>true</code> is the record is not persisted on the server side.\n" + "    </dd>\n" + "\n" + "    <dt><code>save()</code></dt>\n" + "    <dd>\n" + "      Backbone style save() that inserts or updated the record<br/>\n" + "      based on the presence of an <code>id</code>.\n" + "    </dd>\n" + "\n" + "    <dt><code>delete()</code></dt>\n" + "    <dd>\n" + "      Performs http DELETE action.\n" + "    </dd>\n" + "  </dl>\n" + "\n" + '  <span class="label label-info">note</span> context path will be automatically appended to the given path via <code>pathWithContext</code> service\n' + "\n" + '  <h3 id="docs-resources-Resource">Resource</h3>\n' + "\n" + "  Build default resource for the current page.<br/>\n" + "  For example we could have the following html page:\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;body data-context-path=&quot;${request.contextPath}&quot;\n" + "      data-resource-name=&quot;user&quot;\n" + "      data-resource-path=&quot;/api/users&quot;&gt;\n" + "&lt;/body&gt;\n" + "</pre>\n" + "\n" + "  <code>Resource</code> service for this page will create resource objects for handling users api.<br/>\n" + '  Internally it calls <code>resourceBuilder("/api/users", "user")</code> service.\n' + "\n" + '  <h2 id="docs-spinner"><code>angleGrinder.spinner</code> module</h2>\n' + "\n" + "  Contains a directive for displaying spinner loding animation on the page.<br/>\n" + "  Example usage:\n" + "\n" + '<pre class="prettyprint">\n' + 'app = angular.module("myApp", [\n' + '  "angleGrinder.spinner"\n' + "])\n" + "</pre>\n" + "\n" + "  Include it anywhere you want to see the spinner. For instance:\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;navbar navbar-inverse navbar-fixed-top&quot;&gt;\n" + "  &lt;div class=&quot;navbar-inner&quot;&gt;\n" + "    &lt;div class=&quot;container&quot;&gt;\n" + "      &lt;div&gt;\n" + "        &lt;ul class=&quot;nav pull-right&quot;&gt;\n" + "          &lt;ag-spinner&gt;&lt;/ag-spinner&gt;\n" + "        &lt;/ul&gt;\n" + "      &lt;/div&gt;\n" + "    &lt;/div&gt;\n" + "  &lt;/div&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + '  <h2 id="docs-alerts"><code>angleGrinder.alerts</code> module</h2>\n' + "\n" + "  AngularJS service and directive for displaying alerts.<br/>\n" + "  Include <code>angleGrinder.alerts</code> module in the application\n" + "\n" + '<pre class="prettyprint">\n' + 'app = angular.module("myApp", [\n' + '  "angleGrinder.alerts"\n' + "])\n" + "</pre>\n" + "\n" + "  Include container for alerts somewhere on the page\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div ng-app=&quot;myApp&quot;&gt;\n" + "  &lt;section ng-controller=&quot;MyCtrl&quot; class=&quot;content&quot;&gt;\n" + "    &lt;ag-alerts&gt;&lt;/ag-alerts&gt;\n" + "  &lt;/section&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  Inject <code>alert</code> service\n" + "\n" + '<pre class="prettyprint">\n' + "class MyCtrl\n" + "\n" + '  @$inject = ["alerts"]\n' + "  constructor: (alerts) ->\n" + '    alerts.info "Hello World!"\n' + '    alerts.error "Something went wrong!"\n' + "\n" + 'angular.module("myApp")\n' + '  .controller("MyCtrl", MyCtrl)\n' + "</pre>\n" + "\n" + "  <code>alert</code> service might be injected as regular AngularJS service.\n" + "  For example:\n" + "\n" + '<pre class="prettyprint">\n' + "# Intercepts all HTTP errors and displays a flash message\n" + 'app.factory "httpErrorsInterceptor", [\n' + '  "$injector", "$q", "alerts", ($injector, $q, alerts) ->\n' + "    (promise) ->\n" + '      $http = $injector.get("$http")\n' + "\n" + "      onError = (response) ->\n" + "        # display error message\n" + '        errorMessage = response.data?.error || "Unexpected HTTP error"\n' + "        alerts.error(errorMessage)\n" + "\n" + "        $q.reject(response)\n" + "        promise.then(null, onError)\n" + "\n" + "      promise.then(null, onError)\n" + "  ]\n" + "</pre>\n" + "\n" + '  <h2 id="docs-forms"><code>angleGrinder.forms</code> module</h2>\n' + "\n" + "  Bunch of extensions used for building forms.\n" + "\n" + '  <h3 id="docs-forms-basic">Basic example</h3>\n' + "\n" + "  The view\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div ng-controller=&quot;org.FormController&quot;&gt;\n" + "  &lt;form name=&quot;editForm&quot; novalidate class=&quot;form-horizontal no-margin&quot;\n" + "        ng-submit=&quot;save(org)&quot;&gt;\n" + "\n" + "    &lt;div ag-field-group for=&quot;name&quot;&gt;\n" + "      &lt;label class=&quot;control-label&quot;&gt;Name&lt;/label&gt;\n" + "\n" + "      &lt;div class=&quot;controls&quot;&gt;\n" + "        &lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;Enter Name&quot;\n" + "               ng-model=&quot;org.name&quot; autofocus required /&gt;\n" + "        &lt;ag-validation-errors for=&quot;name&quot; /&gt;\n" + "      &lt;/div&gt;\n" + "    &lt;/div&gt;\n" + "\n" + "    &lt;div ag-field-group for=&quot;num&quot;&gt;\n" + "      &lt;label class=&quot;control-label&quot;&gt;Num&lt;/label&gt;\n" + "\n" + "      &lt;div class=&quot;controls&quot;&gt;\n" + "        &lt;input type=&quot;text&quot; name=&quot;num&quot; placeholder=&quot;Enter num&quot;\n" + "               ng-model=&quot;org.num&quot; autofocus required /&gt;\n" + "        &lt;ag-validation-errors for=&quot;num&quot; required=&quot;This field is required&quot; /&gt;\n" + "      &lt;/div&gt;\n" + "    &lt;/div&gt;\n" + "\n" + "    &lt;div class=&quot;form-actions&quot;&gt;\n" + "      &lt;ag-submit-button&gt;&lt;/ag-submit-button&gt;\n" + "    &lt;/div&gt;\n" + "  &lt;/form&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  and the controller\n" + "\n" + '<pre class="prettyprint">\n' + "class FormCtrl\n" + "\n" + '  @$inject = ["$scope", "resourceBuilder"]\n' + '  $scope.org = resourceBuilder("/api/org")\n' + "\n" + "  $scope.save = (org) ->\n" + "    return if $scope.editForm.$invalid\n" + "    org.save()\n" + "\n" + 'angular.module("myApp")\n' + '  .controller("org.FormCtrl", FormCtrl)\n' + "</pre>\n" + "\n" + '  <h3 id="docs-forms-validations">Form validations</h3>\n' + "\n" + "  Set of directives and services for displaying various validation errors.\n" + "\n" + "  <h4>agFieldGroup directive</h4>\n" + "\n" + '  Provides integration with <a href="http://getbootstrap.com/2.3.2/base-css.html#forms">bootstrap</a> form\'s validation styles.<br/>\n' + "  This directive simply wraps labels and controls in <code>div.control-group</code> element.\n" + "  <br/>\n" + "  <br/>\n" + "  For example\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div ag-field-group for=&quot;name&quot;&gt;\n" + "  &lt;label class=&quot;control-label&quot;&gt;Name&lt;/label&gt;\n" + "\n" + "  &lt;div class=&quot;controls&quot;&gt;\n" + "    &lt;input type=&quot;text&quot; name=&quot;name&quot; placeholder=&quot;Enter Name&quot;\n" + "           ng-model=&quot;org.name&quot; required /&gt;\n" + "  &lt;/div&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  will generate the following markup:\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;control-group&quot;&gt;\n" + "  &lt;!-- form inputs --&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + '  If one the fields listed in <code>for="*"</code> attribute contains errors the directive will\n' + "  add <code>error</code> css class to the element.<br/>\n" + "  For example:\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;control-group error&quot;&gt;\n" + "  &lt;!-- input that violates validation --&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  <h4>agValidationErrors directive</h4>\n" + "\n" + "  This directive is responsible for displaying validation messages for invalid fields.<br/>\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;controls&quot;&gt;\n" + "  &lt;input type=&quot;password&quot; name=&quot;password&quot;\n" + "         ng-model=&quot;user.password&quot;\n" + "         ng-required=&quot;user.newRecord()&quot;\n" + "         ng-minlength=&quot;6&quot; /&gt;\n" + "  &lt;ag-validation-errors for=&quot;password&quot; /&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  Default validation messages are defined in <code>validationMessages</code> service.\n" + "\n" + '<pre class="prettyprint">\n' + 'forms.value "validationMessages",\n' + '  required: "This field is required"\n' + '  mismatch: "Does not match the confirmation"\n' + '  minlength: "This field is too short"\n' + '  maxlength: "This field is too long"\n' + '  email: "Invalid email address"\n' + '  pattern: "Invalid pattern"\n' + "</pre>\n" + "\n" + "  A message for the given validation could be overridden in the directive.<br/>\n" + "  For example:\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;controls&quot;&gt;\n" + "  &lt;!-- password field from the previous example --&gt;\n" + "\n" + "  &lt;ag-validation-errors\n" + "      for=&quot;password&quot;\n" + "      required=&quot;Password is required&quot;\n" + "      minlength=&quot;Password must be at least 6 characters&quot; /&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  <h4>agServerValidationErrors directive</h4>\n" + "\n" + "  Adds ability to display validation errors from the server side along with standard validation messages.\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;form name=&quot;editForm&quot; novalidate class=&quot;form-horizontal no-margin&quot;\n" + "      ag-server-validation-errors&gt;\n" + "\n" + "  &lt;!-- form inputs --&gt;\n" + "&lt;/form&gt;\n" + "</pre>\n" + "\n" + "  This directive expects that validation errors will come from the server side with the following format:\n" + "\n" + '<pre class="prettyprint">\n' + "{\n" + '  "code": 422,\n' + '  "status": "error",\n' + '  "message": "User save failed",\n' + '  "errors": {\n' + '    "user": {\n' + '      "login": "Login must be unique"\n' + "    }\n" + "  }\n" + "}\n" + "</pre>\n" + "\n" + "  <ul>\n" + "    <li>HTTP response code must be <code>422</code> (unprocessable entity)</li>\n" + '    <li>returned JSON response must include "errors" object</li>\n' + "    <li>entity name and error key must match entity and field name defined on the client side</li>\n" + "  </ul>\n" + "\n" + '  <h3 id="docs-forms-ag-submit-button">agSubmitButton directive</h3>\n' + "\n" + "  Renders a default button for creating or updating the resource.\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;form-actions&quot;&gt;\n" + "  &lt;ag-submit-button&gt;&lt;/ag-submit-button&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  <ul>\n" + '    <li>it will have default label "Save"</li>\n' + "    <li>the button will be automatically disabled if <code>POST</code> or <code>PUT</code> request is in progress</li>\n" + '    <li>if request is in progress the label will be changed to "Save..."</li>\n' + "  </ul>\n" + "\n" + '  <h3 id="docs-forms-ag-delete-button">agDeleteButton directive</h3>\n' + "\n" + '  Double check delete button. The basic idea was taken from <a href="http://williamcsete.com/sandbox/double-delete">http://williamcsete.com/sandbox/double-delete</a>.\n' + "  Example usage:\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;form-actions&quot;&gt;\n" + "  &lt;ag-delete-button when-confirmed=&quot;delete(user)&quot;&gt;&lt;/ag-delete-button&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  <code>when-confirmed={expression}</code> - expression to evaluate upon the second click\n" + "  (when the action was confirmed)\n" + "\n" + "  <br/>\n" + "  <br/>\n" + "\n" + "  <ul>\n" + '    <li>it will have default label "Delete"</li>\n' + "    <li>after the first click it will be changed to in-place confirmation</li>\n" + "    <li>the button will be automatically disabled if <code>POST</code> or <code>DELETE</code> request is in progress</li>\n" + '    <li>if request is in progress the label will be changed to "Delete..."</li>\n' + "  </ul>\n" + "\n" + '  <h3 id="docs-forms-confirmationDialog">confirmationDialog service</h3>\n' + "\n" + "  Generic confirmation dialog.<br/>\n" + "  Example usage in the controller:\n" + "\n" + '<pre class="prettyprint">\n' + "class MyCtrl\n" + '  @$inject = ["$scope", "confirmationDialog"]\n' + "  constructor: ($scope, confirmationDialog) ->\n" + "\n" + "  $scope.deleteItem = (item) ->\n" + "    confirmationDialog.open().then (confirmed) ->\n" + "      item.delete() if confirmed\n" + "\n" + 'angular.module("myApp")\n' + '  .controller("MyCtrl", MyCtrl)\n' + "</pre>\n" + "\n" + '  <h3 id="docs-forms-editDialog">editDialog service</h3>\n' + "\n" + "  Displays a dialog with a form for creating or updating a record.\n" + "  Used mostly on dialog based CRUD pages.<br/>\n" + "  Example usage:\n" + "\n" + '<pre class="prettyprint">\n' + "class MyCtrl\n" + "\n" + '  @$inject = ["$scope", "editDialog", "Users"]\n' + "  constructor: ($scope, editDialog, Users) ->\n" + "    # Displays a form for creating a new user\n" + "    $scope.createItem = ->\n" + "      user = new Users()\n" + '      editDialog.open("/user/formTemplate", user)\n' + "\n" + "    # Displays a form for editing an exiting user\n" + "    $scope.editItem = (id) ->\n" + "      Users.get { id: id }, (user) ->\n" + '        editDialog.open("/user/formTemplate", user)\n' + "\n" + 'angular.module("myApp")\n' + '  .controller("tabbedOrg.MyCtrl", MyCtrl)\n' + "</pre>\n" + "\n" + "  Example template for the dialog <code>/user/formTemplate</code>:\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;modal-header&quot;&gt;\n" + "  &lt;button type=&quot;button&quot; class=&quot;close&quot; ng-click=&quot;closeEditDialog()&quot;&gt;&amp;times;&lt;/button&gt;\n" + "  &lt;h3 ng-show=&quot;createNew&quot;&gt;Create New ${entityName}&lt;/h3&gt;\n" + "  &lt;h3 ng-hide=&quot;createNew&quot;&gt;Edit ${entityName}&lt;/h3&gt;\n" + "&lt;/div&gt;\n" + "\n" + "&lt;form name=&quot;editForm&quot; class=&quot;form-horizontal no-margin&quot; novalidate\n" + "      ng-submit=&quot;save(item)&quot;&gt;\n" + "  &lt;div class=&quot;modal-body&quot; ng-controller=&quot;user.FormCtrl&quot;&gt;\n" + "\n" + "    &lt;div ag-field-group for=&quot;contactFirstName,contactLastName&quot;&gt;\n" + "      &lt;label class=&quot;control-label&quot;&gt;${ag.label(code: &quot;contact.name&quot;)}&lt;/label&gt;\n" + "\n" + "      &lt;div class=&quot;controls&quot;&gt;\n" + "        &lt;input type=&quot;text&quot; placeholder=&quot;${ag.label(code: 'contact.firstName')}&quot;\n" + "               name=&quot;contactFirstName&quot;\n" + "               ng-model=&quot;item.contact.firstName&quot; required autofocus&gt;\n" + "        &lt;ag-validation-errors for=&quot;contactFirstName&quot; /&gt;\n" + "      &lt;/div&gt;\n" + "\n" + "      &lt;div class=&quot;controls&quot; style=&quot;margin-top:5px&quot;&gt;\n" + "        &lt;input type=&quot;text&quot; placeholder=&quot;${ag.label(code: 'contact.lastName')}&quot;\n" + "               name=&quot;contactLastName&quot;\n" + "               ng-model=&quot;item.contact.lastName&quot; /&gt;\n" + "        &lt;ag-validation-errors for=&quot;contactLastName&quot; /&gt;\n" + "      &lt;/div&gt;\n" + "    &lt;/div&gt;\n" + "  &lt;/div&gt;\n" + "\n" + "  &lt;div class=&quot;modal-footer&quot;&gt;\n" + "      &lt;span ng-hide=&quot;createNew&quot;&gt;\n" + "          &lt;ag-delete-button when-confirmed=&quot;delete(item)&quot;&gt;&lt;/ag-delete-button&gt;\n" + "      &lt;/span&gt;\n" + "\n" + "    &lt;ag-cancel-button ng-click=&quot;closeEditDialog()&quot;&gt;&lt;/ag-cancel-button&gt;\n" + "    &lt;ag-submit-button&gt;&lt;/ag-submit-button&gt;\n" + "  &lt;/div&gt;\n" + "&lt;/form&gt;\n" + "</pre>\n" + "\n" + '  <h2 id="docs-gridz"><code>angleGrinder.gridz</code> module</h2>\n' + "\n" + '  AngularJS directive for <a href="http://www.trirand.com/blog">jqGrid</a>\n' + "\n" + '  <h3 id="docs-gridz-basic">Basic example</h3>\n' + "\n" + "  Include <code>angleGrinder.gridz</code> module in the application:\n" + "\n" + '<pre class="prettyprint">\n' + 'app = angular.module("myApp", [\n' + '  "angleGrinder.gridz"\n' + "])\n" + "</pre>\n" + "\n" + "  Example AngularJS controller:\n" + "\n" + '<pre class="prettyprint">\n' + "class ListCtrl\n" + "\n" + '  @$inject = ["$scope", "sampleData"]\n' + "  constructor: ($scope, @sampleData) ->\n" + "    # assign grid options to the scope\n" + "    $scope.gridOptions =\n" + "      data: @generateSampleData()\n" + '      datatype: "local"\n' + "      colModel: @gridColumns()\n" + '      sortname: "id"\n' + "\n" + "  # Generates sample data to feed the grid\n" + "  generateSampleData: ->\n" + "    @sampleData.generate(100)\n" + "\n" + "  # Defines grid column model\n" + "  # see http://www.trirand.com/jqgridwiki/doku.php?id=wiki:colmodel_options\n" + "  gridColumns: ->\n" + "  [\n" + '      name: "id"\n' + '      label: "Inv No"\n' + "      width: 60\n" + '      sorttype: "int"\n' + "    ,\n" + '      name: "customer.name"\n' + '      label: "Customer"\n' + '      formatter: "editActionLink"\n' + "    ,\n" + '      name: "invoiceDate"\n' + '      label: "Date"\n' + "    ,\n" + '      name: "note"\n' + '      label: "Note"\n' + "    ,\n" + '      name: "complete"\n' + '      label: "Complete"\n' + "  ]\n" + "\n" + 'angular.module("myApp")\n' + '  .controller("ListCtrl", ListCtrl)\n' + "</pre>\n" + "\n" + "  Directive usage:\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;body ng-app=&quot;myApp&quot;&gt;\n" + "  &lt;div ng-controller=&quot;ListCtrl&quot;&gt;\n" + "    &lt;div ag-grid=&quot;gridOptions&quot;&gt;&lt;/div&gt;\n" + "  &lt;/div&gt;\n" + "&lt;/body&gt;\n" + "</pre>\n" + "\n" + '  <h3 id="docs-gridz-ajax">Grid with server side data</h3>\n' + "\n" + '<pre class="prettyprint">\n' + "class UsersListCtrl\n" + '  @$inject = ["$scope"]\n' + "  constructor: ($scope) ->\n" + "\n" + "  $scope.gridOptions =\n" + '    url: "/api/users"\n' + "    colModel: @gridColumns()\n" + "    rowNum: 10\n" + '    sortname: "id"\n' + "\n" + "  # Handle the grid's quick search action\n" + "  $scope.quickSearch = (search) ->\n" + '    $scope.$broadcast "searchUpdated", search\n' + "\n" + "  # see the previous example\n" + "  gridColumns: ->\n" + "    []\n" + "\n" + 'angular.module("myApp")\n' + '  .controller("UsersListCtrl", UsersListCtrl)\n' + "</pre>\n" + "\n" + '<pre class="prettyprint lang-hmtl">\n' + "&lt;body ng-app=&quot;myApp&quot;&gt;\n" + "  &lt;div ng-controller=&quot;UsersListCtrl&quot;&gt;\n" + "    &lt;div ag-grid=&quot;gridOptions&quot;&gt;&lt;/div&gt;\n" + "  &lt;/div&gt;\n" + "&lt;/body&gt;\n" + "</pre>\n" + "\n" + '  <h3 id="docs-gridz-toolbar">Grid with toolbar</h3>\n' + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;navbar navbar-grid&quot;&gt;\n" + "  &lt;div class=&quot;navbar-inner with-selected-pointer with-grid-options&quot;&gt;\n" + "    &lt;ul class=&quot;nav&quot;&gt;\n" + "      &lt;li&gt;&lt;span class=&quot;icon-selected-pointer&quot;&gt; &lt;/span&gt;&lt;/li&gt;\n" + "      &lt;li class=&quot;dropdown selected-actions&quot;&gt;\n" + "        &lt;a data-toggle=&quot;dropdown&quot; class=&quot;dropdown-toggle&quot; href=&quot;&quot;&gt;\n" + "          Actions &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;\n" + "        &lt;/a&gt;\n" + "        &lt;ul class=&quot;dropdown-menu&quot;&gt;\n" + "          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;icon-eye-open&quot;&gt;&lt;/i&gt; View&lt;/a&gt;&lt;/li&gt;\n" + "          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;icon-external-link&quot;&gt;&lt;/i&gt; Export&lt;/a&gt;&lt;/li&gt;\n" + "          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;&lt;i class=&quot;icon-trash&quot;&gt;&lt;/i&gt; Delete&lt;/a&gt;&lt;/li&gt;\n" + "        &lt;/ul&gt;\n" + "      &lt;/li&gt;\n" + "      &lt;li class=&quot;divider-vertical&quot;&gt;&lt;/li&gt;\n" + "      &lt;li&gt;\n" + "        &lt;a href=&quot;&quot; class=&quot;create-button&quot; ng-click=&quot;createItem()&quot;&gt;\n" + "          &lt;i class=&quot;icon-edit&quot;&gt;&lt;/i&gt;New\n" + "        &lt;/a&gt;\n" + "      &lt;/li&gt;\n" + "    &lt;/ul&gt;\n" + "\n" + "    &lt;ul class=&quot;nav pull-right&quot;&gt;\n" + "      &lt;li&gt;&lt;a href=&quot;#&quot; title=&quot;search screen&quot;&gt;&lt;i class=&quot;icon-search&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;\n" + "      &lt;li class=&quot;divider-vertical skinny&quot;&gt;&lt;/li&gt;\n" + "      &lt;li class=&quot;dropdown grid-options&quot;&gt;\n" + "        &lt;a data-toggle=&quot;dropdown&quot; class=&quot;dropdown-toggle&quot; href=&quot;#&quot;&gt;\n" + "          &lt;i class=&quot;icon-cog&quot;&gt;&lt;/i&gt;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/i&gt;\n" + "        &lt;/a&gt;\n" + "        &lt;ul class=&quot;dropdown-menu&quot;&gt;\n" + "          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Columns&lt;/a&gt;&lt;/li&gt;\n" + "          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action&lt;/a&gt;&lt;/li&gt;\n" + "          &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;\n" + "          &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link&lt;/a&gt;&lt;/li&gt;\n" + "        &lt;/ul&gt;\n" + "      &lt;/li&gt;\n" + "    &lt;/ul&gt;\n" + "    &lt;form action=&quot;&quot; class=&quot;navbar-search pull-right&quot;&gt;\n" + "      &lt;input type=&quot;text&quot; value=&quot;&quot; placeholder=&quot;Search&quot;\n" + "             class=&quot;search-query span2&quot; /&gt;\n" + "    &lt;/form&gt;\n" + "  &lt;/div&gt;\n" + "&lt;/div&gt;\n" + "\n" + "&lt;div ag-grid=&quot;gridOptions&quot;&gt;&lt;/div&gt;\n" + "</pre>\n" + "\n" + '  <h3 id="docs-gridz-search">Grid with advanced search form</h3>\n' + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div collapse=&quot;!showSearchForm&quot;\n" + "     ng-include src=&quot;'templates/user/search_form.html'&quot;&gt;&lt;/div&gt;\n" + "\n" + "&lt;div class=&quot;navbar navbar-grid&quot;&gt;\n" + "  &lt;ul&gt;\n" + "    &lt;li&gt;\n" + "      &lt;a href=&quot;&quot; title=&quot;search screen&quot;\n" + "         ng-click=&quot;showSearchForm = !showSearchForm&quot;&gt;\n" + "        &lt;i class=&quot;icon-search&quot;&gt;&lt;/i&gt;\n" + "      &lt;/a&gt;\n" + "    &lt;/li&gt;\n" + "  &lt;/ul&gt;\n" + "\n" + "  &lt;div ag-grid=&quot;gridOptions&quot;&gt;&lt;/div&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "<h4>Sample search form</h4>\n" + "\n" + '<pre class="prettyprint lang-html">\n' + "&lt;div class=&quot;well&quot;&gt;\n" + "  &lt;form ag-search-form class=&quot;form-horizontal form-multi-column no-margin&quot;&gt;\n" + "    &lt;div class=&quot;row-fluid&quot;&gt;\n" + "      &lt;div class=&quot;control-group span6&quot;&gt;\n" + "        &lt;label class=&quot;control-label&quot;&gt;Name&lt;/label&gt;\n" + "        &lt;div class=&quot;controls&quot;&gt;\n" + "          &lt;input class=&quot;input-block-level&quot; type=&quot;text&quot;\n" + "                 ng-model=&quot;search.name&quot;&gt;\n" + "        &lt;/div&gt;\n" + "      &lt;/div&gt;\n" + "\n" + "      &lt;div class=&quot;control-group span6&quot;&gt;\n" + "        &lt;label class=&quot;control-label&quot;&gt;Allowance&lt;/label&gt;\n" + "        &lt;div class=&quot;controls&quot;&gt;\n" + "          &lt;input class=&quot;input-block-level&quot; type=&quot;text&quot;\n" + "                 ng-model=&quot;search.allowance&quot;&gt;\n" + "        &lt;/div&gt;\n" + "      &lt;/div&gt;\n" + "    &lt;/div&gt;\n" + "\n" + "    &lt;div class=&quot;pull-right&quot;&gt;\n" + "      &lt;ag-search-button&gt;&lt;/ag-search-button&gt;\n" + "      &lt;ag-reset-search-button&gt;&lt;/ag-reset-search-button&gt;\n" + "    &lt;/div&gt;\n" + "  &lt;/form&gt;\n" + "&lt;/div&gt;\n" + "</pre>\n" + "\n" + "  There is no need to implement a separate controller for handling the grid's advanced search.\n" + "  Everything will be transparently handled by the following directives\n" + '  <span class="label label-info">ag-search-form</span>,\n' + '  <span class="label label-info">ag-search-button</span> and\n' + '  <span class="label label-info">ag-search-reset-search-button</span>.\n' + "\n" + "  <br/>\n" + "  <br/>\n" + "\n" + '  <span class="label label-info">note</span> advanced grid\'s search should be handled on the server side.\n' + "\n" + "</div>\n");
    $templateCache.put("templates/gridExample/form.html", '<div class="modal-header">\n' + '  <button type="button" class="close" ng-click="closeEditDialog()" aria-hidden="true">&times;</button>\n' + "\n" + '  <h3 ng-show="createNew">Create New Item</h3>\n' + '  <h3 ng-hide="createNew">Edit Item {{item.customer.name}}</h3>\n' + "</div>\n" + "\n" + '<div class="modal-body">\n' + '  <form name="editForm" novalidate class="form-horizontal no-margin" ng-submit="save(item)">\n' + "\n" + '    <div ag-field-group for="customerName">\n' + '      <label class="control-label">Customer Name</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="customerName" placeholder="Enter Customer Name"\n' + '               ng-model="item.customer.name" autofocus required />\n' + '        <ag-validation-errors for="customerName" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="control-group">\n' + '      <label class="control-label">Date</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="date" placeholder="Enter Date"\n' + '               ng-model="item.invoiceDate" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="control-group">\n' + '      <label class="control-label">Note</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="note" placeholder="Enter Note"\n' + '               ng-model="item.note" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="password,passwordConfirmation">\n' + '      <label class="control-label">Password</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="password" name="password" placeholder="Enter Password"\n' + '               ng-model="item.password" autofocus required ng-minlength="6" />\n' + '        <ag-validation-errors for="password"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters." />\n' + "      </div>\n" + "\n" + '      <div class="controls">\n' + '        <input type="password" name="passwordConfirmation" placeholder="Enter Password Confirmation"\n' + '               ng-model="item.passwordConfirmation" autofocus\n' + '               required match="item.password" ng-minlength="6" />\n' + '        <ag-validation-errors for="passwordConfirmation"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters."\n' + '                          mismatch="The password does not match the confirmation" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="modal-footer">\n' + '      <span ng-hide="createNew">\n' + '        <ag-delete-button when-confirmed="delete(item)"></ag-delete-button>\n' + "      </span>\n" + "\n" + '      <cancel-button ng-click="closeEditDialog()"></cancel-button>\n' + "      <ag-submit-button></ag-submit-button>\n" + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/gridExample/index.html", '<section class="anchor">\n' + "  <h2>Grid example</h2>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" style="padding-left: 2px">\n' + '            <i class="icon-selected-pointer"> </i> Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href=""><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href=""><i class="icon-external-link"></i> Export</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href=""><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + "        <li>\n" + '          <a href="" class="create-button" ng-click="createItem()">\n' + '            <i class="icon-plus-sign"></i> Add new record\n' + "          </a>\n" + "        </li>\n" + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + '        <li><a href="" title="search screen"><i class="icon-search"></i></a></li>\n' + '        <li class="divider-vertical skinny"></li>\n' + '        <li class="dropdown grid-options">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href=""><i class="icon-cog"></i><b\n' + '              class="caret"></b></i></a>\n' + '          <ul class="dropdown-menu">\n' + '            <li><a href=""><i class="icon-th-list"></i> Columns</a></li>\n' + '            <li><a href=""><i class="icon-edit"></i> Another action</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href=""><i class="icon-external-link"></i> Separated link</a></li>\n' + "          </ul>\n" + "        </li>\n" + "      </ul>\n" + '      <form action="" class="navbar-search pull-right">\n' + '        <input type="text" value="" placeholder="Search" class="search-query span2"\n' + '               style="width: 150px;"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div ag-grid="gridOptions"\n' + '       ag-grid-name="grid"></div>\n' + "</section>\n");
    $templateCache.put("templates/partials/navbarTop.html", '<div class="navbar navbar-inverse navbar-fixed-top">\n' + '  <div class="navbar-inner">\n' + '    <div class="container">\n' + '      <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">\n' + '        <span class="icon-bar"></span>\n' + '        <span class="icon-bar"></span>\n' + '        <span class="icon-bar"></span>\n' + "      </button>\n" + '      <a class="brand" href="#/">AngleGrinder</a>\n' + "\n" + '      <div class="nav-collapse collapse">\n' + '        <ul class="nav">\n' + '          <li><a href="#/documentation">Documentation</a></li>\n' + '          <li><a href="#/examples">Examples</a></li>\n' + "        </ul>\n" + "\n" + '        <ul class="nav pull-right">\n' + '          <li class="dropdown">\n' + '            <a href="#" class="dropdown-toggle" data-toggle="dropdown">\n' + '              <i class="icon-user"></i> Joshua Burnett <b class="caret"></b>\n' + "            </a>\n" + '            <ul class="dropdown-menu">\n' + "              <li>\n" + '                <a href="#"><i class="icon-user"></i> Account Settings </a>\n' + "              </li>\n" + "\n" + "              <li>\n" + '                <a href="#"><i class="icon-lock"></i> Change Password</a>\n' + "              </li>\n" + '              <li class="divider"></li>\n' + "              <li>\n" + '                <a href="#"><i class="icon-off"></i> Logout</a>\n' + "              </li>\n" + "            </ul>\n" + "          </li>\n" + "\n" + "          <ag-spinner></ag-spinner>\n" + "        </ul>\n" + "      </div>\n" + "    </div>\n" + "  </div>\n" + "</div>\n");
    $templateCache.put("templates/users/form.html", '<div class="subnav">\n' + '  <ul class="nav nav-pills">\n' + '    <li><a class="list" href="#/examples/users"><i class="icon-list"></i> Users List</a></li>\n' + '    <li><a ng-show="user.persisted()" class="list" href="#/examples/users/{{user.id}}"><i class="icon-th"></i> Show user</a></li>\n' + '    <li><a class="create" href="#/examples/users/create"><i class="icon-plus"></i> New user</a></li>\n' + "  </ul>\n" + "</div>\n" + "\n" + '<div class="content">\n' + '  <h2 class="page-header" ng-show="user.newRecord()">Create user</h2>\n' + '  <h2 class="page-header" ng-show="user.persisted()">Edit user</h2>\n' + "\n" + '  <form name="editForm" novalidate class="form-horizontal no-margin"\n' + "        ag-server-validation-errors\n" + '        ng-submit="save(user)">\n' + "\n" + '    <div ag-field-group for="name">\n' + '      <label class="control-label">Name</label>\n' + '      <div class="controls">\n' + '        <input type="text" name="name" placeholder="Enter Name"\n' + '               ng-model="user.name" autofocus\n' + "               required />\n" + '        <ag-validation-errors for="name" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="login">\n' + '      <label class="control-label">Login</label>\n' + '      <div class="controls">\n' + '        <input type="text" name="login" placeholder="Enter Login"\n' + '               ng-model="user.login"\n' + '               required ng-minlength="6" />\n' + '        <ag-validation-errors for="login" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="allowance">\n' + '      <label class="control-label">Allowance</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="allowance" placeholder="Enter Allowance"\n' + '               ng-model="user.allowance" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="birthday">\n' + '      <label class="control-label">Birthday</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" bs-datepicker\n' + '               name="birthday" ng-model="user.birthday"\n' + '               ng-required="true" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="password,passwordConfirmation">\n' + '      <label class="control-label">Password</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="password" name="password" placeholder="Enter Password"\n' + '               ng-model="user.password" autofocus ng-required="user.newRecord()" ng-minlength="6" />\n' + '        <ag-validation-errors for="password"\n' + '                              required="This field is required"\n' + '                              minlength="Password must be at least 6 characters." />\n' + "      </div>\n" + "\n" + '      <div class="controls">\n' + '        <input type="password" name="passwordConfirmation" placeholder="Enter Password Confirmation"\n' + '               ng-model="user.passwordConfirmation" autofocus\n' + '               ng-required="user.newRecord()" match="user.password" ng-minlength="6" />\n' + '        <ag-validation-errors for="passwordConfirmation"\n' + '                              required="This field is required"\n' + '                              minlength="Password must be at least 6 characters."\n' + '                              mismatch="The password does not match the confirmation" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="form-actions">\n' + "      <ag-submit-button></ag-submit-button>\n" + '      <span ng-show="user.persisted()">\n' + '        <ag-delete-button when-confirmed="delete(user)"></ag-delete-button>\n' + "      </span>\n" + '      <a href="#/examples/users" class="btn">Cancel</a>\n' + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/users/list.html", '<section class="anchor">\n' + '  <h2 class="page-header">Users list</h2>\n' + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" style="padding-left: 2px">\n' + '            <i class="icon-selected-pointer"></i> Actions<b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href="" ng-click="massUpdate()"><i class="icon-edit"></i> Mass update</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + "        <li>\n" + '          <a href="#/examples/users/create" class="create-button">\n' + '            <i class="icon-edit"></i>Create user\n' + "          </a>\n" + "        </li>\n" + "      </ul>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div ag-grid="gridOptions"\n' + '       ag-grid-name="usersGrid"></div>\n' + "</section>\n");
    $templateCache.put("templates/users/massUpdateForm.html", '<div class="modal-header">\n' + '  <button type="button" class="close" ng-click="closeDialog()" aria-hidden="true">&times;</button>\n' + "  <h3>Mass update</h3>\n" + "</div>\n" + "\n" + '<form name="usersForm" novalidate class="form-horizontal no-margin"\n' + '      ng-submit="save(users)">\n' + "\n" + '  <div class="modal-body">\n' + '    <div ag-field-group for="allowance">\n' + '      <label class="control-label">Allowance</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="allowance" placeholder="Enter Allowance"\n' + '               ng-model="users.allowance" ng-required="true" />\n' + '        <ag-validation-errors for="allowance" />\n' + "      </div>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div class="modal-footer">\n' + "    <ag-submit-button></ag-submit-button>\n" + '    <ag-cancel-button ng-click="closeDialog()"></ag-cancel-button>\n' + "  </div>\n" + "</form>\n");
    $templateCache.put("templates/users/show.html", '<div class="subnav">\n' + '  <ul class="nav nav-pills">\n' + '    <li><a class="list" href="#/examples/users"><i class="icon-list"></i> Users List</a></li>\n' + '    <li><a class="create" href="#/examples/users/create"><i class="icon-plus"></i> New user</a></li>\n' + "  </ul>\n" + "</div>\n" + "\n" + '<div class="content">\n' + '  <h2 class="page-header">Show user</h2>\n' + "\n" + '  <dl class="dl-horizontal">\n' + "    <dt>ID</dt>\n" + "    <dd>{{user.id}}</dd>\n" + "\n" + "    <dt>Email</dt>\n" + "    <dd>{{user.name}}</dd>\n" + "\n" + "    <dt>Login</dt>\n" + "    <dd>{{user.login}}</dd>\n" + "\n" + "    <dt>Birthday</dt>\n" + "    <dd>{{user.birthday | date}}</dd>\n" + "\n" + "    <dt>Paid</dt>\n" + "    <dd>{{user.paid}}</dd>\n" + "  </dl>\n" + "\n" + '  <div class="form-actions">\n' + '    <a href="#/examples/users/{{user.id}}/edit" class="btn"><i class="icon-edit"></i> Edit</a>\n' + '    <ag-delete-button when-confirmed="delete(user)"></ag-delete-button>\n' + "  </div>\n" + "</div>\n");
    $templateCache.put("templates/usersDialog/form.html", '<div class="modal-header">\n' + '  <button type="button" class="close" ng-click="closeEditDialog()" aria-hidden="true">&times;</button>\n' + "\n" + '  <h3 ng-show="createNew">Create New User</h3>\n' + '  <h3 ng-hide="createNew">Edit User {{item.name}}</h3>\n' + "</div>\n" + "\n" + '<div class="modal-body">\n' + '  <form name="editForm" novalidate class="form-horizontal no-margin"\n' + "        ag-server-validation-errors\n" + '        ng-submit="save(item)">\n' + "\n" + '    <div ag-field-group for="name">\n' + '      <label class="control-label">Name</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="name" placeholder="Enter Name"\n' + '               ng-model="item.name" autofocus required />\n' + '        <ag-validation-errors for="name" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="login">\n' + '      <label class="control-label">Login</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="login" placeholder="Enter Login"\n' + '               ng-model="item.login" autofocus required />\n' + '        <ag-validation-errors for="login" required="This field is required" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="allowance">\n' + '      <label class="control-label">Allowance</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" name="allowance" placeholder="Enter Allowance"\n' + '               ng-model="item.allowance" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="birthday">\n' + '      <label class="control-label">Birthday</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="text" bs-datepicker\n' + '               name="birthday" ng-model="item.birthday"\n' + '               ng-required="true" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div ag-field-group for="password,passwordConfirmation">\n' + '      <label class="control-label">Password</label>\n' + "\n" + '      <div class="controls">\n' + '        <input type="password" name="password" placeholder="Enter Password"\n' + '               ng-model="item.password" autofocus ng-required="item.newRecord()" ng-minlength="6" />\n' + '        <ag-validation-errors for="password"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters." />\n' + "      </div>\n" + "\n" + '      <div class="controls">\n' + '        <input type="password" name="passwordConfirmation" placeholder="Enter Password Confirmation"\n' + '               ng-model="item.passwordConfirmation" autofocus\n' + '               ng-required="item.newRecord()" match="item.password" ng-minlength="6" />\n' + '        <ag-validation-errors for="passwordConfirmation"\n' + '                          required="This field is required"\n' + '                          minlength="Password must be at least 6 characters."\n' + '                          mismatch="The password does not match the confirmation" />\n' + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="modal-footer">\n' + "      <ag-submit-button></ag-submit-button>\n" + '      <span ng-hide="createNew">\n' + '        <ag-delete-button when-confirmed="delete(item)"></ag-delete-button>\n' + "      </span>\n" + '      <ag-cancel-button ng-click="closeEditDialog()"></ag-cancel-button>\n' + "    </div>\n" + "  </form>\n" + "</div>\n");
    $templateCache.put("templates/usersDialog/index.html", '<section class="anchor">\n' + "  <h2>Users dialog based example</h2>\n" + "\n" + '  <div collapse="!showSearchForm">\n' + "    <div ng-include src=\"'templates/usersDialog/searchForm.html'\"></div>\n" + "  </div>\n" + "\n" + '  <div class="navbar navbar-grid">\n' + '    <div class="navbar-inner with-selected-pointer with-grid-options">\n' + '      <ul class="nav">\n' + '        <li class="dropdown selected-actions">\n' + '          <a data-toggle="dropdown" class="dropdown-toggle" href="#" style="padding-left: 2px">\n' + '            <i class="icon-selected-pointer"></i> Actions <b class="caret"></b>\n' + "          </a>\n" + '          <ul class="dropdown-menu">\n' + '            <li><a href=""><i class="icon-eye-open"></i> View</a></li>\n' + '            <li><a href=""><i class="icon-external-link"></i> Export</a></li>\n' + '            <li class="divider"></li>\n' + '            <li><a href=""><i class="icon-trash"></i> Delete</a></li>\n' + "          </ul>\n" + "        </li>\n" + '        <li class="divider-vertical"></li>\n' + "        <li>\n" + '          <a href="" class="create-button" ng-click="createItem()">\n' + '            <i class="icon-edit"></i>New\n' + "          </a>\n" + "        </li>\n" + "      </ul>\n" + "\n" + '      <ul class="nav pull-right">\n' + "        <li>\n" + '          <a href="" title="search screen"\n' + '             ng-click="showSearchForm = !showSearchForm"><i class="icon-search"></i></a>\n' + "        </li>\n" + "      </ul>\n" + "\n" + '      <form class="navbar-search pull-right" ng-submit="usersGrid.search(filters)">\n' + '        <input type="text" value="" placeholder="quick search" class="search-query span2" style="width: 150px;"\n' + '               ng-model="filters.quickSearch"/>\n' + "      </form>\n" + "    </div>\n" + "  </div>\n" + "\n" + '  <div ag-grid="gridOptions"\n' + '       ag-grid-name="usersGrid"></div>\n' + "</section>\n");
    $templateCache.put("templates/usersDialog/searchForm.html", '<div class="well" ng-controller="usersDialog.SearchFormCtrl">\n' + '  <form name="searchForm" ag-search-form="usersGrid"\n' + '        class="form-horizontal form-multi-column no-margin">\n' + "\n" + '    <div class="row-fluid">\n' + '      <div class="control-group span6">\n' + '        <label class="control-label">Name</label>\n' + '        <div class="controls">\n' + '          <input type="text" ng-model="filters.name" />\n' + "        </div>\n" + "      </div>\n" + "\n" + '      <div class="control-group span6">\n' + '        <label class="control-label">Allowance</label>\n' + '        <div class="controls">\n' + '          <input type="text" ng-model="filters.allowance">\n' + "        </div>\n" + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="row-fluid">\n' + '      <div class="control-group span6">\n' + '        <label class="control-label">Birthday from</label>\n' + '        <div class="controls">\n' + '          <input type="text" bs-datepicker ng-model="filters.birthday.from" />\n' + "        </div>\n" + "      </div>\n" + "\n" + '      <div class="control-group span6">\n' + '        <label class="control-label">Birthday to</label>\n' + '        <div class="controls">\n' + '          <input type="text" bs-datepicker ng-model="filters.birthday.to" />\n' + "        </div>\n" + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="row-fluid">\n' + '      <div class="control-group span6">\n' + '        <label class="control-label">Org</label>\n' + '        <div class="controls">\n' + '          <div class="input-append">\n' + "\n" + '            <ag-select2 select-ajax-url="/api/orgs.json"\n' + '                        select-minimum-input-length="3"\n' + '                        select-ajax-quiet-millis="300"\n' + '                        ng-model="filters.org">\n' + '              <table ag-select2-result class="table table-condensed org-select-result">\n' + "                <tr>\n" + "                  <td>{{item.num}}</td>\n" + "                  <td>{{item.name}}</td>\n" + "                </tr>\n" + "              </table>\n" + "            </ag-select2>\n" + "\n" + "          </div>\n" + "        </div>\n" + "      </div>\n" + "\n" + '      <div class="control-group span6 foo">\n' + '        <label class="control-label">Type</label>\n' + "\n" + '        <div class="controls">\n' + '          <input type="text" ui-select2="userTypeSelectOptions"\n' + '                 name="contactType" ng-model="filters.contact.type" />\n' + "        </div>\n" + "      </div>\n" + "    </div>\n" + "\n" + '    <div class="pull-right">\n' + "      <ag-search-button></ag-search-button>\n" + "      <ag-reset-search-button></ag-reset-search-button>\n" + "    </div>\n" + "  </form>\n" + "</div>\n");
} ]);

(function() {
    var SidebarCtrl;
    SidebarCtrl = function() {
        SidebarCtrl.$inject = [ "$rootScope", "$scope", "$location", "$routeParams", "scrollTo" ];
        function SidebarCtrl($rootScope, $scope, $location, $routeParams, scrollTo) {
            $rootScope.$on("$routeChangeSuccess", function() {
                var id;
                id = $routeParams.scrollTo;
                return scrollTo(id);
            });
            $scope.section = function() {
                var path, section;
                path = $location.path().replace(/^\/+/, "");
                section = path.split("/")[0];
                switch (section) {
                  case "":
                    return "angleGrinder";

                  case "documentation":
                    return "documentation";

                  case "examples":
                    return "examples";

                  default:
                    return "angleGrinder";
                }
            };
        }
        return SidebarCtrl;
    }();
    angular.module("angleGrinder").controller("SidebarCtrl", SidebarCtrl);
}).call(this);

(function() {
    var IndexCtrl;
    IndexCtrl = function() {
        IndexCtrl.$inject = [ "$scope", "sampleData", "editDialog" ];
        function IndexCtrl($scope, sampleData, editDialog) {
            var _this = this;
            this.data = sampleData.generate(100);
            $scope.data = this.data;
            $scope.gridOptions = {
                data: this.data,
                datatype: "local",
                colModel: this.gridColumns(),
                sortname: "id"
            };
            $scope.editItem = function(id) {
                var item, self;
                item = _this.findItemById(id);
                item.persisted = function() {
                    return true;
                };
                item.save = function(callback) {
                    return callback.success(this);
                };
                self = _this;
                item["delete"] = function(callback) {
                    self.deleteItemById(id);
                    return callback.success(this);
                };
                return editDialog.open("templates/gridExample/form.html", item, $scope.grid);
            };
            $scope.createItem = function() {
                var item;
                item = {};
                item.persisted = function() {
                    return false;
                };
                item.save = function(callback) {
                    var generateId;
                    generateId = function() {
                        return new Date().getTime();
                    };
                    item.id = generateId();
                    return callback.success(this);
                };
                return editDialog.open("templates/gridExample/form.html", item, $scope.grid).then(function(item) {
                    return _this.data.push(item);
                });
            };
            $scope.deleteItem = function(id) {
                var item;
                item = _this.deleteItemById(id);
                return $scope.grid.removeRow(item.id);
            };
        }
        IndexCtrl.prototype.findItemById = function(id) {
            id = parseInt(id);
            return _.find(this.data, function(row) {
                return row.id === id;
            });
        };
        IndexCtrl.prototype.deleteItemById = function(id) {
            var row;
            row = this.findItemById(id);
            if (row != null) {
                this.data = _.reject(this.data, function(item) {
                    return item.id === row.id;
                });
                return row;
            }
        };
        IndexCtrl.prototype.gridColumns = function() {
            return [ {
                name: "id",
                label: "Inv No",
                width: 80,
                sorttype: "int"
            }, {
                name: "customer.name",
                label: "Customer",
                formatter: "editActionLink"
            }, {
                name: "invoiceDate",
                label: "Date"
            }, {
                name: "note",
                label: "Note"
            }, {
                name: "complete",
                label: "Complete"
            } ];
        };
        return IndexCtrl;
    }();
    angular.module("angleGrinder").controller("gridExample.ListCtrl", IndexCtrl);
}).call(this);

(function() {
    var IndexCtrl;
    IndexCtrl = function() {
        IndexCtrl.$inject = [ "$scope", "$log", "$dialog", "$filter", "confirmationDialog", "editDialog", "Users", "pathWithContext" ];
        function IndexCtrl($scope, $log, $dialog, $filter, confirmationDialog, editDialog, Users, pathWithContext) {
            this.$filter = $filter;
            $scope.showSearchForm = true;
            $scope.gridOptions = {
                url: pathWithContext("/api/users"),
                colModel: this.gridColumns(),
                rowNum: 10,
                sortname: "id",
                loadError: function() {
                    return $log.error("loadError", arguments);
                }
            };
            $scope.editItem = function(id) {
                var promise;
                promise = Users.get({
                    id: id
                }).$promise;
                return editDialog.open(pathWithContext("templates/usersDialog/form.html"), promise, $scope.usersGrid);
            };
            $scope.createItem = function() {
                var user;
                user = new Users();
                return editDialog.open(pathWithContext("templates/usersDialog/form.html"), user, $scope.usersGrid);
            };
            $scope.deleteItem = function(id) {
                return confirmationDialog.open().then(function(confirmed) {
                    var promise;
                    if (!confirmed) {
                        return;
                    }
                    promise = Users["delete"]({
                        id: id
                    }).$promise;
                    return promise.then(function(response) {
                        return $scope.usersGrid.removeRow(response.id);
                    });
                });
            };
        }
        IndexCtrl.prototype.gridColumns = function() {
            var _this = this;
            return [ {
                name: "id",
                width: 50,
                formatter: "editActionLink"
            }, {
                name: "login",
                label: "Login",
                formatter: "editActionLink"
            }, {
                name: "name",
                label: "Name",
                formatter: "editActionLink"
            }, {
                name: "allowance",
                label: "Allowance"
            }, {
                name: "birthday",
                label: "Birthday",
                formatter: function(cellVal) {
                    return _this.$filter("date")(cellVal);
                }
            }, {
                name: "paid",
                label: "Paid"
            } ];
        };
        return IndexCtrl;
    }();
    angular.module("angleGrinder").controller("usersDialog.ListCtrl", IndexCtrl);
}).call(this);

(function() {
    var SearchFormCtrl;
    SearchFormCtrl = function() {
        SearchFormCtrl.$inject = [ "$scope" ];
        function SearchFormCtrl($scope) {
            $scope.userTypeSelectOptions = {
                multiple: true,
                simple_tags: true,
                tags: [ "admin", "customer" ]
            };
        }
        return SearchFormCtrl;
    }();
    angular.module("angleGrinder").controller("usersDialog.SearchFormCtrl", SearchFormCtrl);
}).call(this);

(function() {
    var ListCtrl;
    ListCtrl = function() {
        ListCtrl.$inject = [ "$scope", "$location", "$filter", "$dialog", "confirmationDialog", "Users", "pathWithContext" ];
        function ListCtrl($scope, $location, $filter, $dialog, confirmationDialog, Users, pathWithContext) {
            this.$filter = $filter;
            $scope.gridOptions = {
                url: pathWithContext("/api/users"),
                colModel: this.gridColumns(),
                rowNum: 10,
                sortname: "id",
                multiselect: true
            };
            $scope.showItem = function(id) {
                return $location.path("/users/" + id);
            };
            $scope.editItem = function(id) {
                return $location.path("/users/" + id + "/edit");
            };
            $scope.deleteItem = function(id) {
                return confirmationDialog.open().then(function(confirmed) {
                    var promise;
                    if (!confirmed) {
                        return;
                    }
                    promise = Users["delete"]({
                        id: id
                    }).$promise;
                    return promise.then(function(response) {
                        return $scope.usersGrid.removeRow(response.id);
                    });
                });
            };
            $scope.massUpdate = function() {
                var dialog, userIds;
                userIds = $scope.usersGrid.getSelectedRowIds();
                if (userIds.length === 0) {
                    return;
                }
                dialog = $dialog.dialog({
                    backdropFade: false,
                    dialogFade: false,
                    resolve: {
                        userIds: function() {
                            return userIds;
                        },
                        usersGrid: function() {
                            return $scope.usersGrid;
                        }
                    }
                });
                return dialog.open(pathWithContext("/templates/users/massUpdateForm.html"), "users.MassUpdateFormCtrl");
            };
        }
        ListCtrl.prototype.gridColumns = function() {
            var showActionLink, _this = this;
            showActionLink = function(cellVal, options, rowdata) {
                return '<a href="#/examples/users/' + rowdata.id + '">' + cellVal + "</a>";
            };
            return [ {
                name: "id",
                width: 50,
                formatter: showActionLink
            }, {
                name: "login",
                label: "Login",
                formatter: showActionLink
            }, {
                name: "name",
                label: "Name",
                formatter: showActionLink
            }, {
                name: "allowance",
                label: "Allowance"
            }, {
                name: "birthday",
                label: "Birthday",
                formatter: function(cellVal) {
                    return _this.$filter("date")(cellVal);
                }
            }, {
                name: "paid",
                label: "Paid"
            } ];
        };
        return ListCtrl;
    }();
    angular.module("angleGrinder").controller("users.ListCtrl", ListCtrl);
}).call(this);

(function() {
    var ShowCtrl;
    ShowCtrl = function() {
        ShowCtrl.$inject = [ "$scope", "$location", "user" ];
        function ShowCtrl($scope, $location, user) {
            $scope.user = user;
            $scope["delete"] = function(user) {
                var onSuccess;
                onSuccess = function() {
                    return $location.path("/users");
                };
                return user["delete"]({
                    success: onSuccess
                });
            };
        }
        return ShowCtrl;
    }();
    angular.module("angleGrinder").controller("users.ShowCtrl", ShowCtrl);
}).call(this);

(function() {
    var FormCtrl;
    FormCtrl = function() {
        FormCtrl.$inject = [ "$scope", "$location", "user" ];
        function FormCtrl($scope, $location, user) {
            $scope.user = user;
            $scope.save = function(user) {
                var onError, onSuccess;
                if ($scope.editForm.$invalid) {
                    return;
                }
                onSuccess = function(user) {
                    return $location.path("/users/" + user.id);
                };
                onError = function(response) {
                    var errors;
                    if (response.status === 422) {
                        errors = response.data.errors;
                        return $scope.editForm.$serverError = errors[user.resourceName()];
                    }
                };
                return user.save({
                    success: onSuccess,
                    error: onError
                });
            };
            $scope["delete"] = function(user) {
                var onSuccess;
                onSuccess = function() {
                    return $location.path("/users");
                };
                return user["delete"]({
                    success: onSuccess
                });
            };
        }
        return FormCtrl;
    }();
    angular.module("angleGrinder").controller("users.FormCtrl", FormCtrl);
}).call(this);

(function() {
    var MassUpdateFormCtrl;
    MassUpdateFormCtrl = function() {
        MassUpdateFormCtrl.$inject = [ "$scope", "Users", "userIds", "dialog", "usersGrid" ];
        function MassUpdateFormCtrl($scope, Users, userIds, dialog, usersGrid) {
            $scope.users = {
                allowance: 0
            };
            $scope.save = function(users) {
                var promise;
                promise = Users.massUpdate({
                    ids: userIds,
                    data: users
                }).$promise;
                return promise.then(function() {
                    usersGrid.reload();
                    return dialog.close();
                });
            };
            $scope.closeDialog = function() {
                return dialog.close();
            };
        }
        return MassUpdateFormCtrl;
    }();
    angular.module("angleGrinder").controller("users.MassUpdateFormCtrl", MassUpdateFormCtrl);
}).call(this);