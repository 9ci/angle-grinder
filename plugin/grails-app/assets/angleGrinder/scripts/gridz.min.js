(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else if (typeof exports === "object") {
        factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    "use strict";
    var locInfo = {
        "name": "English (United States)",
        "nameEnglish": "English (United States)",
        "isRTL": false,
        "defaults": {
            "recordtext": "View {0} - {1} of {2}",
            "emptyrecords": "No records to view",
            "loadtext": "Loading...",
            "pgtext": "Page {0} of {1}",
            "pgfirst": "First Page",
            "pglast": "Last Page",
            "pgnext": "Next Page",
            "pgprev": "Previous Page",
            "pgrecs": "Records per Page",
            "showhide": "Toggle Expand Collapse Grid",
            "savetext": "Saving..."
        },
        "search": {
            "caption": "Search...",
            "Find": "Find",
            "Reset": "Reset",
            "odata": [ {
                "oper": "eq",
                "text": "equal"
            }, {
                "oper": "ne",
                "text": "not equal"
            }, {
                "oper": "lt",
                "text": "less"
            }, {
                "oper": "le",
                "text": "less or equal"
            }, {
                "oper": "gt",
                "text": "greater"
            }, {
                "oper": "ge",
                "text": "greater or equal"
            }, {
                "oper": "bw",
                "text": "begins with"
            }, {
                "oper": "bn",
                "text": "does not begin with"
            }, {
                "oper": "in",
                "text": "is in"
            }, {
                "oper": "ni",
                "text": "is not in"
            }, {
                "oper": "ew",
                "text": "ends with"
            }, {
                "oper": "en",
                "text": "does not end with"
            }, {
                "oper": "cn",
                "text": "contains"
            }, {
                "oper": "nc",
                "text": "does not contain"
            }, {
                "oper": "nu",
                "text": "is null"
            }, {
                "oper": "nn",
                "text": "is not null"
            } ],
            "groupOps": [ {
                "op": "AND",
                "text": "all"
            }, {
                "op": "OR",
                "text": "any"
            } ],
            "addGroupTitle": "Add subgroup",
            "deleteGroupTitle": "Delete group",
            "addRuleTitle": "Add rule",
            "deleteRuleTitle": "Delete rule",
            "operandTitle": "Click to select search operation.",
            "resetTitle": "Reset Search Value"
        },
        "edit": {
            "addCaption": "Add Record",
            "editCaption": "Edit Record",
            "bSubmit": "Submit",
            "bCancel": "Cancel",
            "bClose": "Close",
            "saveData": "Data has been changed! Save changes?",
            "bYes": "Yes",
            "bNo": "No",
            "bExit": "Cancel",
            "msg": {
                "required": "Field is required",
                "number": "Please, enter valid number",
                "minValue": "value must be greater than or equal to ",
                "maxValue": "value must be less than or equal to",
                "email": "is not a valid e-mail",
                "integer": "Please, enter valid integer value",
                "date": "Please, enter valid date value",
                "url": "is not a valid URL. Prefix required ('http://' or 'https://')",
                "nodefined": " is not defined!",
                "novalue": " return value is required!",
                "customarray": "Custom function should return array!",
                "customfcheck": "Custom function should be present in case of custom checking!"
            }
        },
        "view": {
            "caption": "View Record",
            "bClose": "Close"
        },
        "del": {
            "caption": "Delete",
            "msg": "Delete selected record(s)?",
            "bSubmit": "Delete",
            "bCancel": "Cancel"
        },
        "nav": {
            "edittext": "",
            "edittitle": "Edit selected row",
            "addtext": "",
            "addtitle": "Add new row",
            "deltext": "",
            "deltitle": "Delete selected row",
            "searchtext": "",
            "searchtitle": "Find records",
            "refreshtext": "",
            "refreshtitle": "Reload Grid",
            "alertcap": "Warning",
            "alerttext": "Please, select row",
            "viewtext": "",
            "viewtitle": "View selected row",
            "savetext": "",
            "savetitle": "Save row",
            "canceltext": "",
            "canceltitle": "Cancel row editing"
        },
        "col": {
            "caption": "Select columns",
            "bSubmit": "Ok",
            "bCancel": "Cancel"
        },
        "errors": {
            "errcap": "Error",
            "nourl": "No url is set",
            "norecords": "No records to process",
            "model": "Length of colNames <> colModel!"
        },
        "formatter": {
            "integer": {
                "thousandsSeparator": ",",
                "defaultValue": "0"
            },
            "number": {
                "decimalSeparator": ".",
                "thousandsSeparator": ",",
                "decimalPlaces": 2,
                "defaultValue": "0.00"
            },
            "currency": {
                "decimalSeparator": ".",
                "thousandsSeparator": ",",
                "decimalPlaces": 2,
                "prefix": "",
                "suffix": "",
                "defaultValue": "0.00"
            },
            "date": {
                "dayNames": [ "Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                "monthNames": [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                "AmPm": [ "am", "pm", "AM", "PM" ],
                "S": function(j) {
                    var ending = [ "st", "nd", "rd", "th" ];
                    return j < 11 || j > 13 ? ending[Math.min((j - 1) % 10, 3)] : "th";
                },
                "srcformat": "Y-m-d",
                "newformat": "n/j/Y",
                "masks": {
                    "ShortDate": "n/j/Y",
                    "LongDate": "l, F d, Y",
                    "FullDateTime": "l, F d, Y g:i:s A",
                    "MonthDay": "F d",
                    "ShortTime": "g:i A",
                    "LongTime": "g:i:s A",
                    "YearMonth": "F, Y"
                }
            }
        }
    };
    $.jgrid = $.jgrid || {};
    $.extend(true, $.jgrid, {
        "defaults": {
            "locale": "en-US"
        },
        "locales": {
            "en-US": locInfo
        }
    });
});

(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery" ], factory);
    } else if (typeof exports === "object") {
        factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    "use strict";
    var englishLanguageDefaults = {
        "name": "English (United States)",
        "nameEnglish": "English (United States)",
        "isRTL": false,
        "defaults": {
            "recordtext": "View {0} - {1} of {2}",
            "emptyrecords": "No records to view",
            "loadtext": "Loading...",
            "pgtext": "Page {0} of {1}",
            "pgfirst": "First Page",
            "pglast": "Last Page",
            "pgnext": "Next Page",
            "pgprev": "Previous Page",
            "pgrecs": "Records per Page",
            "showhide": "Toggle Expand Collapse Grid",
            "savetext": "Saving..."
        },
        "search": {
            "caption": "Search...",
            "Find": "Find",
            "Reset": "Reset",
            "odata": [ {
                "oper": "eq",
                "text": "equal"
            }, {
                "oper": "ne",
                "text": "not equal"
            }, {
                "oper": "lt",
                "text": "less"
            }, {
                "oper": "le",
                "text": "less or equal"
            }, {
                "oper": "gt",
                "text": "greater"
            }, {
                "oper": "ge",
                "text": "greater or equal"
            }, {
                "oper": "bw",
                "text": "begins with"
            }, {
                "oper": "bn",
                "text": "does not begin with"
            }, {
                "oper": "in",
                "text": "is in"
            }, {
                "oper": "ni",
                "text": "is not in"
            }, {
                "oper": "ew",
                "text": "ends with"
            }, {
                "oper": "en",
                "text": "does not end with"
            }, {
                "oper": "cn",
                "text": "contains"
            }, {
                "oper": "nc",
                "text": "does not contain"
            }, {
                "oper": "nu",
                "text": "is null"
            }, {
                "oper": "nn",
                "text": "is not null"
            } ],
            "groupOps": [ {
                "op": "AND",
                "text": "all"
            }, {
                "op": "OR",
                "text": "any"
            } ],
            "addGroupTitle": "Add subgroup",
            "deleteGroupTitle": "Delete group",
            "addRuleTitle": "Add rule",
            "deleteRuleTitle": "Delete rule",
            "operandTitle": "Click to select search operation.",
            "resetTitle": "Reset Search Value"
        },
        "edit": {
            "addCaption": "Add Record",
            "editCaption": "Edit Record",
            "bSubmit": "Submit",
            "bCancel": "Cancel",
            "bClose": "Close",
            "saveData": "Data has been changed! Save changes?",
            "bYes": "Yes",
            "bNo": "No",
            "bExit": "Cancel",
            "msg": {
                "required": "Field is required",
                "number": "Please, enter valid number",
                "minValue": "value must be greater than or equal to ",
                "maxValue": "value must be less than or equal to",
                "email": "is not a valid e-mail",
                "integer": "Please, enter valid integer value",
                "date": "Please, enter valid date value",
                "url": "is not a valid URL. Prefix required ('http://' or 'https://')",
                "nodefined": " is not defined!",
                "novalue": " return value is required!",
                "customarray": "Custom function should return array!",
                "customfcheck": "Custom function should be present in case of custom checking!"
            }
        },
        "view": {
            "caption": "View Record",
            "bClose": "Close"
        },
        "del": {
            "caption": "Delete",
            "msg": "Delete selected record(s)?",
            "bSubmit": "Delete",
            "bCancel": "Cancel"
        },
        "nav": {
            "edittext": "",
            "edittitle": "Edit selected row",
            "addtext": "",
            "addtitle": "Add new row",
            "deltext": "",
            "deltitle": "Delete selected row",
            "searchtext": "",
            "searchtitle": "Find records",
            "refreshtext": "",
            "refreshtitle": "Reload Grid",
            "alertcap": "Warning",
            "alerttext": "Please, select row",
            "viewtext": "",
            "viewtitle": "View selected row",
            "savetext": "",
            "savetitle": "Save row",
            "canceltext": "",
            "canceltitle": "Cancel row editing"
        },
        "col": {
            "caption": "Select columns",
            "bSubmit": "Ok",
            "bCancel": "Cancel"
        },
        "errors": {
            "errcap": "Error",
            "nourl": "No url is set",
            "norecords": "No records to process",
            "model": "Length of colNames <> colModel!"
        },
        "formatter": {
            "integer": {
                "thousandsSeparator": ",",
                "defaultValue": "0"
            },
            "number": {
                "decimalSeparator": ".",
                "thousandsSeparator": ",",
                "decimalPlaces": 2,
                "defaultValue": "0.00"
            },
            "currency": {
                "decimalSeparator": ".",
                "thousandsSeparator": ",",
                "decimalPlaces": 2,
                "prefix": "",
                "suffix": "",
                "defaultValue": "0.00"
            },
            "date": {
                "dayNames": [ "Sun", "Mon", "Tue", "Wed", "Thr", "Fri", "Sat", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                "monthNames": [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                "AmPm": [ "am", "pm", "AM", "PM" ],
                "S": function(j) {
                    var ending = [ "st", "nd", "rd", "th" ];
                    return j < 11 || j > 13 ? ending[Math.min((j - 1) % 10, 3)] : "th";
                },
                "srcformat": "Y-m-d",
                "newformat": "n/j/Y",
                "masks": {
                    "ShortDate": "n/j/Y",
                    "LongDate": "l, F d, Y",
                    "FullDateTime": "l, F d, Y g:i:s A",
                    "MonthDay": "F d",
                    "ShortTime": "g:i A",
                    "LongTime": "g:i:s A",
                    "YearMonth": "F, Y"
                }
            }
        }
    };
    $.jgrid = $.jgrid || {};
    var jgrid = $.jgrid;
    jgrid.locales = jgrid.locales || {};
    var locales = jgrid.locales;
    var COMPONENT_NAMES = {
        "GRID_BOX_DIV": 0,
        "GRID_OVERLAY_DIV": 1,
        "LOADING_DIV": 2,
        "DIALOG_ALERT_DIV": 3,
        "DIALOG_SEARCH_DIV": 4,
        "DIALOG_VIEW_DIV": 5,
        "DIALOG_EDIT_DIV": 6,
        "DIALOG_DELETE_DIV": 7,
        "GRID_VIEW_DIV": 8,
        "TITLE_BAR_DIV": 9,
        "UPPER_TOOLBAR_DIV": 10,
        "TOP_PAGER_DIV": 11,
        "HEADER_DIV": 12,
        "HEADER_BOX_DIV": 13,
        "HEADER_TABLE": 14,
        "HEADER_COLS_ROW": 15,
        "HEADER_COLS": 16,
        "HEADER_ROWS": 47,
        "HEADER_TH": 48,
        "HEADER_SORTABLE_DIV": 49,
        "HEADER_RESIZABLE_SPAN": 50,
        "HEADER_SELECT_ALL_ROWS_CHECKBOX": 45,
        "SEARCH_TOOLBAR": 17,
        "BODY_DIV": 18,
        "BODY_SCROLL_FULL_DIV": 19,
        "BODY_SCROLL_TOP_DIV": 20,
        "BODY_TABLE": 21,
        "GRID": 21,
        "BODY_COLS_ROW": 22,
        "BODY_COLS": 23,
        "BODY_DATA_ROWS": 24,
        "FOOTER_DIV": 25,
        "FOOTER_BOX_DIV": 26,
        "FOOTER_TABLE": 27,
        "FOOTER_DATA_ROWS": 28,
        "BOTTOM_TOOLBAR_DIV": 29,
        "FROZEN_HEADER_DIV": 30,
        "FROZEN_HEADER_TABLE": 31,
        "FROZEN_HEADER_COLS_ROW": 32,
        "FROZEN_HEADER_COLS": 33,
        "FROZEN_SEARCH_TOOLBAR": 34,
        "FROZEN_FOOTER_DIV": 35,
        "FROZEN_FOOTER_TABLE": 36,
        "FROZEN_FOOTER_DATA_ROWS": 37,
        "FROZEN_BODY_DIV": 38,
        "FROZEN_BODY_TABLE": 39,
        "FROZEN_BODY_COLS_ROW": 40,
        "FROZEN_BODY_COLS": 41,
        "FROZEN_BODY_DATA_ROWS": 42,
        "COLUMN_RESIZER_DIV": 43,
        "BOTTOM_PAGER_DIV": 44,
        "SEARCH_OPERATION_MENU_UL": 46
    };
    if (jgrid.defaults == null || $.isEmptyObject(locales) || locales["en-US"] === undefined) {
        if (locales["en-US"] === undefined) {
            $.extend(true, jgrid, {
                "locales": {
                    "en-US": englishLanguageDefaults
                }
            });
        }
        jgrid.defaults = jgrid.defaults || {};
        if (jgrid.defaults.locale === undefined) {
            jgrid.defaults.locale = "en-US";
        }
    }
    jgrid.defaults = jgrid.defaults || {};
    var defaults = jgrid.defaults;
    $.extend(true, jgrid, {
        "version": "4.13.3",
        "productName": "free jqGrid",
        "defaults": {},
        "search": {},
        "edit": {},
        "view": {},
        "del": {},
        "nav": {},
        "col": {},
        "errors": {},
        "formatter": {
            "unused": ""
        },
        "icons": {
            "jQueryUI": {
                "common": "ui-icon",
                "pager": {
                    "first": "ui-icon-seek-first",
                    "prev": "ui-icon-seek-prev",
                    "next": "ui-icon-seek-next",
                    "last": "ui-icon-seek-end"
                },
                "sort": {
                    "asc": "ui-icon-triangle-1-n",
                    "desc": "ui-icon-triangle-1-s"
                },
                "gridMinimize": {
                    "visible": "ui-icon-circle-triangle-n",
                    "hidden": "ui-icon-circle-triangle-s"
                },
                "nav": {
                    "edit": "ui-icon-pencil",
                    "add": "ui-icon-plus",
                    "del": "ui-icon-trash",
                    "search": "ui-icon-search",
                    "refresh": "ui-icon-refresh",
                    "view": "ui-icon-document",
                    "save": "ui-icon-disk",
                    "cancel": "ui-icon-cancel",
                    "newbutton": "ui-icon-newwin"
                },
                "actions": {
                    "edit": "ui-icon-pencil",
                    "del": "ui-icon-trash",
                    "save": "ui-icon-disk",
                    "cancel": "ui-icon-cancel"
                },
                "form": {
                    "close": "ui-icon-closethick",
                    "prev": "ui-icon-triangle-1-w",
                    "next": "ui-icon-triangle-1-e",
                    "save": "ui-icon-disk",
                    "undo": "ui-icon-close",
                    "del": "ui-icon-scissors",
                    "cancel": "ui-icon-cancel",
                    "resizableLtr": "ui-resizable-se ui-icon ui-icon-gripsmall-diagonal-se"
                },
                "search": {
                    "search": "ui-icon-search",
                    "reset": "ui-icon-arrowreturnthick-1-w",
                    "query": "ui-icon-comment"
                },
                "subgrid": {
                    "plus": "ui-icon-plus",
                    "minus": "ui-icon-minus",
                    "openLtr": "ui-icon-carat-1-sw",
                    "openRtl": "ui-icon-carat-1-se"
                },
                "grouping": {
                    "plus": "ui-icon-circlesmall-plus",
                    "minus": "ui-icon-circlesmall-minus"
                },
                "treeGrid": {
                    "minus": "ui-icon-triangle-1-s",
                    "leaf": "ui-icon-radio-off",
                    "plusLtr": "ui-icon-triangle-1-e",
                    "plusRtl": "ui-icon-triangle-1-w"
                }
            },
            "fontAwesome": {
                "common": "fa",
                "pager": {
                    "common": "fa-fw",
                    "first": "fa-step-backward",
                    "prev": "fa-backward",
                    "next": "fa-forward",
                    "last": "fa-step-forward"
                },
                "sort": {
                    "common": "fa-lg",
                    "asc": "fa-sort-asc",
                    "desc": "fa-sort-desc"
                },
                "gridMinimize": {
                    "visible": "fa-chevron-circle-up",
                    "hidden": "fa-chevron-circle-down"
                },
                "nav": {
                    "common": "fa-lg fa-fw",
                    "edit": "fa-pencil",
                    "add": "fa-plus",
                    "del": "fa-trash-o",
                    "search": "fa-search",
                    "refresh": "fa-refresh",
                    "view": "fa-file-o",
                    "save": "fa-floppy-o",
                    "cancel": "fa-ban",
                    "newbutton": "fa-external-link"
                },
                "actions": {
                    "common": "fa-fw",
                    "edit": "fa-pencil",
                    "del": "fa-trash-o",
                    "save": "fa-floppy-o",
                    "cancel": "fa-ban"
                },
                "form": {
                    "close": "fa-times",
                    "prev": "fa-caret-left",
                    "next": "fa-caret-right",
                    "save": "fa-floppy-o",
                    "undo": "fa-undo",
                    "del": "fa-trash-o",
                    "cancel": "fa-ban",
                    "resizableLtr": "fa-rss fa-rotate-270"
                },
                "search": {
                    "search": "fa-search",
                    "reset": "fa-undo",
                    "query": "fa-comments-o"
                },
                "subgrid": {
                    "common": "fa-fw",
                    "plus": "fa-plus",
                    "minus": "fa-minus",
                    "openLtr": "fa-reply fa-rotate-180",
                    "openRtl": "fa-share fa-rotate-180"
                },
                "grouping": {
                    "common": "fa-fw",
                    "plus": "fa-plus-square-o",
                    "minus": "fa-minus-square-o"
                },
                "treeGrid": {
                    "common": "fa-fw",
                    "minus": "fa-lg fa-sort-desc",
                    "leaf": "fa-dot-circle-o",
                    "plusLtr": "fa-lg fa-caret-right",
                    "plusRtl": "fa-lg fa-caret-left"
                }
            },
            "glyph": {
                "common": "glyphicon",
                "pager": {
                    "common": "",
                    "first": "glyphicon-step-backward",
                    "prev": "glyphicon-backward",
                    "next": "glyphicon-forward",
                    "last": "glyphicon-step-forward"
                },
                "sort": {
                    "common": "",
                    "asc": "glyphicon-triangle-top",
                    "desc": "glyphicon-triangle-bottom"
                },
                "gridMinimize": {
                    "visible": "glyphicon-circle-arrow-up",
                    "hidden": "glyphicon-circle-arrow-down"
                },
                "nav": {
                    "common": "",
                    "edit": "glyphicon-edit",
                    "add": "glyphicon-plus",
                    "del": "glyphicon-trash",
                    "search": "glyphicon-search",
                    "refresh": "glyphicon-refresh",
                    "view": "glyphicon-file",
                    "save": "glyphicon-save",
                    "cancel": "glyphicon-ban-circle",
                    "newbutton": "glyphicon-new-window"
                },
                "actions": {
                    "common": "",
                    "edit": "glyphicon-edit",
                    "del": "glyphicon-trash",
                    "save": "glyphicon-save",
                    "cancel": "glyphicon-ban-circle"
                },
                "form": {
                    "close": "glyphicon-remove-circle",
                    "prev": "glyphicon-step-backward",
                    "next": "glyphicon-step-forward",
                    "save": "glyphicon-save",
                    "undo": "glyphicon-repeat",
                    "del": "glyphicon-trash",
                    "cancel": "glyphicon-ban-circle",
                    "resizableLtr": "glyphicon-import"
                },
                "search": {
                    "search": "glyphicon-search",
                    "reset": "glyphicon-repeat",
                    "query": "glyphicon-cog"
                },
                "subgrid": {
                    "common": "",
                    "plus": "glyphicon-zoom-in",
                    "minus": "glyphicon-zoom-out",
                    "openLtr": "glyphicon-indent-left",
                    "openRtl": "glyphicon-indent-left"
                },
                "grouping": {
                    "common": "",
                    "plus": "glyphicon-expand",
                    "minus": "glyphicon-collapse-down"
                },
                "treeGrid": {
                    "common": "",
                    "minus": "glyphicon-triangle-bottom",
                    "leaf": "glyphicon-record",
                    "plusLtr": "glyphicon-triangle-right",
                    "plusRtl": "glyphicon-triangle-left"
                }
            }
        },
        "guiStyles": {
            "jQueryUI": {
                "gBox": "ui-jqgrid-jquery-ui ui-widget ui-widget-content ui-corner-all",
                "gView": "",
                "overlay": "ui-widget-overlay",
                "loading": "ui-state-default ui-state-active",
                "hDiv": "ui-state-default ui-corner-top",
                "hTable": "",
                "colHeaders": "ui-state-default",
                "states": {
                    "select": "ui-state-highlight",
                    "disabled": "ui-state-disabled ui-jqgrid-disablePointerEvents",
                    "hover": "ui-state-hover",
                    "error": "ui-state-error",
                    "active": "ui-state-active",
                    "textOfClickable": "ui-state-default"
                },
                "dialog": {
                    "header": "ui-widget-header ui-dialog-titlebar ui-corner-all ui-helper-clearfix",
                    "window": "ui-jqgrid-jquery-ui ui-widget ui-widget-content ui-corner-all ui-front",
                    "document": "",
                    "subdocument": "",
                    "body": "",
                    "footer": "",
                    "content": "ui-widget-content",
                    "hr": "ui-widget-content",
                    "closeButton": "ui-corner-all",
                    "fmButton": "ui-state-default",
                    "dataField": "ui-widget-content ui-corner-all",
                    "viewLabel": "ui-widget-content",
                    "viewData": "ui-widget-content",
                    "leftCorner": "ui-corner-left",
                    "rightCorner": "ui-corner-right",
                    "defaultCorner": "ui-corner-all"
                },
                "filterToolbar": {
                    "dataField": "ui-widget-content"
                },
                "subgrid": {
                    "thSubgrid": "ui-state-default",
                    "rowSubTable": "ui-widget-content",
                    "row": "ui-widget-content",
                    "tdStart": "",
                    "tdWithIcon": "ui-widget-content",
                    "buttonDiv": "",
                    "button": "",
                    "tdData": "ui-widget-content",
                    "legacyTable": ""
                },
                "grid": "",
                "gridRow": "ui-widget-content",
                "rowNum": "ui-state-default",
                "gridFooter": "",
                "rowFooter": "ui-widget-content",
                "gridTitle": "ui-widget-header ui-corner-top",
                "gridError": "ui-state-error",
                "gridErrorText": "",
                "titleButton": "ui-corner-all",
                "toolbarUpper": "ui-state-default",
                "toolbarBottom": "ui-state-default",
                "actionsDiv": "ui-widget-content",
                "actionsButton": "ui-corner-all",
                "pager": {
                    "pager": "ui-state-default",
                    "pagerButton": "ui-corner-all",
                    "pagerInput": "ui-widget-content",
                    "pagerSelect": "ui-widget-content"
                },
                "navButton": "ui-corner-all",
                "searchDialog": {
                    "operator": "ui-corner-all",
                    "label": "ui-corner-all",
                    "elem": "ui-corner-all",
                    "operationGroup": "",
                    "addRuleButton": "ui-corner-all",
                    "deleteRuleButton": "ui-corner-all",
                    "operationSelect": "ui-corner-all",
                    "addGroupButton": "ui-corner-all",
                    "deleteGroupButton": "ui-corner-all"
                },
                "searchToolbar": {
                    "menu": "ui-menu-jqueryui",
                    "operButton": "ui-corner-all",
                    "clearButton": "ui-corner-all"
                },
                "top": "ui-corner-top",
                "bottom": "ui-corner-bottom",
                "resizer": "ui-widget-header"
            },
            "bootstrap": {
                "gBox": "ui-jqgrid-bootstrap",
                "gView": "panel-info",
                "overlay": "modal-backdrop",
                "loading": "alert alert-info",
                "hDiv": "",
                "hTable": "table table-hover table-condensed table-bordered",
                "colHeaders": "",
                "states": {
                    "select": "success",
                    "disabled": "disabled ui-jqgrid-disablePointerEvents",
                    "hover": "active",
                    "error": "danger",
                    "active": "active",
                    "textOfClickable": ""
                },
                "dialog": {
                    "header": "modal-header",
                    "window": "modal ui-jqgrid-bootstrap",
                    "document": "modal-dialog",
                    "subdocument": "modal-content",
                    "body": "modal-body",
                    "footer": "modal-footer",
                    "content": "modal-content",
                    "hr": "hidden",
                    "closeButton": "btn btn-xs btn-default",
                    "fmButton": "btn btn-default",
                    "dataField": "form-control",
                    "viewLabel": "",
                    "viewData": "form-control",
                    "leftCorner": "",
                    "rightCorner": "",
                    "defaultCorner": ""
                },
                "filterToolbar": {
                    "dataField": "form-control"
                },
                "subgrid": {
                    "thSubgrid": "",
                    "rowSubTable": "",
                    "row": "",
                    "tdStart": "",
                    "tdWithIcon": "",
                    "buttonDiv": "",
                    "button": "btn btn-xs",
                    "tdData": "",
                    "legacyTable": "table table-condensed table-hover table-bordered"
                },
                "grid": "table table-condensed table-hover table-bordered",
                "gridRow": "",
                "rowNum": "",
                "gridFooter": "table table-hover table-condensed table-bordered",
                "rowFooter": "",
                "gridTitle": "",
                "gridError": "alert alert-danger",
                "gridErrorText": "sr-only",
                "titleButton": "btn btn-xs btn-default",
                "actionsDiv": "",
                "actionsButton": "btn btn-xs btn-default",
                "toolbarUpper": "",
                "toolbarBottom": "",
                "pager": {
                    "pager": "panel-footer",
                    "pagerButton": "btn btn-xs",
                    "pagerInput": "form-control",
                    "pagerSelect": "form-control"
                },
                "navButton": "btn btn-xs",
                "searchDialog": {
                    "operator": "form-control",
                    "label": "form-control",
                    "elem": "form-control",
                    "operationGroup": "form-inline",
                    "addRuleButton": "btn btn-xs btn-default",
                    "deleteRuleButton": "btn btn-xs btn-default",
                    "operationSelect": "form-control",
                    "addGroupButton": "btn btn-xs btn-default",
                    "deleteGroupButton": "btn btn-xs btn-default"
                },
                "searchToolbar": {
                    "menu": "dropdown-menu",
                    "operButton": "btn btn-xs btn-default",
                    "clearButton": "btn btn-xs btn-default"
                },
                "top": "ui-jqgrid-bootstrap-corner-top",
                "bottom": "ui-jqgrid-bootstrap-corner-bottom",
                "resizer": "ui-jqgrid-bootstrap"
            },
            "bootstrapPrimary": {
                "baseGuiStyle": "bootstrap",
                "dialog": {
                    "closeButton": "btn btn-xs close",
                    "fmButton": "btn btn-primary"
                },
                "searchDialog": {
                    "addRuleButton": "btn btn-xs btn-primary",
                    "deleteRuleButton": "btn btn-xs btn-primary",
                    "addGroupButton": "btn btn-xs btn-primary",
                    "deleteGroupButton": "btn btn-xs btn-primary"
                }
            }
        },
        "htmlDecode": function(value) {
            if (value && (value === "&nbsp;" || value === "&#160;" || value.length === 1 && value.charCodeAt(0) === 160)) {
                return "";
            }
            return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&#x27;/g, "'").replace(/&#x2F;/g, "/").replace(/&#39;/g, "'").replace(/&#47;/g, "/").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
        },
        "htmlEncode": function(value) {
            return !value ? value : String(value).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/\'/g, "&#39;").replace(/\//g, "&#47;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        "oldEncodePostedData": function(value) {
            return !value ? value : String(value).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        },
        "oldDecodePostedData": function(value) {
            if (value && (value === "&nbsp;" || value === "&#160;" || value.length === 1 && value.charCodeAt(0) === 160)) {
                return "";
            }
            return !value ? value : String(value).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&");
        },
        "clearArray": function(ar) {
            while (ar.length > 0) {
                ar.pop();
            }
        },
        "format": function(format) {
            var args = $.makeArray(arguments).slice(1);
            if (format == null) {
                format = "";
            }
            return format.replace(/\{(\d+)\}/g, function(m, i) {
                return args[i];
            });
        },
        "template": function(format) {
            var args = $.makeArray(arguments).slice(1), j, al = args.length;
            if (format == null) {
                format = "";
            }
            return format.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((\.*?)?\))?)?\}/g, function(m, i) {
                var nmarr, k;
                if (!isNaN(parseInt(i, 10))) {
                    return args[parseInt(i, 10)];
                }
                for (j = 0; j < al; j++) {
                    if ($.isArray(args[j])) {
                        nmarr = args[j];
                        k = nmarr.length;
                        while (k--) {
                            if (i === nmarr[k].nm) {
                                return nmarr[k].v;
                            }
                        }
                    }
                }
            });
        },
        "msie": navigator.appName === "Microsoft Internet Explorer",
        "msiever": function() {
            var rv = -1, match = /(MSIE) ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent);
            if (match != null && match.length === 3) {
                rv = parseFloat(match[2] || -1);
            }
            return rv;
        },
        "fixMaxHeightOfDiv": function(height) {
            if (navigator.appName === "Microsoft Internet Explorer") {
                return Math.min(height, 1533917);
            }
            if (/(Firefox)/.exec(navigator.userAgent) != null) {
                return Math.min(height, 17895696);
            }
            return height;
        },
        "getCellIndex": function(cell) {
            var c = $(cell);
            if (c.is("tr")) {
                return -1;
            }
            c = (!c.is("td") && !c.is("th") ? c.closest("td,th") : c)[0];
            if (c == null) {
                return -1;
            }
            if (jgrid.msie) {
                return $.inArray(c, c.parentNode.cells);
            }
            return c.cellIndex;
        },
        "stripHtml": function(v) {
            v = String(v);
            if (v) {
                v = v.replace(/<("[^"]*"|'[^']*'|[^'">])*>/gi, "");
                return v && v !== "&nbsp;" && v !== "&#160;" ? v.replace(/\"/g, "'") : "";
            }
            return v;
        },
        "stripPref": function(pref, id) {
            var obj = $.type(pref);
            if (obj === "string" || obj === "number") {
                pref = String(pref);
                id = pref !== "" ? String(id).replace(String(pref), "") : id;
            }
            return id;
        },
        "getRes": function(basePath, path) {
            var pathParts = path.split("."), n = pathParts.length, i;
            if (basePath == null) {
                return undefined;
            }
            for (i = 0; i < n; i++) {
                if (!pathParts[i]) {
                    return null;
                }
                basePath = basePath[pathParts[i]];
                if (basePath === undefined) {
                    break;
                }
                if (typeof basePath === "string") {
                    return basePath;
                }
            }
            return basePath;
        },
        "parseDate": function(format, date, newformat, opts) {
            var token = /\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g, dM, k, hl, timestamp = 0, offset = 0, timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[\-+]\d{4})?)\b/g, timezoneClip = /[^\-+\dA-Z]/g, msMatch = typeof date === "string" ? date.match(/^\/Date\((([\-+])?[0-9]+)(([\-+])([0-9]{2})([0-9]{2}))?\)\/$/) : null, pad = function(value, length) {
                value = String(value);
                length = parseInt(length, 10) || 2;
                while (value.length < length) {
                    value = "0" + value;
                }
                return value;
            }, ts = {
                "m": 1,
                "d": 1,
                "y": 1970,
                "h": 0,
                "i": 0,
                "s": 0,
                "u": 0
            }, h12To24 = function(ampm, h) {
                if (ampm === 0) {
                    if (h === 12) {
                        h = 0;
                    }
                } else {
                    if (h !== 12) {
                        h += 12;
                    }
                }
                return h;
            }, getDefOptions = function(p, options) {
                var props = [ "AmPm", "dayNames", "masks", "monthNames", "userLocalTime", "parseRe", "S", "srcformat" ], root1 = options || {}, root2 = (jgrid.formatter || {}).date || {}, root3 = p == null || p.locale == null ? {} : ((locales[p.locale] || {}).formatter || {}).date, iProp, nProps = props.length, result = {}, prop;
                for (iProp = 0; iProp < nProps; iProp++) {
                    prop = props[iProp];
                    if (root1[prop] !== undefined) {
                        result[prop] = root1[prop];
                    } else if (root2[prop] !== undefined) {
                        result[prop] = root2[prop];
                    } else if (root3[prop] !== undefined) {
                        result[prop] = root3[prop];
                    }
                }
                return result;
            };
            opts = getDefOptions(this.p, opts);
            if (opts.parseRe === undefined) {
                opts.parseRe = /[#%\\\/:_;.,\t\s\-]/;
            }
            if (opts.masks.hasOwnProperty(format)) {
                format = opts.masks[format];
            }
            if (date && date != null) {
                if (!isNaN(date) && String(format).toLowerCase() === "u") {
                    timestamp = new Date(parseFloat(date) * 1e3);
                } else if (!isNaN(date) && String(format).toLowerCase() === "u1000") {
                    timestamp = new Date(parseFloat(date));
                } else if (date.constructor === Date) {
                    timestamp = date;
                } else if (msMatch !== null) {
                    timestamp = new Date(parseInt(msMatch[1], 10));
                    if (msMatch[3]) {
                        offset = Number(msMatch[5]) * 60 + Number(msMatch[6]);
                        offset *= msMatch[4] === "-" ? 1 : -1;
                        offset -= timestamp.getTimezoneOffset();
                        timestamp.setTime(Number(Number(timestamp) + offset * 60 * 1e3));
                    }
                } else {
                    if (opts.srcformat === "ISO8601Long" && date.charAt(date.length - 1) === "Z") {
                        offset -= new Date().getTimezoneOffset();
                    }
                    date = String(date).replace(/\T/g, "#").replace(/\t/, "%").split(opts.parseRe);
                    format = format.replace(/\T/g, "#").replace(/\t/, "%").split(opts.parseRe);
                    for (k = 0, hl = Math.min(format.length, date.length); k < hl; k++) {
                        switch (format[k]) {
                          case "M":
                            dM = $.inArray(date[k], opts.monthNames);
                            if (dM !== -1 && dM < 12) {
                                date[k] = dM + 1;
                                ts.m = date[k];
                            }
                            break;

                          case "F":
                            dM = $.inArray(date[k], opts.monthNames, 12);
                            if (dM !== -1 && dM > 11) {
                                date[k] = dM + 1 - 12;
                                ts.m = date[k];
                            }
                            break;

                          case "n":
                            ts.m = parseInt(date[k], 10);
                            break;

                          case "j":
                            ts.d = parseInt(date[k], 10);
                            break;

                          case "g":
                            ts.h = parseInt(date[k], 10);
                            break;

                          case "a":
                            dM = $.inArray(date[k], opts.AmPm);
                            if (dM !== -1 && dM < 2 && date[k] === opts.AmPm[dM]) {
                                date[k] = dM;
                                ts.h = h12To24(date[k], ts.h);
                            }
                            break;

                          case "A":
                            dM = $.inArray(date[k], opts.AmPm);
                            if (dM !== -1 && dM > 1 && date[k] === opts.AmPm[dM]) {
                                date[k] = dM - 2;
                                ts.h = h12To24(date[k], ts.h);
                            }
                            break;
                        }
                        if (date[k] !== undefined) {
                            ts[format[k].toLowerCase()] = parseInt(date[k], 10);
                        }
                    }
                    if (ts.f) {
                        ts.m = ts.f;
                    }
                    if (ts.m === 0 && ts.y === 0 && ts.d === 0) {
                        return "&#160;";
                    }
                    ts.m = parseInt(ts.m, 10) - 1;
                    var ty = ts.y;
                    if (ty >= 70 && ty <= 99) {
                        ts.y = 1900 + ts.y;
                    } else if (ty >= 0 && ty <= 69) {
                        ts.y = 2e3 + ts.y;
                    }
                    timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u);
                    if (offset > 0) {
                        timestamp.setTime(Number(Number(timestamp) + offset * 60 * 1e3));
                    }
                }
            } else {
                timestamp = new Date(ts.y, ts.m, ts.d, ts.h, ts.i, ts.s, ts.u);
            }
            if (opts.userLocalTime && offset === 0) {
                offset -= new Date().getTimezoneOffset();
                if (offset > 0) {
                    timestamp.setTime(Number(Number(timestamp) + offset * 60 * 1e3));
                }
            }
            if (newformat === undefined) {
                return timestamp;
            }
            if (opts.masks.hasOwnProperty(newformat)) {
                newformat = opts.masks[newformat];
            } else if (!newformat) {
                newformat = "Y-m-d";
            }
            var hours = timestamp.getHours(), i = timestamp.getMinutes(), j = timestamp.getDate(), n = timestamp.getMonth() + 1, o = timestamp.getTimezoneOffset(), s = timestamp.getSeconds(), u = timestamp.getMilliseconds(), w = timestamp.getDay(), year = timestamp.getFullYear(), dayOfWeek = (w + 6) % 7 + 1, z = (new Date(year, n - 1, j) - new Date(year, 0, 1)) / 864e5, weekNumberOfYear = dayOfWeek < 5 ? Math.floor((z + dayOfWeek - 1) / 7) + 1 : Math.floor((z + dayOfWeek - 1) / 7) || ((new Date(year - 1, 0, 1).getDay() + 6) % 7 < 4 ? 53 : 52), flags = {
                "d": pad(j),
                "D": opts.dayNames[w],
                "j": j,
                "l": opts.dayNames[w + 7],
                "N": dayOfWeek,
                "S": opts.S(j),
                "w": w,
                "z": z,
                "W": weekNumberOfYear,
                "F": opts.monthNames[n - 1 + 12],
                "m": pad(n),
                "M": opts.monthNames[n - 1],
                "n": n,
                "t": "?",
                "L": "?",
                "o": "?",
                "Y": year,
                "y": String(year).substring(2),
                "a": hours < 12 ? opts.AmPm[0] : opts.AmPm[1],
                "A": hours < 12 ? opts.AmPm[2] : opts.AmPm[3],
                "B": "?",
                "g": hours % 12 || 12,
                "G": hours,
                "h": pad(hours % 12 || 12),
                "H": pad(hours),
                "i": pad(i),
                "s": pad(s),
                "u": u,
                "e": "?",
                "I": "?",
                "O": (o > 0 ? "-" : "+") + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
                "P": "?",
                "T": (String(timestamp).match(timezone) || [ "" ]).pop().replace(timezoneClip, ""),
                "Z": "?",
                "c": "?",
                "r": "?",
                "U": Math.floor(timestamp / 1e3)
            };
            return newformat.replace(token, function($0) {
                return flags.hasOwnProperty($0) ? flags[$0] : $0.substring(1);
            });
        },
        "parseDateToNumber": function(format, date) {
            var datetime = jgrid.parseDate.call(this, format, date);
            return datetime instanceof Date ? datetime.getTime() : 0;
        },
        "jqID": function(sid) {
            return String(sid).replace(/[!"#$%&'()*+,.\/:; <=>?@\[\\\]\^`{|}~]/g, "\\$&");
        },
        "getGridComponentId": function(componentName) {
            var self = this;
            if (self.p == null || !self.p.id) {
                return "";
            }
            var id = self.p.id;
            switch (componentName) {
              case COMPONENT_NAMES.GRID:
                return id;

              case COMPONENT_NAMES.GRID_BOX_DIV:
                return "gbox_" + id;

              case COMPONENT_NAMES.GRID_VIEW_DIV:
                return "gview_" + id;

              case COMPONENT_NAMES.DIALOG_ALERT_DIV:
                return "alertmod_" + id;

              case COMPONENT_NAMES.COLUMN_RESIZER_DIV:
                return "rs_m" + id;

              case COMPONENT_NAMES.HEADER_SELECT_ALL_ROWS_CHECKBOX:
                return "cb_" + id;

              case COMPONENT_NAMES.SEARCH_OPERATION_MENU_UL:
                return "sopt_menu";

              default:
                return "";
            }
        },
        "getGridComponentIdSelector": function(componentName) {
            var id = jgrid.getGridComponentId.call(this, componentName);
            return id ? "#" + jgrid.jqID(id) : "";
        },
        "isHTMLElement": function(elem) {
            return typeof HTMLElement === "object" || typeof HTMLElement === "function" ? elem instanceof HTMLElement : elem != null && typeof elem === "object" && elem.nodeType === 1 && typeof elem.nodeName === "string";
        },
        "getGridComponent": function(componentName, $p) {
            var p;
            if ($p instanceof $ || $p.length > 0) {
                p = $p[0];
            } else if (jgrid.isHTMLElement($p)) {
                p = $p;
                $p = $(p);
            } else {
                return $();
            }
            switch (componentName) {
              case COMPONENT_NAMES.BODY_TABLE:
                return $p.hasClass("ui-jqgrid-bdiv") ? $p.find(">div>.ui-jqgrid-btable") : $();

              case COMPONENT_NAMES.HEADER_TABLE:
                return $p.hasClass("ui-jqgrid-hdiv") ? $p.find(">div>.ui-jqgrid-htable") : $();

              case COMPONENT_NAMES.FOOTER_TABLE:
                return $p.hasClass("ui-jqgrid-sdiv") ? $p.find(">div>.ui-jqgrid-ftable") : $();

              case COMPONENT_NAMES.FROZEN_HEADER_TABLE:
                return $p.hasClass("ui-jqgrid-hdiv") ? $p.children(".ui-jqgrid-htable") : $();

              case COMPONENT_NAMES.FROZEN_FOOTER_TABLE:
                return $p.hasClass("ui-jqgrid-sdiv") ? $p.children(".ui-jqgrid-ftable") : $();

              case COMPONENT_NAMES.BODY_DIV:
                return $p.hasClass("ui-jqgrid-btable") && p.grid != null ? $(p.grid.bDiv) : $();

              case COMPONENT_NAMES.HEADER_DIV:
                return $p.hasClass("ui-jqgrid-btable") && p.grid != null ? $(p.grid.hDiv) : $();

              case COMPONENT_NAMES.FOOTER_DIV:
                return $p.hasClass("ui-jqgrid-btable") && p.grid != null ? $(p.grid.sDiv) : $();

              default:
                return $();
            }
        },
        "fixScrollOffsetAndhBoxPadding": function() {
            var self = this, grid = self.grid;
            if (!grid) {
                return;
            }
            var p = self.p, bDiv = grid.bDiv, fixhBox = function(hDiv) {
                var $hDivhBox = $(hDiv).children("div").first();
                $hDivhBox.css($hDivhBox.hasClass("ui-jqgrid-hbox-rtl") ? "padding-left" : "padding-right", p.scrollOffset);
                hDiv.scrollLeft = bDiv.scrollLeft;
            };
            if ($(bDiv).width() > 0) {
                p.scrollOffset = bDiv.offsetWidth - bDiv.clientWidth;
                fixhBox(grid.hDiv);
                if (grid.sDiv) {
                    fixhBox(grid.sDiv);
                }
            }
        },
        "mergeCssClasses": function() {
            var args = $.makeArray(arguments), map = {}, i, j, ar, cssClass, classes = [];
            for (i = 0; i < args.length; i++) {
                ar = String(args[i]).replace(/[\t\r\n\f]/g, " ").split(" ");
                for (j = 0; j < ar.length; j++) {
                    cssClass = ar[j];
                    if (cssClass !== "" && !map.hasOwnProperty(cssClass)) {
                        map[cssClass] = true;
                        classes.push(cssClass);
                    }
                }
            }
            return classes.join(" ");
        },
        "hasOneFromClasses": function(elem, classes) {
            var $elem = $(elem), arClasses = String(classes).replace(/[\t\r\n\f]/g, " ").split(" "), n = arClasses.length, i;
            for (i = 0; i < n; i++) {
                if ($elem.hasClass(arClasses[i])) {
                    return true;
                }
            }
            return false;
        },
        "hasAllClasses": function(elem, classes) {
            var $elem = $(elem), arClasses = String(classes).replace(/[\t\r\n\f]/g, " ").split(" "), n = arClasses.length, i;
            for (i = 0; i < n; i++) {
                if (!$elem.hasClass(arClasses[i])) {
                    return false;
                }
            }
            return true;
        },
        "detectRowEditing": function(rowid) {
            var i, savedRowInfo, tr, self = this, rows = self.rows, p = self.p, isFunction = $.isFunction;
            if (!self.grid || rows == null || p == null) {
                return null;
            }
            if (p.savedRow === undefined || p.savedRow.length === 0) {
                return null;
            }
            for (i = 0; i < p.savedRow.length; i++) {
                savedRowInfo = p.savedRow[i];
                if (typeof savedRowInfo.id === "number" && typeof savedRowInfo.ic === "number" && savedRowInfo.name !== undefined && savedRowInfo.v !== undefined && rows[savedRowInfo.id] != null && rows[savedRowInfo.id].id === rowid && isFunction($.fn.jqGrid.restoreCell)) {
                    tr = rows[savedRowInfo.id];
                    if (tr != null && tr.id === rowid) {
                        return {
                            "mode": "cellEditing",
                            "savedRow": savedRowInfo
                        };
                    }
                } else if (savedRowInfo.id === rowid && isFunction($.fn.jqGrid.restoreRow)) {
                    return {
                        "mode": "inlineEditing",
                        "savedRow": savedRowInfo
                    };
                }
            }
            return null;
        },
        "getCell": function(tr, iCol) {
            var grid = this.grid, p = this.p, frozenRows, $td;
            if (!grid || !p) {
                return $();
            }
            if (tr instanceof $ || tr.length > 0) {
                tr = tr[0];
            }
            if (!((typeof HTMLTableRowElement === "object" || typeof HTMLTableRowElement === "function") && tr instanceof HTMLTableRowElement) || tr.cells == null) {
                return $();
            }
            $td = $(tr.cells[iCol]);
            frozenRows = grid.fbRows;
            return frozenRows != null && iCol < frozenRows[0].cells.length ? $td.add(frozenRows[tr.rowIndex].cells[iCol]) : $td;
        },
        "getDataFieldOfCell": function(tr, iCol) {
            var p = this.p, $td = jgrid.getCell.call(this, tr, iCol);
            if (p.treeGrid && $td.children("div.tree-wrap").length > 0) {
                $td = $td.children("span.cell-wrapperleaf,span.cell-wrapper");
            }
            return p.colModel[iCol].autoResizable ? $td.children("span." + p.autoResizing.wrapperClassName) : $td;
        },
        "enumEditableCells": function(tr, mode, callback) {
            var self = this, grid = self.grid, rows = self.rows, p = self.p;
            if (grid == null || rows == null || p == null || tr == null || tr.rowIndex == null || !tr.id || !$.isFunction(callback)) {
                return null;
            }
            var iCol, colModel = p.colModel, nCol = colModel.length, cm, nm, options, isEditable, iRow = tr.rowIndex, td, $dataElement, dataWidth, frozenRows = grid.fbRows, frozen = frozenRows != null, trFrozen = frozen ? frozenRows[iRow] : null;
            if (frozen) {
                tr = self.rows[iRow];
            }
            for (iCol = 0; iCol < nCol; iCol++) {
                cm = colModel[iCol];
                nm = cm.name;
                if (nm !== "cb" && nm !== "subgrid" && nm !== "rn") {
                    if (frozen && !cm.frozen) {
                        frozen = false;
                    }
                    td = (frozen ? trFrozen : tr).cells[iCol];
                    $dataElement = $(td);
                    if (!$dataElement.hasClass("not-editable-cell")) {
                        dataWidth = $dataElement.width();
                        if (p.treeGrid === true && nm === p.ExpandColumn) {
                            dataWidth -= $dataElement.children("div.tree-wrap").outerWidth();
                            $dataElement = $dataElement.children("span.cell-wrapperleaf,span.cell-wrapper").first();
                        } else {
                            dataWidth = 0;
                        }
                        options = {
                            "rowid": tr.id,
                            "iCol": iCol,
                            "iRow": iRow,
                            "cmName": nm,
                            "cm": cm,
                            "mode": mode,
                            "td": td,
                            "tr": tr,
                            "trFrozen": trFrozen,
                            "dataElement": $dataElement[0],
                            "dataWidth": dataWidth
                        };
                        if (!cm.edittype) {
                            cm.edittype = "text";
                        }
                        isEditable = cm.editable;
                        isEditable = $.isFunction(isEditable) ? isEditable.call(self, options) : isEditable;
                        if (isEditable === true || isEditable === "hidden") {
                            options.editable = isEditable;
                            if (callback.call(self, options) === false) {
                                break;
                            }
                        }
                    }
                }
            }
        },
        "getEditedValue": function($dataFiled, cm, valueText, editable) {
            var result, checkBoxValues, newformat, $field, values, texts, formatoptions = cm.formatoptions || {}, editoptions = cm.editoptions || {}, customValue = editoptions.custom_value, nameSelector = "[name=" + jgrid.jqID(cm.name) + "]", $t = this, $self = $($t);
            if (editable === "hidden" || editable === "readonly") {
                return $($t).jqGrid("getCell", $dataFiled.closest("tr.jqgrow").attr("id"), cm.name);
            }
            switch (cm.edittype) {
              case "checkbox":
                checkBoxValues = [ "Yes", "No" ];
                if (typeof editoptions.value === "string") {
                    checkBoxValues = editoptions.value.split(":");
                }
                result = $dataFiled.find("input[type=checkbox]").is(":checked") ? checkBoxValues[0] : checkBoxValues[1];
                break;

              case "text":
              case "password":
              case "textarea":
              case "button":
                $field = $dataFiled.find("input" + nameSelector + ",textarea" + nameSelector);
                result = $field.val();
                if ($field.prop("type") === "date" && String(result).split("-").length === 3) {
                    newformat = formatoptions.newformat || $self.jqGrid("getGridRes", "formatter.date.newformat");
                    result = jgrid.parseDate.call($t, "Y-m-d", result, newformat);
                }
                break;

              case "select":
                $field = $dataFiled.find("select option:selected");
                if (editoptions.multiple) {
                    values = [];
                    texts = [];
                    $field.each(function() {
                        values.push($(this).val());
                        texts.push($(this).text());
                    });
                    result = values.join(",");
                    valueText.text = texts.join(",");
                } else {
                    result = $field.val();
                    valueText.text = $field.text();
                }
                valueText.value = result;
                break;

              case "custom":
                try {
                    if ($.isFunction(customValue)) {
                        result = customValue.call($t, $dataFiled.find(".customelement"), "get");
                        if (result === undefined) {
                            throw "e2";
                        }
                    } else {
                        throw "e1";
                    }
                } catch (e) {
                    var errorText, infoDialog = jgrid.info_dialog, getRes = function(path) {
                        $self.jqGrid("getGridRes", path);
                    };
                    switch (String(e)) {
                      case "e1":
                        errorText = "function 'custom_value' " + getRes("edit.msg.nodefined");
                        break;

                      case "e2":
                        break;

                      default:
                        errorText = e.message;
                        break;
                    }
                    if (infoDialog && $.isFunction(infoDialog)) {
                        infoDialog.call($t, getRes("errors.errcap"), errorText, getRes("edit.bClose"));
                    } else {
                        alert(errorText);
                    }
                }
                break;

              default:
                result = $dataFiled.find("*" + nameSelector).text();
                break;
            }
            return result;
        },
        "guid": 1,
        "uidPref": "jqg",
        "randId": function(prefix) {
            return (prefix || jgrid.uidPref) + jgrid.guid++;
        },
        "getAccessor": function(obj, expr) {
            var ret, p, prm = [], i;
            if ($.isFunction(expr)) {
                return expr(obj);
            }
            ret = obj[expr];
            if (ret === undefined) {
                try {
                    if (typeof expr === "string") {
                        prm = expr.split(".");
                    }
                    i = prm.length;
                    if (i) {
                        ret = obj;
                        while (ret && i--) {
                            p = prm.shift();
                            ret = ret[p];
                        }
                    }
                } catch (ignore) {}
            }
            return ret;
        },
        "getXmlData": function(obj, expr, returnObj) {
            var m = typeof expr === "string" ? expr.match(/^(.*)\[(\w+)\]$/) : null;
            if ($.isFunction(expr)) {
                return expr(obj);
            }
            if (m && m[2]) {
                return m[1] ? $(m[1], obj).attr(m[2]) : $(obj).attr(m[2]);
            }
            if (obj === undefined) {
                alert("expr");
            }
            var ret = $(obj).find(expr);
            if (returnObj) {
                return ret;
            }
            return ret.length > 0 ? $(ret).text() : undefined;
        },
        "cellWidth": function() {
            var $testDiv = $("<div class='ui-jqgrid' style='left:10000px'><div class='ui-jqgrid-view'><div class='ui-jqgrid-bdiv'><table class='ui-jqgrid-btable' style='width:5px;'><tr class='jqgrow'><td style='width:5px;display:block;'></td></tr></table></div></div></div>"), testCell = $testDiv.appendTo("body").find("td").width();
            $testDiv.remove();
            return Math.abs(testCell - 5) > .1;
        },
        "isCellClassHidden": function(className) {
            var $testDiv = $("<div class='ui-jqgrid' style='left:10000px'><div class='ui-jqgrid-view'><div class='ui-jqgrid-bdiv'><table class='ui-jqgrid-btable' style='width:5px;'><tr class='jqgrow'><td style='width:5px;' class='" + (className || "") + "'></td></tr></table></div></div></div>"), isHidden = $testDiv.appendTo("body").find("td").is(":hidden");
            $testDiv.remove();
            return isHidden;
        },
        "cell_width": true,
        "ajaxOptions": {},
        "from": function(source) {
            var context = this, QueryObject = function(d, q) {
                var self = this, _data = d, _usecase = true, _trim = false, _query = q, _stripNum = /[\$,%]/g, _lastCommand = null, _lastField = null, _orDepth = 0, _negate = false, _queuedOperator = "", _sorting = [], toString = Object.prototype.toString, _useProperties = true;
                if (typeof d === "object" && d.push) {
                    if (d.length > 0) {
                        if (typeof d[0] !== "object") {
                            _useProperties = false;
                        } else {
                            _useProperties = true;
                        }
                    }
                } else {
                    throw "data provides is not an array";
                }
                this._hasData = function() {
                    return _data === null ? false : _data.length === 0 ? false : true;
                };
                this._getStr = function(s) {
                    var phrase = [];
                    if (_trim) {
                        phrase.push("jQuery.trim(");
                    }
                    phrase.push("String(" + s + ")");
                    if (_trim) {
                        phrase.push(")");
                    }
                    if (!_usecase) {
                        phrase.push(".toUpperCase()");
                    }
                    return phrase.join("");
                };
                this._strComp = function(val) {
                    if (typeof val === "string") {
                        return ".toString()";
                    }
                    return "";
                };
                this._group = function(f, u) {
                    return {
                        "field": f.toString(),
                        "unique": u,
                        "items": []
                    };
                };
                this._toStr = function(phrase) {
                    if (_trim) {
                        phrase = $.trim(phrase);
                    }
                    phrase = phrase.toString().replace(/\\/g, "\\\\").replace(/\"/g, '\\"');
                    return _usecase ? phrase : phrase.toUpperCase();
                };
                this._funcLoop = function(func) {
                    var results = [];
                    $.each(_data, function(i, v) {
                        results.push(func(v));
                    });
                    return results;
                };
                this._append = function(s) {
                    var i;
                    if (_query === null) {
                        _query = "";
                    } else {
                        _query += _queuedOperator === "" ? " && " : _queuedOperator;
                    }
                    for (i = 0; i < _orDepth; i++) {
                        _query += "(";
                    }
                    if (_negate) {
                        _query += "!";
                    }
                    _query += "(" + s + ")";
                    _negate = false;
                    _queuedOperator = "";
                    _orDepth = 0;
                };
                this._setCommand = function(f, c) {
                    _lastCommand = f;
                    _lastField = c;
                };
                this._resetNegate = function() {
                    _negate = false;
                };
                this._repeatCommand = function(f, v) {
                    if (_lastCommand === null) {
                        return self;
                    }
                    if (f !== null && v !== null) {
                        return _lastCommand(f, v);
                    }
                    if (_lastField === null) {
                        return _lastCommand(f);
                    }
                    if (!_useProperties) {
                        return _lastCommand(f);
                    }
                    return _lastCommand(_lastField, f);
                };
                this._equals = function(a, b) {
                    return self._compare(a, b, 1) === 0;
                };
                this._compare = function(a, b, dir) {
                    if (dir === undefined) {
                        dir = 1;
                    }
                    if (a === undefined) {
                        a = null;
                    }
                    if (b === undefined) {
                        b = null;
                    }
                    if (a === null && b === null) {
                        return 0;
                    }
                    if (a === null && b !== null) {
                        return 1;
                    }
                    if (a !== null && b === null) {
                        return -1;
                    }
                    if (toString.call(a) === "[object Date]" && toString.call(b) === "[object Date]") {
                        if (a < b) {
                            return -dir;
                        }
                        if (a > b) {
                            return dir;
                        }
                        return 0;
                    }
                    if (!_usecase && typeof a !== "number" && typeof b !== "number") {
                        a = String(a);
                        b = String(b);
                    }
                    if (a < b) {
                        return -dir;
                    }
                    if (a > b) {
                        return dir;
                    }
                    return 0;
                };
                this._performSort = function() {
                    if (_sorting.length === 0) {
                        return;
                    }
                    _data = self._doSort(_data, 0);
                };
                this._doSort = function(data, iSort) {
                    var by = _sorting[iSort].by, dir = _sorting[iSort].dir, type = _sorting[iSort].type, dfmt = _sorting[iSort].datefmt, sfunc = _sorting[iSort].sfunc;
                    if (iSort === _sorting.length - 1) {
                        return self._getOrder(data, by, dir, type, dfmt, sfunc);
                    }
                    iSort++;
                    var values = self._getGroup(data, by, dir, type, dfmt), results = [], i, j, sorted;
                    for (i = 0; i < values.length; i++) {
                        sorted = self._doSort(values[i].items, iSort);
                        for (j = 0; j < sorted.length; j++) {
                            results.push(sorted[j]);
                        }
                    }
                    return results;
                };
                this._getOrder = function(data, by, dir, type, dfmt, sfunc) {
                    var sortData = [], _sortData = [], newDir = dir === "a" ? 1 : -1, i, ab, findSortKey;
                    if (type === undefined) {
                        type = "text";
                    }
                    if (type === "float" || type === "number" || type === "currency" || type === "numeric") {
                        findSortKey = function($cell) {
                            var key = parseFloat(String($cell).replace(_stripNum, ""));
                            return isNaN(key) ? Number.NEGATIVE_INFINITY : key;
                        };
                    } else if (type === "int" || type === "integer") {
                        findSortKey = function($cell) {
                            return $cell ? parseFloat(String($cell).replace(_stripNum, "")) : Number.NEGATIVE_INFINITY;
                        };
                    } else if (type === "date" || type === "datetime") {
                        findSortKey = function($cell) {
                            return jgrid.parseDateToNumber.call(context, dfmt, $cell);
                        };
                    } else if ($.isFunction(type)) {
                        findSortKey = type;
                    } else {
                        findSortKey = function($cell) {
                            $cell = $cell != null ? $.trim(String($cell)) : "";
                            return _usecase ? $cell : $cell.toUpperCase();
                        };
                    }
                    $.each(data, function(index, v) {
                        ab = by !== "" ? jgrid.getAccessor(v, by) : v;
                        if (ab === undefined) {
                            ab = "";
                        }
                        ab = findSortKey(ab, v);
                        _sortData.push({
                            "vSort": ab,
                            "data": v,
                            "index": index
                        });
                    });
                    if ($.isFunction(sfunc)) {
                        _sortData.sort(function(a, b) {
                            return sfunc.call(context, a.vSort, b.vSort, newDir, a.data, b.data);
                        });
                    } else {
                        _sortData.sort(function(a, b) {
                            return self._compare(a.vSort, b.vSort, newDir);
                        });
                    }
                    var j = 0, nrec = data.length;
                    while (j < nrec) {
                        i = _sortData[j].index;
                        sortData.push(data[i]);
                        j++;
                    }
                    return sortData;
                };
                this._getGroup = function(data, by, dir, type, dfmt) {
                    var results = [], group = null, last = null;
                    $.each(self._getOrder(data, by, dir, type, dfmt), function(i, v) {
                        var val = jgrid.getAccessor(v, by);
                        if (val == null) {
                            val = "";
                        }
                        if (!self._equals(last, val)) {
                            last = val;
                            if (group !== null) {
                                results.push(group);
                            }
                            group = self._group(by, val);
                        }
                        group.items.push(v);
                    });
                    if (group !== null) {
                        results.push(group);
                    }
                    return results;
                };
                this.ignoreCase = function() {
                    _usecase = false;
                    return self;
                };
                this.useCase = function() {
                    _usecase = true;
                    return self;
                };
                this.trim = function() {
                    _trim = true;
                    return self;
                };
                this.noTrim = function() {
                    _trim = false;
                    return self;
                };
                this.execute = function() {
                    var match = _query, results = [];
                    if (match === null) {
                        return self;
                    }
                    $.each(_data, function() {
                        (function() {
                            var localMath = "(function (context) { var intFunc = function (jQuery, self) { return " + match + "; }; return intFunc.call(context.item, context.jQuery, context.context); }(this))";
                            if (eval(localMath)) {
                                results.push(this.item);
                            }
                        }).call({
                            "item": this,
                            "jQuery": $,
                            "context": context
                        });
                    });
                    _data = results;
                    return self;
                };
                this.data = function() {
                    return _data;
                };
                this.select = function(f) {
                    self.execute();
                    if ($.isFunction(f)) {
                        var results = [];
                        $.each(_data, function(i, v) {
                            results.push(f(v));
                        });
                        return results;
                    }
                    if (!self._hasData()) {
                        return [];
                    }
                    self._performSort();
                    return _data;
                };
                this.hasMatch = function() {
                    if (!self._hasData()) {
                        return false;
                    }
                    self.execute();
                    return _data.length > 0;
                };
                this.andNot = function(f, v, x) {
                    _negate = !_negate;
                    return self.and(f, v, x);
                };
                this.orNot = function(f, v, x) {
                    _negate = !_negate;
                    return self.or(f, v, x);
                };
                this.not = function(f, v, x) {
                    return self.andNot(f, v, x);
                };
                this.and = function(f, v, x) {
                    _queuedOperator = " && ";
                    if (f === undefined) {
                        return self;
                    }
                    return self._repeatCommand(f, v, x);
                };
                this.or = function(f, v, x) {
                    _queuedOperator = " || ";
                    if (f === undefined) {
                        return self;
                    }
                    return self._repeatCommand(f, v, x);
                };
                this.orBegin = function() {
                    _orDepth++;
                    return self;
                };
                this.orEnd = function() {
                    if (_query !== null) {
                        _query += ")";
                    }
                    return self;
                };
                this.isNot = function(f) {
                    _negate = !_negate;
                    return self.is(f);
                };
                this.is = function(f) {
                    self._append("this." + f);
                    self._resetNegate();
                    return self;
                };
                this._compareValues = function(func, f, v, how, t) {
                    var fld;
                    if (_useProperties) {
                        fld = f;
                    } else {
                        fld = "this";
                    }
                    if (v === undefined) {
                        v = null;
                    }
                    var val = v, swst = t.stype === undefined ? "text" : t.stype;
                    if (v !== null) {
                        switch (swst) {
                          case "int":
                          case "integer":
                            val = String(val).replace(_stripNum, "");
                            val = isNaN(Number(val)) || val === "" ? "0" : Number(val);
                            fld = "parseInt(" + fld + "||0,10)";
                            val = String(parseInt(val, 10));
                            break;

                          case "float":
                          case "number":
                          case "currency":
                          case "numeric":
                            val = String(val).replace(_stripNum, "");
                            val = isNaN(Number(val)) || val === "" ? "0" : Number(val);
                            fld = "parseFloat(" + fld + "||0)";
                            val = String(val);
                            break;

                          case "date":
                          case "datetime":
                            val = String(jgrid.parseDateToNumber.call(context, t.newfmt || "Y-m-d", val));
                            fld = 'jQuery.jgrid.parseDateToNumber.call(self,"' + t.srcfmt + '",' + fld + ")";
                            break;

                          default:
                            fld = self._getStr(fld);
                            val = self._getStr('"' + self._toStr(val) + '"');
                        }
                    }
                    self._append(fld + " " + how + " " + val);
                    self._setCommand(func, f);
                    self._resetNegate();
                    return self;
                };
                this.equals = function(f, v, t) {
                    return self._compareValues(self.equals, f, v, "==", t);
                };
                this.notEquals = function(f, v, t) {
                    return self._compareValues(self.equals, f, v, "!==", t);
                };
                this.isNull = function(f, v, t) {
                    return self._compareValues(self.equals, f, null, "===", t);
                };
                this.greater = function(f, v, t) {
                    return self._compareValues(self.greater, f, v, ">", t);
                };
                this.less = function(f, v, t) {
                    return self._compareValues(self.less, f, v, "<", t);
                };
                this.greaterOrEquals = function(f, v, t) {
                    return self._compareValues(self.greaterOrEquals, f, v, ">=", t);
                };
                this.lessOrEquals = function(f, v, t) {
                    return self._compareValues(self.lessOrEquals, f, v, "<=", t);
                };
                this.startsWith = function(f, v) {
                    var val = v == null ? f : v, length = _trim ? $.trim(val.toString()).length : val.toString().length;
                    if (_useProperties) {
                        self._append(self._getStr(f) + ".substr(0," + length + ") == " + self._getStr('"' + self._toStr(v) + '"'));
                    } else {
                        if (v != null) {
                            length = _trim ? $.trim(v.toString()).length : v.toString().length;
                        }
                        self._append(self._getStr("this") + ".substr(0," + length + ") == " + self._getStr('"' + self._toStr(f) + '"'));
                    }
                    self._setCommand(self.startsWith, f);
                    self._resetNegate();
                    return self;
                };
                this.endsWith = function(f, v) {
                    var val = v == null ? f : v, length = _trim ? $.trim(val.toString()).length : val.toString().length;
                    if (_useProperties) {
                        self._append(self._getStr(f) + ".substr(" + self._getStr(f) + ".length-" + length + "," + length + ') == "' + self._toStr(v) + '"');
                    } else {
                        self._append(self._getStr("this") + ".substr(" + self._getStr("this") + '.length-"' + self._toStr(f) + '".length,"' + self._toStr(f) + '".length) == "' + self._toStr(f) + '"');
                    }
                    self._setCommand(self.endsWith, f);
                    self._resetNegate();
                    return self;
                };
                this.contains = function(f, v) {
                    if (_useProperties) {
                        self._append(self._getStr(f) + '.indexOf("' + self._toStr(v) + '",0) > -1');
                    } else {
                        self._append(self._getStr("this") + '.indexOf("' + self._toStr(f) + '",0) > -1');
                    }
                    self._setCommand(self.contains, f);
                    self._resetNegate();
                    return self;
                };
                this.groupBy = function(by, dir, type, datefmt) {
                    if (!self._hasData()) {
                        return null;
                    }
                    return self._getGroup(_data, by, dir, type, datefmt);
                };
                this.orderBy = function(by, dir, stype, dfmt, sfunc) {
                    dir = dir == null ? "a" : $.trim(dir.toString().toLowerCase());
                    if (stype == null) {
                        stype = "text";
                    }
                    if (dfmt == null) {
                        dfmt = "Y-m-d";
                    }
                    if (sfunc == null) {
                        sfunc = false;
                    }
                    if (dir === "desc" || dir === "descending") {
                        dir = "d";
                    }
                    if (dir === "asc" || dir === "ascending") {
                        dir = "a";
                    }
                    _sorting.push({
                        "by": by,
                        "dir": dir,
                        "type": stype,
                        "datefmt": dfmt,
                        "sfunc": sfunc
                    });
                    return self;
                };
                this.custom = function(ruleOp, field, data) {
                    self._append("self.p.customSortOperations." + ruleOp + '.filter.call(self,{item:this,cmName:"' + field + '",searchValue:"' + data + '"})');
                    self._setCommand(self.custom, field);
                    self._resetNegate();
                    return self;
                };
                return self;
            };
            return new QueryObject(typeof source === "string" ? $.data(source) : source, null);
        },
        "serializeFeedback": function(callback, eventName, postData) {
            var self = this, eventResult;
            if (self instanceof $ && self.length > 0) {
                self = self[0];
            }
            if (typeof postData === "string") {
                return postData;
            }
            eventResult = $(self).triggerHandler(eventName, postData);
            if (typeof eventResult === "string") {
                return eventResult;
            }
            if (eventResult == null || typeof eventResult !== "object") {
                eventResult = postData;
            }
            return $.isFunction(callback) ? callback.call(self, eventResult) : eventResult;
        },
        "fullBoolFeedback": function(callback, eventName) {
            var self = this, args = $.makeArray(arguments).slice(2), result = $(self).triggerHandler(eventName, args);
            result = result === false || result === "stop" ? false : true;
            if ($.isFunction(callback)) {
                var callbackResult = callback.apply(self, args);
                if (callbackResult === false || callbackResult === "stop") {
                    result = false;
                }
            }
            return result;
        },
        "feedback": function(p, eventPrefix, callbackSuffix, callbackName) {
            var self = this;
            if (self instanceof $ && self.length > 0) {
                self = self[0];
            }
            if (p == null || typeof callbackName !== "string" || callbackName.length < 2) {
                return null;
            }
            var eventName = callbackName.substring(0, 2) === "on" ? "jqGrid" + eventPrefix + callbackName.charAt(2).toUpperCase() + callbackName.substring(3) : "jqGrid" + eventPrefix + callbackName.charAt(0).toUpperCase() + callbackName.substring(1), args = $.makeArray(arguments).slice(4), callback = p[callbackName + callbackSuffix];
            args.unshift(eventName);
            args.unshift(callback);
            return jgrid.fullBoolFeedback.apply(self, args);
        },
        "builderSortIcons": function() {
            var ts = this, p = ts.p, disabledStateClasses = $(this).jqGrid("getGuiStyles", "states.disabled"), getClasses = function(ascOrDesc) {
                return jgrid.mergeCssClasses("ui-grid-ico-sort", "ui-icon-" + ascOrDesc, p.viewsortcols[1] === "horizontal" ? "ui-i-" + ascOrDesc : "", disabledStateClasses, $(ts).jqGrid("getIconRes", "sort." + ascOrDesc), "ui-sort-" + p.direction);
            };
            return "<span class='s-ico" + (p.sortIconsBeforeText ? " jqgrid-icons-first" : "") + "' style='display:none'><span class='" + getClasses("asc") + "'></span><span class='" + getClasses("desc") + "'></span></span>";
        },
        "builderFmButon": function(id, text, icon, iconOnLeftOrRight, conner) {
            var p = this.p, $self = $(this), getDialogGuiStyles = function(name) {
                return $self.jqGrid("getGuiStyles", "dialog." + name);
            };
            if (p == null) {
                return "";
            }
            return "<a id='" + id + "' class='" + jgrid.mergeCssClasses("fm-button", getDialogGuiStyles("fmButton"), getDialogGuiStyles(conner === "right" ? "rightCorner" : conner === "left" ? "leftCorner" : "defaultCorner"), iconOnLeftOrRight === "right" ? "fm-button-icon-right" : iconOnLeftOrRight === "left" ? "fm-button-icon-left" : "") + "' role='button' tabindex='0'>" + (icon ? "<span class='fm-button-icon " + ($self.jqGrid("getIconRes", icon) || icon) + "'></span>" : "") + (text ? "<span class='fm-button-text'>" + text + "</span>" : "") + "</a>";
        },
        "convertOnSaveLocally": function(nData, cm, oData, rowid, item, iCol) {
            var self = this, p = self.p;
            if (p == null) {
                return nData;
            }
            if ($.isFunction(cm.convertOnSave)) {
                return cm.convertOnSave.call(this, {
                    "newValue": nData,
                    "cm": cm,
                    "oldValue": oData,
                    "id": rowid,
                    "item": item,
                    "iCol": iCol
                });
            }
            if (typeof oData !== "boolean" && typeof oData !== "number") {
                return nData;
            }
            if (typeof oData === "boolean" && (cm.edittype === "checkbox" || cm.formatter === "checkbox")) {
                var lnData = String(nData).toLowerCase(), cbv = cm.editoptions != null && typeof cm.editoptions.value === "string" ? cm.editoptions.value.split(":") : [ "yes", "no" ];
                if ($.inArray(lnData, [ "1", "true", cbv[0].toLowerCase() ]) >= 0) {
                    nData = true;
                } else if ($.inArray(lnData, [ "0", "false", cbv[1].toLowerCase() ]) >= 0) {
                    nData = false;
                }
            } else if (typeof oData === "number" && !isNaN(nData)) {
                if (cm.formatter === "number" || cm.formatter === "currency") {
                    nData = parseFloat(nData);
                } else if (cm.formatter === "integer") {
                    nData = parseInt(nData, 10);
                }
            }
            return nData;
        },
        "parseDataToHtml": function(len, ids, items, cellsToDisplay, rcnt, adjust, readAllInputData) {
            var self = this, p = self.p, $self = $(self), i, j, altr, cn1, selr, idr, rd, cells, iStartTrTag, selected = false, rowData = [], grpdata = [], cn = p.altRows === true && !$self.jqGrid("isBootstrapGuiStyle") ? p.altclass : "", hiderow = p.grouping ? p.groupingView.groupCollapse === true : false, rn = parseInt(p.rowNum, 10), cmName, $j = $.fn.jqGrid, rowIndex = p.treeGrid === true && p.treeANode > -1 ? self.rows[p.treeANode].rowIndex + 1 : self.rows.length, formatCol = self.formatCol, addCell = function(rowId, cell, pos, irow, srvr, rdata) {
                var v = self.formatter(rowId, cell, pos, srvr, "add", rdata);
                return "<td role='gridcell' " + formatCol(pos, irow, v, srvr, rowId, rdata) + ">" + v + "</td>";
            }, addMulti = function(rowid, pos, irow, checked, item) {
                var checkboxHtml = "&nbsp;", hasCbox = true;
                if ($.isFunction(p.hasMultiselectCheckBox)) {
                    hasCbox = p.hasMultiselectCheckBox.call(self, {
                        "rowid": rowid,
                        "iRow": irow,
                        "iCol": pos,
                        "data": item
                    });
                }
                if (hasCbox) {
                    checkboxHtml = "<input type='checkbox'" + " id='jqg_" + p.id + "_" + rowid + "' class='cbox' name='jqg_" + p.id + "_" + rowid + "'" + (checked ? " checked='checked' aria-checked='true'" : " aria-checked='false'") + "/>";
                }
                return "<td role='gridcell' " + formatCol(pos, irow, "", null, rowid, true) + ">" + checkboxHtml + "</td>";
            }, addRowNum = function(pos, irow, pG, rN) {
                var v = (parseInt(pG, 10) - 1) * parseInt(rN, 10) + 1 + irow;
                return "<td role='gridcell' class='" + $j.getGuiStyles.call($self, "rowNum", "jqgrid-rownum") + "' " + formatCol(pos, irow, v, null, irow, true) + ">" + v + "</td>";
            };
            if (rowIndex <= 1) {
                p.rowIndexes = {};
            }
            if (p.datatype === "local" && !p.deselectAfterSort || p.multiPageSelection) {
                selected = true;
            }
            if (adjust) {
                rn *= adjust + 1;
            }
            for (i = 0; i < Math.min(len, rn); i++) {
                idr = ids[i];
                rd = items[i];
                cells = cellsToDisplay != null ? cellsToDisplay[i] : rd;
                altr = rcnt === 1 ? 0 : rcnt;
                cn1 = (altr + i) % 2 === 1 ? cn : "";
                if (selected) {
                    if (p.multiselect) {
                        selr = $.inArray(idr, p.selarrrow) !== -1;
                        if (selr && p.selrow === null) {
                            p.selrow = idr;
                        }
                    } else {
                        selr = idr === p.selrow;
                    }
                }
                iStartTrTag = rowData.length;
                rowData.push("");
                for (j = 0; j < p.colModel.length; j++) {
                    cmName = p.colModel[j].name;
                    switch (cmName) {
                      case "rn":
                        rowData.push(addRowNum(j, i, p.page, p.rowNum));
                        break;

                      case "cb":
                        rowData.push(addMulti(idr, j, i, selr, rd));
                        break;

                      case "subgrid":
                        rowData.push($j.addSubGridCell.call($self, j, i + rcnt, idr, rd));
                        break;

                      default:
                        rowData.push(addCell(idr, rd[cmName], j, i + rcnt, cells, rd));
                    }
                }
                rowData[iStartTrTag] = self.constructTr(idr, hiderow, cn1, rd, cells, selr);
                rowData.push("</tr>");
                p.rowIndexes[idr] = rowIndex;
                rowIndex++;
                if (p.grouping && $j.groupingPrepare) {
                    grpdata.push(rowData);
                    if (!p.groupingView._locgr) {
                        $j.groupingPrepare.call($self, rd, i);
                    }
                    rowData = [];
                }
                if (rowData.length > p.maxItemsToJoin) {
                    rowData = [ rowData.join("") ];
                }
            }
            if (p.grouping && $j.groupingRender) {
                if (readAllInputData) {
                    p.groupingView._locgr = true;
                }
                rowData = [ $j.groupingRender.call($self, grpdata, rn) ];
                jgrid.clearArray(grpdata);
            }
            return rowData;
        },
        "getMethod": function(name) {
            return this.getAccessor($.fn.jqGrid, name);
        },
        "extend": function(methods) {
            $.extend($.fn.jqGrid, methods);
            if (!this.no_legacy_api) {
                $.fn.extend(methods);
            }
        }
    });
    var clearArray = jgrid.clearArray, jqID = jgrid.jqID, getGridComponentIdSelector = jgrid.getGridComponentIdSelector, getGridComponentId = jgrid.getGridComponentId, getGridComponent = jgrid.getGridComponent, stripPref = jgrid.stripPref, randId = jgrid.randId, getAccessor = jgrid.getAccessor, convertOnSaveLocally = jgrid.convertOnSaveLocally, stripHtml = jgrid.stripHtml, htmlEncode = jgrid.htmlEncode, htmlDecode = jgrid.htmlDecode, mergeCssClasses = jgrid.mergeCssClasses, hasOneFromClasses = jgrid.hasOneFromClasses, feedback = function() {
        var args = $.makeArray(arguments);
        args.unshift("");
        args.unshift("");
        args.unshift(this.p);
        return jgrid.feedback.apply(this, args);
    };
    $.fn.jqGrid = function(pin) {
        var $j = $.fn.jqGrid, fn;
        if (typeof pin === "string") {
            fn = $j[pin];
            if (!fn) {
                throw "jqGrid - No such method: " + pin;
            }
            return fn.apply(this, $.makeArray(arguments).slice(1));
        }
        return this.each(function() {
            if (this.grid) {
                return;
            }
            var ts = this, localData, localDataStr, $self0 = $(ts), isFunction = $.isFunction, isArray = $.isArray, extend = $.extend, inArray = $.inArray, trim = $.trim, each = $.each, setSelection = $j.setSelection, getGridRes = $j.getGridRes, fatalErrorFunction = isFunction(defaults.fatalError) ? defaults.fatalError : alert, locale = pin.locale || defaults.locale || "en-US", direction = locales[locale] != null && typeof locales[locale].isRTL === "boolean" ? locales[locale].isRTL ? "rtl" : "ltr" : "ltr", iconSet = pin.iconSet || defaults.iconSet || ((pin.guiStyle || defaults.guiStyle) === "bootstrap" || (pin.guiStyle || defaults.guiStyle) === "bootstrapPrimary" ? "glyph" : "jQueryUI"), guiStyle = pin.guiStyle || defaults.guiStyle || "jQueryUI", getIcon = function(path) {
                return $j.getIconRes.call(ts, path);
            }, getGuiStyles = function(path, jqClasses) {
                return $self0.jqGrid("getGuiStyles", path, jqClasses);
            }, stdLoadError = function(jqXHR, textStatus, errorThrown) {
                if (textStatus !== "abort" && errorThrown !== "abort") {
                    var contentType = jqXHR.getResponseHeader("Content-Type"), message = jqXHR.responseText || "", processHtmlError = function(msg) {
                        var div = document.createElement("div"), scripts, i, bodyMatch;
                        bodyMatch = /<body[^>]*>([\s\S]*)<\/body\s*>/gim.exec(msg);
                        div.innerHTML = bodyMatch != null && bodyMatch.length === 2 ? bodyMatch[1] : msg;
                        scripts = div.getElementsByTagName("script");
                        i = scripts.length;
                        while (i--) {
                            scripts[i].parentNode.removeChild(scripts[i]);
                        }
                        msg = div.innerHTML;
                        try {
                            if ($.trim($(msg).text()) === "") {
                                msg = "";
                            }
                        } catch (ignore) {}
                        return msg;
                    }, processJsonError = function(msg) {
                        try {
                            var errorInfo = $.parseJSON(msg), errorMessages = [], errorProp;
                            for (errorProp in errorInfo) {
                                if (errorInfo.hasOwnProperty(errorProp) && errorProp !== "StackTrace") {
                                    errorMessages.push(errorProp + ": " + errorInfo[errorProp]);
                                }
                            }
                            msg = errorMessages.join("<br />");
                        } catch (ignore) {}
                        return msg;
                    };
                    if (contentType === "text/html") {
                        message = processHtmlError(message);
                    } else if (contentType === "application/json") {
                        message = processJsonError(message);
                    } else if (contentType === "text/plain") {
                        message = processJsonError(message);
                    }
                    if (jqXHR.status !== 500 && jqXHR.status !== 0) {
                        message = (textStatus || errorThrown) + (errorThrown && errorThrown !== textStatus ? ": " + errorThrown : "") + " " + jqXHR.status + " " + jqXHR.statusText + (message !== "" ? "<hr />" : "") + message;
                    }
                    $self0.jqGrid("displayErrorMessage", message || textStatus || errorThrown);
                }
            };
            if (pin == null) {
                pin = {
                    "datatype": "local"
                };
            }
            if (pin.datastr !== undefined && isArray(pin.datastr)) {
                localDataStr = pin.datastr;
                pin.datastr = [];
            }
            if (pin.data !== undefined) {
                localData = pin.data;
                pin.data = [];
            }
            if (jgrid.formatter == null || jgrid.formatter.unused == null) {
                fatalErrorFunction("CRITICAL ERROR!!!\n\n\nOne uses probably\n\n	$.extend($.jgrid.defaults, {...});\n\nto set default settings of jqGrid instead of the usage the DEEP version of jQuery.extend (with true as the first parameter):\n\n	$.extend(true, $.jgrid.defaults, {...});\n\nOne other possible reason:\n\nyou included some OLD version of language file (grid.locale-en.js for example) AFTER jquery.jqGrid.min.js. For example all language files of jqGrid 4.7.0 uses non-deep call of jQuery.extend.\n\n\nSome options of jqGrid could still work, but another one will be broken.");
            }
            if (pin.datatype === undefined && pin.dataType !== undefined) {
                pin.datatype = pin.dataType;
                delete pin.dataType;
            }
            if (pin.mtype === undefined && pin.type !== undefined) {
                pin.mtype = pin.type;
                delete pin.type;
            }
            ts.p = {
                "iconSet": iconSet
            };
            var p = extend(true, {
                "height": "auto",
                "page": 1,
                "rowNum": 20,
                "maxRowNum": 1e4,
                "autoresizeOnLoad": false,
                "columnsToReResizing": [],
                "autoResizing": {
                    "wrapperClassName": "ui-jqgrid-cell-wrapper",
                    "minColWidth": 33,
                    "maxColWidth": 300,
                    "adjustGridWidth": true,
                    "compact": false,
                    "fixWidthOnShrink": false
                },
                "doubleClickSensitivity": 250,
                "minResizingWidth": 10,
                "rowTotal": null,
                "records": 0,
                "pager": "",
                "pgbuttons": true,
                "pginput": true,
                "colModel": [],
                "additionalProperties": [],
                "arrayReader": [],
                "rowList": [],
                "colNames": [],
                "sortorder": "asc",
                "threeStateSort": false,
                "sortname": "",
                "mtype": "GET",
                "altRows": false,
                "selarrrow": [],
                "savedRow": [],
                "shrinkToFit": true,
                "xmlReader": {},
                "subGrid": false,
                "subGridModel": [],
                "reccount": 0,
                "lastpage": 0,
                "lastsort": 0,
                "selrow": null,
                "singleSelectClickMode": "toggle",
                "beforeSelectRow": null,
                "onSelectRow": null,
                "onSortCol": null,
                "ondblClickRow": null,
                "onRightClickRow": null,
                "onPaging": null,
                "onSelectAll": null,
                "onInitGrid": null,
                "loadComplete": null,
                "gridComplete": null,
                "loadError": stdLoadError,
                "loadBeforeSend": null,
                "afterInsertRow": null,
                "beforeRequest": null,
                "beforeProcessing": null,
                "onHeaderClick": null,
                "viewrecords": false,
                "loadonce": false,
                "forceClientSorting": false,
                "multiselect": false,
                "multikey": false,
                "editurl": "clientArray",
                "search": false,
                "caption": "",
                "hidegrid": true,
                "hiddengrid": false,
                "useUnformattedDataForCellAttr": true,
                "postData": {},
                "userData": {},
                "treeGrid": false,
                "treeGridModel": "nested",
                "treeReader": {},
                "treeANode": -1,
                "ExpandColumn": null,
                "tree_root_level": 0,
                "prmNames": {
                    "page": "page",
                    "rows": "rows",
                    "sort": "sidx",
                    "order": "sord",
                    "search": "_search",
                    "nd": "nd",
                    "id": "id",
                    "oper": "oper",
                    "editoper": "edit",
                    "addoper": "add",
                    "deloper": "del",
                    "subgridid": "id",
                    "npage": null,
                    "totalrows": "totalrows"
                },
                "forceFit": false,
                "gridstate": "visible",
                "cellEdit": false,
                "iCol": -1,
                "iRow": -1,
                "nv": 0,
                "loadui": "enable",
                "toolbar": [ false, "" ],
                "scroll": false,
                "multiboxonly": false,
                "deselectAfterSort": true,
                "multiPageSelection": false,
                "scrollrows": false,
                "autowidth": false,
                "scrollOffset": 18,
                "cellLayout": 5,
                "subGridWidth": 16,
                "multiselectWidth": 16,
                "multiselectPosition": "left",
                "gridview": true,
                "rownumWidth": 25,
                "rownumbers": false,
                "pagerpos": "center",
                "footerrow": false,
                "userDataOnFooter": false,
                "hoverrows": true,
                "altclass": "ui-priority-secondary",
                "viewsortcols": [ false, "vertical", true ],
                "resizeclass": "",
                "autoencode": false,
                "autoEncodeOnEdit": false,
                "remapColumns": [],
                "cmNamesInputOrder": [],
                "ajaxGridOptions": {},
                "direction": direction,
                "toppager": false,
                "headertitles": false,
                "scrollTimeout": 40,
                "maxItemsToJoin": 32768,
                "data": [],
                "lastSelectedData": [],
                "quickEmpty": "quickest",
                "_index": {},
                "iColByName": {},
                "iPropByName": {},
                "reservedColumnNames": [ "rn", "cb", "subgrid" ],
                "grouping": false,
                "groupingView": {
                    "groupField": [],
                    "groupOrder": [],
                    "groupText": [],
                    "groupColumnShow": [],
                    "groupSummary": [],
                    "showSummaryOnHide": false,
                    "sortitems": [],
                    "sortnames": [],
                    "summary": [],
                    "summaryval": [],
                    "displayField": [],
                    "groupSummaryPos": [],
                    "formatDisplayField": [],
                    "_locgr": false,
                    "commonIconClass": getIcon("grouping.common"),
                    "plusicon": getIcon("grouping.plus"),
                    "minusicon": getIcon("grouping.minus")
                },
                "ignoreCase": true,
                "cmTemplate": {},
                "idPrefix": "",
                "iconSet": iconSet,
                "guiStyle": guiStyle,
                "locale": locale,
                "multiSort": false,
                "treeIcons": {
                    "commonIconClass": getIcon("treeGrid.common"),
                    "plusLtr": getIcon("treeGrid.plusLtr"),
                    "plusRtl": getIcon("treeGrid.plusRtl"),
                    "minus": getIcon("treeGrid.minus"),
                    "leaf": getIcon("treeGrid.leaf")
                },
                "subGridOptions": {
                    "commonIconClass": getIcon("subgrid.common"),
                    "plusicon": getIcon("subgrid.plus"),
                    "minusicon": getIcon("subgrid.minus")
                }
            }, defaults, {
                "navOptions": extend(true, {
                    "commonIconClass": getIcon("nav.common"),
                    "editicon": getIcon("nav.edit"),
                    "addicon": getIcon("nav.add"),
                    "delicon": getIcon("nav.del"),
                    "searchicon": getIcon("nav.search"),
                    "refreshicon": getIcon("nav.refresh"),
                    "viewicon": getIcon("nav.view"),
                    "saveicon": getIcon("nav.save"),
                    "cancelicon": getIcon("nav.cancel"),
                    "buttonicon": getIcon("nav.newbutton")
                }, jgrid.nav || {}),
                "actionsNavOptions": extend(true, {
                    "commonIconClass": getIcon("actions.common"),
                    "editicon": getIcon("actions.edit"),
                    "delicon": getIcon("actions.del"),
                    "saveicon": getIcon("actions.save"),
                    "cancelicon": getIcon("actions.cancel")
                }, jgrid.actionsNav || {}),
                "formEditing": extend(true, {
                    "commonIconClass": getIcon("form.common"),
                    "prevIcon": getIcon("form.prev"),
                    "nextIcon": getIcon("form.next"),
                    "saveicon": [ true, "left", getIcon("form.save") ],
                    "closeicon": [ true, "left", getIcon("form.undo") ]
                }, jgrid.edit || {}),
                "searching": extend(true, {
                    "commonIconClass": getIcon("search.common"),
                    "findDialogIcon": getIcon("search.search"),
                    "resetDialogIcon": getIcon("search.reset"),
                    "queryDialogIcon": getIcon("search.query")
                }, jgrid.search || {}),
                "formViewing": extend(true, {
                    "commonIconClass": getIcon("form.common"),
                    "prevIcon": getIcon("form.prev"),
                    "nextIcon": getIcon("form.next"),
                    "closeicon": [ true, "left", getIcon("form.cancel") ]
                }, jgrid.view || {}),
                "formDeleting": extend(true, {
                    "commonIconClass": getIcon("form.common"),
                    "delicon": [ true, "left", getIcon("form.del") ],
                    "cancelicon": [ true, "left", getIcon("form.cancel") ]
                }, jgrid.del || {})
            }, pin || {}), getRes = function(path) {
                return getGridRes.call($self0, path);
            }, getDef = function(path) {
                var gridParam = jgrid.getRes(p, path);
                return gridParam !== undefined ? gridParam : getGridRes.call($self0, "defaults." + path);
            };
            p.recordpos = p.recordpos || (p.direction === "rtl" ? "left" : "right");
            p.subGridOptions.openicon = p.direction === "rtl" ? getIcon("subgrid.openRtl") : getIcon("subgrid.openLtr");
            p.autoResizing.widthOfVisiblePartOfSortIcon = p.autoResizing.widthOfVisiblePartOfSortIcon !== undefined ? p.autoResizing.widthOfVisiblePartOfSortIcon : p.iconSet === "fontAwesome" ? 13 : 12;
            p.datatype = p.datatype !== undefined ? p.datatype : localData !== undefined || p.url == null ? "local" : p.jsonReader != null && typeof p.jsonReader === "object" ? "json" : "xml";
            p.jsonReader = p.jsonReader || {};
            p.url = p.url || "";
            p.cellsubmit = p.cellsubmit !== undefined ? p.cellsubmit : p.cellurl === undefined ? "clientArray" : "remote";
            p.gridview = p.gridview !== undefined ? p.gridview : p.afterInsertRow == null;
            if (localData !== undefined) {
                p.data = localData;
                pin.data = localData;
            }
            if (localDataStr !== undefined) {
                p.datastr = localDataStr;
                pin.datastr = localDataStr;
            }
            if (ts.tagName.toUpperCase() !== "TABLE") {
                fatalErrorFunction("Element is not a table!");
                return;
            }
            if (ts.id === "") {
                $self0.attr("id", randId());
            }
            if (document.documentMode !== undefined) {
                if (document.documentMode <= 5) {
                    fatalErrorFunction("Grid can not be used in this ('quirks') mode!");
                    return;
                }
            }
            $self0.empty().attr("tabindex", "0");
            ts.p = p;
            p.id = ts.id;
            p.idSel = "#" + jqID(ts.id);
            p.gBoxId = getGridComponentId.call(ts, COMPONENT_NAMES.GRID_BOX_DIV);
            p.gBox = getGridComponentIdSelector.call(ts, COMPONENT_NAMES.GRID_BOX_DIV);
            p.gViewId = getGridComponentId.call(ts, COMPONENT_NAMES.GRID_VIEW_DIV);
            p.gView = getGridComponentIdSelector.call(ts, COMPONENT_NAMES.GRID_VIEW_DIV);
            p.rsId = getGridComponentId.call(ts, COMPONENT_NAMES.COLUMN_RESIZER_DIV);
            p.rs = getGridComponentIdSelector.call(ts, COMPONENT_NAMES.COLUMN_RESIZER_DIV);
            p.cbId = getGridComponentId.call(ts, COMPONENT_NAMES.HEADER_SELECT_ALL_ROWS_CHECKBOX);
            p.cb = getGridComponentIdSelector.call(ts, COMPONENT_NAMES.HEADER_SELECT_ALL_ROWS_CHECKBOX);
            var fixScrollOffsetAndhBoxPadding = jgrid.fixScrollOffsetAndhBoxPadding, buildColNameMap = function(colModel) {
                var m = {}, i, n = colModel.length;
                for (i = 0; i < n; i++) {
                    m[colModel[i].name] = i;
                }
                return m;
            }, buildAddPropMap = function(additionalProperties) {
                var m = {}, i, n = additionalProperties.length, addPropInfo;
                for (i = 0; i < n; i++) {
                    addPropInfo = additionalProperties[i];
                    m[typeof addPropInfo === "string" ? addPropInfo : addPropInfo.name] = i;
                }
                return m;
            }, rebuildRowIndexes = function() {
                var rowIndexes = {}, row, i;
                this.p.rowIndexes = rowIndexes;
                for (i = 0; i < this.rows.length; i++) {
                    row = this.rows[i];
                    if ($(row).hasClass("jqgrow")) {
                        rowIndexes[row.id] = row.rowIndex;
                    }
                }
            }, buildArrayReader = function() {
                var i, colModel = p.colModel, cmNamesInputOrder = p.cmNamesInputOrder, additionalProperties = p.additionalProperties, n = cmNamesInputOrder.length, arrayReaderInfos, name, index, order;
                p.arrayReaderInfos = {};
                arrayReaderInfos = p.arrayReaderInfos;
                for (order = 0; order < n; order++) {
                    name = cmNamesInputOrder[order];
                    if (inArray(name, p.reservedColumnNames) < 0 && !arrayReaderInfos.hasOwnProperty(name)) {
                        index = p.iColByName[name];
                        if (index !== undefined) {
                            arrayReaderInfos[name] = {
                                "name": colModel[index].name,
                                "index": index,
                                "order": order,
                                "type": 0
                            };
                        } else {
                            index = p.iPropByName[name];
                            if (index !== undefined) {
                                arrayReaderInfos[name] = {
                                    "name": colModel[index].name,
                                    "index": index,
                                    "order": order,
                                    "type": 1
                                };
                            } else if (name === (p.prmNames.rowidName || "rowid")) {
                                arrayReaderInfos[name] = {
                                    "index": index,
                                    "type": 2
                                };
                            }
                        }
                    }
                }
                n = colModel.length;
                for (i = 0; i < n; i++) {
                    name = colModel[i].name;
                    if (inArray(name, p.reservedColumnNames) < 0 && !arrayReaderInfos.hasOwnProperty(name)) {
                        arrayReaderInfos[name] = {
                            "name": name,
                            "index": i,
                            "order": order,
                            "type": 0
                        };
                        order++;
                    }
                }
                n = additionalProperties.length;
                for (i = 0; i < n; i++) {
                    name = additionalProperties[i];
                    if (name != null && !arrayReaderInfos.hasOwnProperty(name)) {
                        if (typeof name === "object" && $.type(name.name) === "string") {
                            name = name.name;
                        }
                        arrayReaderInfos[name] = {
                            "name": name,
                            "index": i,
                            "order": order,
                            "type": 1
                        };
                        order++;
                    }
                }
            }, myResizerClickHandler = function(e) {
                var pageX = $(this).data("pageX");
                if (pageX) {
                    pageX = String(pageX).split(";");
                    pageX = pageX[pageX.length - 1];
                    $(this).data("pageX", pageX + ";" + e.pageX);
                } else {
                    $(this).data("pageX", e.pageX);
                }
            }, intNum = function(val, defval) {
                val = parseInt(val, 10);
                if (isNaN(val)) {
                    return defval || 0;
                }
                return val;
            }, grid = {
                "headers": [],
                "cols": [],
                "footers": [],
                "dragStart": function(i, x, y, $th) {
                    var self = this, $bDiv = $(self.bDiv), gridOffset = $bDiv.closest(p.gBox).offset(), startX = $th.offset().left + (p.direction === "rtl" ? 0 : self.headers[i].width + (jgrid.cell_width ? 0 : intNum(p.cellLayout, 0)) - 2);
                    self.resizing = {
                        "idx": i,
                        "startX": startX,
                        "sOL": startX,
                        "moved": false,
                        "delta": startX - x.pageX
                    };
                    self.curGbox = $(p.rs);
                    self.curGbox.prependTo("body");
                    self.curGbox.css({
                        "display": "block",
                        "left": startX,
                        "top": y[1] + gridOffset.top + 1,
                        "height": y[2]
                    });
                    self.curGbox.css("height", y[2] - (self.curGbox.outerHeight() - self.curGbox.height()) + "px");
                    self.curGbox.data("idx", i);
                    self.curGbox.data("delta", startX - x.pageX);
                    myResizerClickHandler.call(this.curGbox, x);
                    feedback.call(getGridComponent(COMPONENT_NAMES.BODY_TABLE, $bDiv)[0], "resizeStart", x, i);
                    document.onselectstart = function() {
                        return false;
                    };
                    $(document).bind("mousemove.jqGrid", function(e) {
                        if (grid.resizing) {
                            grid.dragMove(e);
                            return false;
                        }
                    }).bind("mouseup.jqGrid" + p.id, function() {
                        if (grid.resizing) {
                            grid.dragEnd();
                            return false;
                        }
                    });
                },
                "dragMove": function(x) {
                    var self = this, resizing = self.resizing;
                    if (resizing) {
                        var diff = x.pageX + resizing.delta - resizing.startX, headers = self.headers, h = headers[resizing.idx], newWidth = p.direction === "ltr" ? h.width + diff : h.width - diff, hn, nWn, minResizingWidth = ((p.colModel[resizing.idx] || {}).autoResizing || {}).minColWidth || p.minResizingWidth;
                        resizing.moved = true;
                        if (newWidth > minResizingWidth) {
                            if (self.curGbox == null) {
                                self.curGbox = $(p.rs);
                            }
                            self.curGbox.css({
                                "left": resizing.sOL + diff
                            });
                            if (p.forceFit === true) {
                                hn = headers[resizing.idx + p.nv];
                                nWn = p.direction === "ltr" ? hn.width - diff : hn.width + diff;
                                if (nWn > p.autoResizing.minColWidth) {
                                    h.newWidth = newWidth;
                                    hn.newWidth = nWn;
                                }
                            } else {
                                self.newWidth = p.direction === "ltr" ? p.tblwidth + diff : p.tblwidth - diff;
                                h.newWidth = newWidth;
                            }
                        }
                    }
                },
                "resizeColumn": function(idx, skipCallbacks, skipGridAdjustments) {
                    var self = this, headers = self.headers, footers = self.footers, h = headers[idx], hn, nw = h.newWidth || h.width, $bTable = getGridComponent(COMPONENT_NAMES.BODY_TABLE, self.bDiv), $hTable = getGridComponent(COMPONENT_NAMES.HEADER_TABLE, self.hDiv), hCols = $hTable.children("thead").children("tr").first()[0].cells;
                    nw = parseInt(nw, 10);
                    p.colModel[idx].width = nw;
                    h.width = nw;
                    hCols[idx].style.width = nw + "px";
                    self.cols[idx].style.width = nw + "px";
                    if (self.fbRows) {
                        $(self.fbRows[0].cells[idx]).css("width", nw);
                        $(getGridComponent(COMPONENT_NAMES.FROZEN_HEADER_TABLE, self.fhDiv)[0].rows[0].cells[idx]).css("width", nw);
                    }
                    if (footers.length > 0) {
                        footers[idx].style.width = nw + "px";
                    }
                    if (skipGridAdjustments !== true) {
                        fixScrollOffsetAndhBoxPadding.call($bTable[0]);
                    }
                    if (p.forceFit === true) {
                        hn = headers[idx + p.nv];
                        nw = hn.newWidth || hn.width;
                        hn.width = nw;
                        hCols[idx + p.nv].style.width = nw + "px";
                        self.cols[idx + p.nv].style.width = nw + "px";
                        if (footers.length > 0) {
                            footers[idx + p.nv].style.width = nw + "px";
                        }
                        p.colModel[idx + p.nv].width = nw;
                    } else {
                        p.tblwidth = self.newWidth || p.tblwidth;
                        if (skipGridAdjustments !== true) {
                            self.hDiv.scrollLeft = self.bDiv.scrollLeft;
                            if (p.footerrow) {
                                self.sDiv.scrollLeft = self.bDiv.scrollLeft;
                            }
                        }
                    }
                    if (!p.autowidth && (p.widthOrg === undefined || p.widthOrg === "auto" || p.widthOrg === "100%") && skipGridAdjustments !== true) {
                        $j.setGridWidth.call($bTable, self.newWidth + p.scrollOffset, false);
                    }
                    if (!skipCallbacks) {
                        feedback.call($bTable[0], "resizeStop", nw, idx);
                    }
                },
                "dragEnd": function() {
                    var self = this;
                    self.hDiv.style.cursor = "default";
                    if (self.resizing) {
                        if (self.resizing !== null && self.resizing.moved === true) {
                            $(self.headers[self.resizing.idx].el).removeData("autoResized");
                            self.resizeColumn(self.resizing.idx, false);
                        }
                        $(p.rs).removeData("pageX");
                        self.resizing = false;
                        setTimeout(function() {
                            $(p.rs).css("display", "none").prependTo(p.gBox);
                        }, p.doubleClickSensitivity);
                    }
                    self.curGbox = null;
                    document.onselectstart = function() {
                        return true;
                    };
                    $(document).unbind("mousemove.jqGrid").unbind("mouseup.jqGrid" + p.id);
                },
                "populateVisible": function() {
                    var self = this, $self = $(self), gridSelf = self.grid, bDiv = gridSelf.bDiv, $bDiv = $(bDiv);
                    if (gridSelf.timer) {
                        clearTimeout(gridSelf.timer);
                    }
                    gridSelf.timer = null;
                    var dh = $bDiv.height();
                    if (!dh) {
                        return;
                    }
                    var firstDataRow, rh;
                    if (self.rows.length) {
                        try {
                            firstDataRow = self.rows[1];
                            rh = firstDataRow ? $(firstDataRow).outerHeight() || gridSelf.prevRowHeight : gridSelf.prevRowHeight;
                        } catch (pv) {
                            rh = gridSelf.prevRowHeight;
                        }
                    }
                    if (!rh) {
                        return;
                    }
                    gridSelf.prevRowHeight = rh;
                    var rn = p.rowNum;
                    gridSelf.scrollTop = bDiv.scrollTop;
                    var scrollTop = gridSelf.scrollTop;
                    var ttop = Math.round($self.position().top) - scrollTop;
                    var tbot = ttop + $self.height();
                    var div = rh * rn;
                    var page, npage, empty;
                    if (tbot < dh && ttop <= 0 && (p.lastpage === undefined || (parseInt((tbot + scrollTop + div - 1) / div, 10) || 0) <= p.lastpage)) {
                        npage = parseInt((dh - tbot + div - 1) / div, 10) || 1;
                        if (tbot >= 0 || npage < 2 || p.scroll === true) {
                            page = (Math.round((tbot + scrollTop) / div) || 0) + 1;
                            ttop = -1;
                        } else {
                            ttop = 1;
                        }
                    }
                    if (ttop > 0) {
                        page = (parseInt(scrollTop / div, 10) || 0) + 1;
                        npage = (parseInt((scrollTop + dh) / div, 10) || 0) + 2 - page;
                        empty = true;
                    }
                    if (npage) {
                        if (p.lastpage && (page > p.lastpage || p.lastpage === 1 || page === p.page && page === p.lastpage)) {
                            return;
                        }
                        if (gridSelf.hDiv.loading) {
                            gridSelf.timer = setTimeout(function() {
                                gridSelf.populateVisible.call(self);
                            }, p.scrollTimeout);
                        } else {
                            p.page = page;
                            if (empty) {
                                gridSelf.selectionPreserver.call(self);
                                gridSelf.emptyRows.call(self, false, false);
                            }
                            gridSelf.populate.call(self, npage);
                        }
                    }
                },
                "scrollGrid": function() {
                    if (p.scroll) {
                        var scrollTop = this.scrollTop;
                        if (grid.scrollTop === undefined) {
                            grid.scrollTop = 0;
                        }
                        if (scrollTop !== grid.scrollTop) {
                            grid.scrollTop = scrollTop;
                            if (grid.timer) {
                                clearTimeout(grid.timer);
                            }
                            grid.timer = setTimeout(function() {
                                grid.populateVisible.call(ts);
                            }, p.scrollTimeout);
                        }
                    }
                    grid.hDiv.scrollLeft = this.scrollLeft;
                    if (p.footerrow) {
                        grid.sDiv.scrollLeft = this.scrollLeft;
                    }
                    return false;
                },
                "selectionPreserver": function() {
                    var self = this, $self = $(self), sr = p.selrow, sra = p.selarrrow ? $.makeArray(p.selarrrow) : null, bDiv = self.grid.bDiv, left = bDiv.scrollLeft, restoreSelection = function() {
                        var i;
                        p.selrow = null;
                        if (!p.multiPageSelection) {
                            clearArray(p.selarrrow);
                            if (p.multiselect && sra && sra.length > 0) {
                                for (i = 0; i < sra.length; i++) {
                                    if (sra[i] !== sr) {
                                        setSelection.call($self, sra[i], false, null);
                                    }
                                }
                            }
                            if (sr) {
                                setSelection.call($self, sr, false, null);
                            }
                        }
                        bDiv.scrollLeft = left;
                        $self.unbind(".selectionPreserver", restoreSelection);
                    };
                    $self.bind("jqGridGridComplete.selectionPreserver", restoreSelection);
                }
            };
            ts.grid = grid;
            feedback.call(ts, "beforeInitGrid");
            p.iColByName = buildColNameMap(p.colModel);
            p.iPropByName = buildAddPropMap(p.additionalProperties);
            var gv = $("<div class='" + getGuiStyles("gView", "ui-jqgrid-view") + "' role='grid' aria-multiselectable='" + !!p.multiselect + "'></div>"), isMSIE = jgrid.msie, dir;
            p.direction = trim(p.direction.toLowerCase());
            if (inArray(p.direction, [ "ltr", "rtl" ]) === -1) {
                p.direction = "ltr";
            }
            dir = p.direction;
            $(gv).insertBefore(ts);
            $self0.removeClass("scroll").appendTo(gv);
            var eg = $("<div class='" + getGuiStyles("gBox", "ui-jqgrid") + "'></div>");
            $(eg).attr({
                "id": p.gBoxId,
                "dir": dir
            }).insertBefore(gv);
            $(gv).attr("id", p.gViewId).appendTo(eg);
            $("<div class='" + getGuiStyles("overlay", "jqgrid-overlay") + "' id='lui_" + p.id + "'></div>").insertBefore(gv);
            $("<div class='" + getGuiStyles("loading", "loading") + "' id='load_" + p.id + "'>" + getDef("loadtext") + "</div>").insertBefore(gv);
            $self0.attr({
                "role": "presentation",
                "aria-labelledby": "gbox_" + ts.id
            });
            var sortkeys = [ "shiftKey", "altKey", "ctrlKey" ], normalizeRemapColumns = function() {
                var remapColumns = p.remapColumns, colModel = p.colModel, nCol = colModel.length, cmNames = [], i, remappedCmNames, name;
                for (i = 0; i < nCol; i++) {
                    name = colModel[i].name;
                    if (inArray(name, p.reservedColumnNames) < 0) {
                        cmNames.push(name);
                    }
                }
                if (remapColumns != null) {
                    remappedCmNames = cmNames.slice();
                    for (i = 0; i < remapColumns.length; i++) {
                        cmNames[i] = remappedCmNames[remapColumns[i]];
                    }
                }
                p.cmNamesInputOrder = cmNames;
            }, stripGridPrefix = function(rowId) {
                return stripPref(p.idPrefix, rowId);
            }, formatCol = function(pos, rowInd, tv, rawObject, rowId, rdata) {
                var cm = p.colModel[pos], cellAttrFunc, cellValue = tv, rPrefix, result, classes = cm.classes, styleValue = cm.align ? "text-align:" + cm.align + ";" : "", attrStr, matches, value, tilteValue, encodeAttr = function(v) {
                    return typeof v === "string" ? v.replace(/\'/g, "&#39;") : v;
                }, rest = " aria-describedby='" + p.id + "_" + cm.name + "'";
                if (cm.hidden === true) {
                    styleValue += "display:none;";
                }
                if (rowInd === 0) {
                    styleValue += "width: " + grid.headers[pos].width + "px;";
                } else if (isFunction(cm.cellattr) || typeof cm.cellattr === "string" && jgrid.cellattr != null && isFunction(jgrid.cellattr[cm.cellattr])) {
                    cellAttrFunc = isFunction(cm.cellattr) ? cm.cellattr : jgrid.cellattr[cm.cellattr];
                    if (p.useUnformattedDataForCellAttr && rdata != null) {
                        cellValue = rdata[cm.name];
                    } else if (cm.autoResizable) {
                        rPrefix = "<span class='" + p.autoResizing.wrapperClassName + "'>";
                        cellValue = tv.substring(rPrefix.length, tv.length - "</span>".length);
                    }
                    attrStr = cellAttrFunc.call(ts, rowId, cellValue, rawObject, cm, rdata);
                    if (typeof attrStr === "string") {
                        attrStr = attrStr.replace(/\n/g, "&#xA;");
                        while (true) {
                            matches = /^\s*(\w+[\w|\-]*)\s*=\s*([\"|\'])(.*?)\2(.*)/.exec(attrStr);
                            if (matches === null || matches.length < 5) {
                                if (!tilteValue && cm.title) {
                                    tilteValue = cellValue;
                                }
                                return rest + " style='" + encodeAttr(styleValue) + "'" + (classes ? " class='" + encodeAttr(classes) + "'" : "") + (tilteValue ? " title='" + encodeAttr(tilteValue) + "'" : "");
                            }
                            value = matches[3];
                            attrStr = matches[4];
                            switch (matches[1].toLowerCase()) {
                              case "class":
                                if (classes) {
                                    classes += " " + value;
                                } else {
                                    classes = value;
                                }
                                break;

                              case "title":
                                tilteValue = value;
                                break;

                              case "style":
                                styleValue += value;
                                break;

                              default:
                                rest += " " + matches[1] + "=" + matches[2] + value + matches[2];
                                break;
                            }
                        }
                    }
                }
                result = styleValue !== "" ? "style='" + styleValue + "'" : "";
                result += (classes !== undefined ? " class='" + classes + "'" : "") + (cm.title && cellValue ? " title='" + stripHtml(tv).replace(/\'/g, "&apos;") + "'" : "");
                result += rest;
                return result;
            }, cellVal = function(val) {
                return val == null || val === "" ? "&#160;" : p.autoencode ? htmlEncode(val) : String(val);
            }, normalizeTreeGridProperties = function(ldat) {
                var treeReader = p.treeReader, loaded = treeReader.loaded, isLeaf = treeReader.leaf_field, expanded = treeReader.expanded_field, getBool = function(val) {
                    return val === true || val === "true" || val === "1";
                };
                if (p.treeGridModel === "nested" && !ldat[isLeaf]) {
                    var lft = parseInt(ldat[treeReader.left_field], 10), rgt = parseInt(ldat[treeReader.right_field], 10);
                    ldat[isLeaf] = rgt === lft + 1 ? true : false;
                }
                if (ldat[loaded] !== undefined) {
                    ldat[loaded] = getBool(ldat[loaded]);
                }
                ldat[isLeaf] = getBool(ldat[isLeaf]);
                ldat[expanded] = getBool(ldat[expanded]);
            }, formatter = function(rowId, cellval, colpos, rwdat, act, rdata) {
                var cm = p.colModel[colpos], v;
                if (cm.formatter !== undefined) {
                    rowId = String(p.idPrefix) !== "" ? stripGridPrefix(rowId) : rowId;
                    var opts = {
                        "rowId": rowId,
                        "colModel": cm,
                        "gid": p.id,
                        "pos": colpos,
                        "rowData": rdata || rwdat
                    };
                    if (isFunction(cm.cellBuilder)) {
                        v = cm.cellBuilder.call(ts, cellval, opts, rwdat, act);
                    } else if (isFunction(cm.formatter)) {
                        v = cm.formatter.call(ts, cellval, opts, rwdat, act);
                    } else if ($.fmatter) {
                        v = $.fn.fmatter.call(ts, cm.formatter, cellval, opts, rwdat, act);
                    } else {
                        v = cellVal(cellval);
                    }
                } else {
                    v = cellVal(cellval);
                }
                v = cm.autoResizable && cm.formatter !== "actions" ? "<span class='" + p.autoResizing.wrapperClassName + "'>" + v + "</span>" : v;
                if (p.treeGrid && act !== "edit" && (p.ExpandColumn === undefined && colpos === 0 || p.ExpandColumn === cm.name)) {
                    if (rdata == null) {
                        rdata = p.data[p._index[rowId]];
                    }
                    var curLevel = parseInt(rdata[p.treeReader.level_field] || 0, 10), levelOffset = 18, rootLevel = parseInt(p.tree_root_level, 10), lftpos = rootLevel === 0 ? curLevel : curLevel - 1, isLeaf = rdata[p.treeReader.leaf_field], isExpanded = rdata[p.treeReader.expanded_field], icon = rdata[p.treeReader.icon_field], iconClass = isLeaf ? (icon != null && icon !== "" ? icon : p.treeIcons.leaf) + " tree-leaf" : isExpanded ? p.treeIcons.minus + " tree-minus" : p.treeIcons.plus + " tree-plus";
                    v = "<div class='tree-wrap' style='width:" + (lftpos + 1) * levelOffset + "px;'><div class='" + mergeCssClasses(p.treeIcons.commonIconClass, iconClass, "treeclick") + "' style='" + (p.ExpandColClick === true ? "cursor:pointer;" : "") + (p.direction === "rtl" ? "margin-right:" : "margin-left:") + lftpos * levelOffset + "px;'></div></div>" + "<span class='cell-wrapper" + (isLeaf ? "leaf" : "") + "'" + (p.ExpandColClick ? " style='cursor:pointer;'" : "") + ">" + v + "</span>";
                }
                return v;
            }, emptyRows = function(scroll, locdata) {
                var self = this, bDiv = grid.bDiv, frozenTable = grid.fbDiv != null ? grid.fbDiv.children(".ui-jqgrid-btable")[0] : null, removeRows = function(table) {
                    if (!table) {
                        return;
                    }
                    var tableRows = table.rows, firstrow = tableRows[0];
                    if (p.deepempty) {
                        if (tableRows) {
                            $(tableRows).slice(1).remove();
                        }
                    } else if (p.quickEmpty) {
                        if (p.quickEmpty === "quickest") {
                            table.replaceChild(document.createElement("tbody"), table.tBodies[0]);
                            table.firstChild.appendChild(firstrow);
                        } else {
                            while (tableRows.length > 1) {
                                table.deleteRow(tableRows.length - 1);
                            }
                        }
                    } else {
                        $(table.firstChild).empty().append(firstrow);
                    }
                };
                $(self).unbind(".jqGridFormatter");
                removeRows(self);
                removeRows(frozenTable);
                if (scroll && p.scroll) {
                    $(bDiv.firstChild).css({
                        "height": "auto"
                    });
                    $(bDiv.firstChild.firstChild).css({
                        "height": 0,
                        "display": "none"
                    });
                    if (bDiv.scrollTop !== 0) {
                        bDiv.scrollTop = 0;
                    }
                }
                if (locdata === true && p.treeGrid) {
                    clearArray(p.data);
                    clearArray(p.lastSelectedData);
                    p._index = {};
                }
                p.rowIndexes = {};
                p.iRow = -1;
                p.iCol = -1;
            }, normalizeData = function() {
                var data = p.data, dataLength = data.length, i, cur, cells, idName, idIndex, v, rd, id, localReader = p.localReader, additionalProperties = p.additionalProperties, cellName = localReader.cell, cmName, isArrayCells, addProp, info, arrayReaderInfos = p.arrayReaderInfos;
                if (p.datatype !== "local" || localReader.repeatitems !== true) {
                    if (p.treeGrid) {
                        for (i = 0; i < dataLength; i++) {
                            normalizeTreeGridProperties(data[i]);
                        }
                    }
                    return;
                }
                idName = p.keyName === false ? isFunction(localReader.id) ? localReader.id.call(ts, data) : localReader.id : p.keyName;
                if (!isNaN(idName)) {
                    idIndex = Number(idName);
                } else if (!isFunction(idName)) {
                    if (p.arrayReaderInfos[idName] != null) {
                        idIndex = p.arrayReaderInfos[idName].order;
                    }
                }
                for (i = 0; i < dataLength; i++) {
                    cur = data[i];
                    cells = cellName ? getAccessor(cur, cellName) || cur : cur;
                    isArrayCells = isArray(cells);
                    rd = {};
                    for (cmName in arrayReaderInfos) {
                        if (arrayReaderInfos.hasOwnProperty(cmName)) {
                            info = arrayReaderInfos[cmName];
                            v = getAccessor(cells, isArrayCells ? info.order : info.name);
                            if (info.type === 1) {
                                addProp = additionalProperties[info.index];
                                if (addProp != null && isFunction(addProp.convert)) {
                                    v = addProp.convert(v, cells);
                                }
                            }
                            if (v !== undefined) {
                                rd[cmName] = v;
                            }
                        }
                    }
                    if (rd[idName] !== undefined) {
                        id = rd[idName] !== undefined ? rd[idName] : randId();
                    } else {
                        id = getAccessor(cur, isArray(cur) ? idIndex : idName);
                        if (id === undefined) {
                            id = getAccessor(cells, isArray(cells) ? idIndex : idName);
                        }
                        if (id === undefined) {
                            id = randId();
                        }
                    }
                    id = String(id);
                    rd[localReader.id] = id;
                    if (p.treeGrid) {
                        normalizeTreeGridProperties(rd);
                    }
                    extend(data[i], rd);
                }
            }, refreshIndex = function() {
                var datalen = p.data.length, idname, i, val, item;
                if (p.keyName === false || p.loadonce) {
                    idname = p.localReader.id;
                } else {
                    idname = p.keyName;
                }
                p._index = {};
                for (i = 0; i < datalen; i++) {
                    item = p.data[i];
                    val = getAccessor(item, idname);
                    if (val === undefined) {
                        val = String(randId());
                        if (item[idname] === undefined) {
                            item[idname] = val;
                        }
                    }
                    p._index[val] = i;
                }
            }, constructTr = function(id, hide, altClass, rd, cur, selected) {
                var tabindex = "-1", restAttr = "", attrName, style = hide ? "display:none;" : "", self = this, classes = getGuiStyles("gridRow", "jqgrow ui-row-" + p.direction) + (altClass ? " " + altClass : "") + (selected ? " " + getGuiStyles("states.select") : ""), rowAttrObj = $(self).triggerHandler("jqGridRowAttr", [ rd, cur, id ]);
                if (typeof rowAttrObj !== "object") {
                    rowAttrObj = isFunction(p.rowattr) ? p.rowattr.call(self, rd, cur, id) : typeof p.rowattr === "string" && jgrid.rowattr != null && isFunction(jgrid.rowattr[p.rowattr]) ? jgrid.rowattr[p.rowattr].call(self, rd, cur, id) : {};
                }
                if (rowAttrObj != null && !$.isEmptyObject(rowAttrObj)) {
                    if (rowAttrObj.hasOwnProperty("id")) {
                        id = rowAttrObj.id;
                        delete rowAttrObj.id;
                    }
                    if (rowAttrObj.hasOwnProperty("tabindex")) {
                        tabindex = rowAttrObj.tabindex;
                        delete rowAttrObj.tabindex;
                    }
                    if (rowAttrObj.hasOwnProperty("style")) {
                        style += rowAttrObj.style;
                        delete rowAttrObj.style;
                    }
                    if (rowAttrObj.hasOwnProperty("class")) {
                        classes += " " + rowAttrObj["class"];
                        delete rowAttrObj["class"];
                    }
                    try {
                        delete rowAttrObj.role;
                    } catch (ignore) {}
                    for (attrName in rowAttrObj) {
                        if (rowAttrObj.hasOwnProperty(attrName)) {
                            restAttr += " " + attrName + "=" + rowAttrObj[attrName];
                        }
                    }
                }
                if (p.treeGrid) {
                    if (parseInt(rd[p.treeReader.level_field], 10) !== parseInt(p.tree_root_level, 10)) {
                        var pn = $j.getNodeParent.call($(this), rd), expan = pn && pn.hasOwnProperty(p.treeReader.expanded_field) ? pn[p.treeReader.expanded_field] : true;
                        if (!expan && !hide) {
                            style += "display:none;";
                        }
                    }
                }
                return "<tr role='row' id='" + id + "' tabindex='" + tabindex + "' class='" + classes + "'" + (style === "" ? "" : " style='" + style + "'") + restAttr + ">";
            }, finalizationFormatters = function() {
                var i, formatName, fmatter = $.fn.fmatter;
                for (i = 0; i < p.colModel.length; i++) {
                    formatName = p.colModel[i].formatter;
                    if (typeof formatName === "string" && fmatter != null && isFunction(fmatter[formatName]) && isFunction(fmatter[formatName].pageFinalization)) {
                        fmatter[formatName].pageFinalization.call(this, i);
                    }
                }
            }, fillOrClearCellBuilder = function(clear, act) {
                var i, cm, colModel = p.colModel, n = colModel.length, opt, autoencodeCellBuilder = function(v) {
                    return v == null || v === "" ? "&#160;" : htmlEncode(v);
                }, simpleCellBuilder = function(v) {
                    return v == null || v === "" ? "&#160;" : String(v);
                };
                for (i = 0; i < n; i++) {
                    cm = colModel[i];
                    cm.cellBuilder = null;
                    if (!clear) {
                        opt = {
                            "colModel": cm,
                            "gid": p.id,
                            "pos": i
                        };
                        if (cm.formatter === undefined) {
                            cm.cellBuilder = p.autoencode ? autoencodeCellBuilder : simpleCellBuilder;
                        } else if (typeof cm.formatter === "string" && $.fn.fmatter != null && isFunction($.fn.fmatter.getCellBuilder)) {
                            cm.cellBuilder = $.fn.fmatter.getCellBuilder.call(ts, cm.formatter, opt, act || "add");
                        } else if (isFunction(cm.getCellBuilder)) {
                            cm.cellBuilder = cm.getCellBuilder.call(ts, opt, act || "add");
                        }
                    }
                }
            }, readInput = function(data, rcnt, more, adjust) {
                var self = this, $self = $(self), startReq = new Date(), datatype = p.datatype, readAllInputData = datatype !== "local" && p.loadonce || datatype === "xmlstring" || datatype === "jsonstring", isXML = (datatype === "xmlstring" || datatype === "xml") && $.isXMLDoc(data), locid = "_id_", dataReader = p.localReader, fieldReader = getAccessor;
                if (data) {
                    if (datatype === "xml" && !isXML) {
                        return;
                    }
                    if (p.treeANode === -1 && !p.scroll) {
                        grid.emptyRows.call(self, false, true);
                        rcnt = 1;
                    } else {
                        rcnt = rcnt > 1 ? rcnt : 1;
                    }
                } else {
                    return;
                }
                if (readAllInputData) {
                    clearArray(p.data);
                    clearArray(p.lastSelectedData);
                    p._index = {};
                    if (p.grouping && p.groupingView != null) {
                        p.groupingView.groups = [];
                        p.groupingView._locgr = false;
                    }
                    p.localReader.id = locid;
                }
                p.reccount = 0;
                switch (datatype) {
                  case "xml":
                  case "xmlstring":
                    dataReader = p.xmlReader;
                    fieldReader = jgrid.getXmlData;
                    break;

                  case "json":
                  case "jsonp":
                  case "jsonstring":
                    dataReader = p.jsonReader;
                    break;

                  default:
                    break;
                }
                var i, cells, len, drows, idName, idIndex, rd = {}, idr, colModel = p.colModel, nCol = colModel.length, cmName, iChild, children, nChildren, child, arrayReaderInfos = p.arrayReaderInfos, info, preloadedNodes = {}, attrReader = function(nodeName) {
                    return function(obj) {
                        var attrValue = obj != null && isFunction(obj.getAttribute) ? obj.getAttribute(nodeName) : null;
                        return attrValue !== null ? attrValue : undefined;
                    };
                }, nodeReader = function(nodeName) {
                    return function() {
                        var elem = preloadedNodes[nodeName], childNodes;
                        if (elem == null) {
                            return undefined;
                        }
                        childNodes = elem.childNodes;
                        return childNodes.length > 0 ? childNodes[0].nodeValue : undefined;
                    };
                };
                p.page = intNum(fieldReader(data, dataReader.page), p.page);
                p.lastpage = intNum(fieldReader(data, dataReader.total), 1);
                p.records = intNum(fieldReader(data, dataReader.records));
                if (isFunction(dataReader.userdata)) {
                    p.userData = dataReader.userdata.call(self, data) || {};
                } else if (isXML) {
                    fieldReader(data, dataReader.userdata, true).each(function() {
                        p.userData[this.getAttribute("name")] = $(this).text();
                    });
                } else {
                    p.userData = fieldReader(data, dataReader.userdata) || {};
                }
                fillOrClearCellBuilder();
                var colReader = {}, isArrayCells, v, addProp, items, additionalProperties = p.additionalProperties, setSimpleColReaderIfPossible = function(propName, nameReaderOrAddProp) {
                    if (isXML && typeof nameReaderOrAddProp === "string") {
                        if (/^\w+$/.test(nameReaderOrAddProp)) {
                            colReader[propName] = nodeReader(nameReaderOrAddProp);
                        } else if (/^\[\w+\]$/.test(nameReaderOrAddProp)) {
                            colReader[propName] = attrReader(nameReaderOrAddProp.substring(1, nameReaderOrAddProp.length - 1));
                        }
                    }
                }, colReaderFilling = function(colOrAddProp) {
                    var colOrAddPropName = colOrAddProp.name, nameReader = isXML ? colOrAddProp.xmlmap || colOrAddPropName : datatype === "local" && !p.dataTypeOrg || datatype === "jsonstring" || datatype === "json" || datatype === "jsonp" ? colOrAddProp.jsonmap || colOrAddPropName : colOrAddPropName;
                    if (p.keyName !== false && colOrAddProp.key === true) {
                        p.keyName = colOrAddPropName;
                    }
                    if (typeof nameReader === "string" || isFunction(nameReader)) {
                        colReader[colOrAddPropName] = nameReader;
                    }
                    if (!isFunction(nameReader)) {
                        setSimpleColReaderIfPossible(colOrAddPropName, nameReader);
                    }
                };
                for (i = 0; i < nCol; i++) {
                    colReaderFilling(colModel[i]);
                }
                nCol = additionalProperties.length;
                for (i = 0; i < nCol; i++) {
                    addProp = additionalProperties[i];
                    if (typeof addProp === "object" && addProp != null) {
                        colReaderFilling(addProp);
                    } else {
                        setSimpleColReaderIfPossible(addProp, addProp);
                    }
                }
                idName = p.keyName === false ? isFunction(dataReader.id) ? dataReader.id.call(self, data) : dataReader.id : p.keyName;
                if (!isNaN(idName)) {
                    idIndex = Number(idName);
                } else if (!isFunction(idName)) {
                    if (arrayReaderInfos[idName]) {
                        idIndex = arrayReaderInfos[idName].order;
                    }
                    if (isXML) {
                        if (typeof idName === "string" && /^\[\w+\]$/.test(idName)) {
                            idName = attrReader(idName.substring(1, idName.length - 1));
                        } else if (typeof idName === "string" && /^\w+$/.test(idName)) {
                            idName = nodeReader(idName);
                        }
                    }
                }
                drows = fieldReader(data, dataReader.root, true);
                if (dataReader.row) {
                    if (drows.length === 1 && typeof dataReader.row === "string" && /^\w+$/.test(dataReader.row)) {
                        items = [];
                        children = drows[0].childNodes;
                        nChildren = children.length;
                        for (iChild = 0; iChild < nChildren; iChild++) {
                            child = children[iChild];
                            if (child.nodeType === 1 && child.nodeName === dataReader.row) {
                                items.push(child);
                            }
                        }
                        drows = items;
                    } else {
                        drows = fieldReader(drows, dataReader.row, true);
                    }
                }
                if (drows == null && isArray(data)) {
                    drows = data;
                }
                if (!drows) {
                    drows = [];
                }
                len = drows.length;
                if (len > 0 && p.page <= 0) {
                    p.page = 1;
                }
                var rn = parseInt(p.rowNum, 10);
                if (adjust) {
                    rn *= adjust + 1;
                }
                var cellsToDisplay = [], ids = [], id, cur;
                items = [];
                for (i = 0; i < len; i++) {
                    cur = drows[i];
                    cells = dataReader.repeatitems && dataReader.cell ? fieldReader(cur, dataReader.cell, true) || cur : cur;
                    isArrayCells = dataReader.repeatitems && (isXML || isArray(cells));
                    rd = {};
                    preloadedNodes = {};
                    if (isXML && !isArrayCells && cells != null) {
                        children = cells.childNodes;
                        nChildren = children.length;
                        for (iChild = 0; iChild < nChildren; iChild++) {
                            child = children[iChild];
                            if (child.nodeType === 1) {
                                preloadedNodes[child.nodeName] = child;
                            }
                        }
                    }
                    for (cmName in arrayReaderInfos) {
                        if (arrayReaderInfos.hasOwnProperty(cmName)) {
                            info = arrayReaderInfos[cmName];
                            if (isArrayCells) {
                                v = cells[info.order];
                                if (isXML && v != null) {
                                    v = v.textContent || v.text;
                                }
                            } else if (colReader[cmName] != null && typeof colReader[cmName] !== "string") {
                                v = colReader[cmName](cells);
                            } else {
                                v = fieldReader(cells, typeof colReader[cmName] === "string" ? colReader[cmName] : info.name);
                            }
                            if (info.type === 1) {
                                addProp = additionalProperties[info.index];
                                if (addProp != null && isFunction(addProp.convert)) {
                                    v = addProp.convert(v, cells);
                                }
                            }
                            if (v !== undefined) {
                                rd[cmName] = v;
                            }
                        }
                    }
                    if (rd[idName] !== undefined) {
                        id = rd[idName] !== undefined ? rd[idName] : randId();
                    } else {
                        id = fieldReader(cur, isArray(cur) ? idIndex : idName);
                        if (id === undefined) {
                            id = fieldReader(cells, isArray(cells) ? idIndex : idName);
                        }
                        if (id === undefined) {
                            id = randId();
                        }
                    }
                    if (rd[idName] === undefined) {
                        rd[idName] = id;
                    }
                    id = String(id);
                    idr = p.idPrefix + id;
                    if (p.treeGrid) {
                        normalizeTreeGridProperties(rd);
                    }
                    if (i < rn) {
                        ids.push(idr);
                        cellsToDisplay.push(cells);
                        items.push(rd);
                    } else if (!readAllInputData) {
                        break;
                    }
                    if (readAllInputData || p.treeGrid === true) {
                        rd[locid] = id;
                        p.data.push(rd);
                        p._index[rd[locid]] = p.data.length - 1;
                    }
                }
                if (readAllInputData && p.forceClientSorting && p.treeGrid !== true) {
                    return;
                }
                var rowData = jgrid.parseDataToHtml.call(self, len, ids, items, cellsToDisplay, rcnt, adjust, readAllInputData);
                fillOrClearCellBuilder(true);
                var fpos = p.treeANode > -1 ? p.treeANode : 0;
                var $tbody = $(self.tBodies[0]);
                if (p.treeGrid === true && fpos > 0) {
                    $(self.rows[fpos]).after(rowData.join(""));
                } else if (p.scroll) {
                    $tbody.append(rowData.join(""));
                } else if (self.firstElementChild == null || document.documentMode !== undefined && document.documentMode <= 9) {
                    $tbody.html($tbody.html() + rowData.join(""));
                    self.grid.cols = self.rows[0].cells;
                } else {
                    self.firstElementChild.innerHTML += rowData.join("");
                    self.grid.cols = self.rows[0].cells;
                }
                if (p.grouping) {
                    rebuildRowIndexes.call(self);
                }
                if (p.subGrid === true) {
                    try {
                        $j.addSubGrid.call($self, p.iColByName.subgrid);
                    } catch (ignore) {}
                }
                if (p.gridview === false || isFunction(p.afterInsertRow)) {
                    for (i = 0; i < Math.min(len, rn); i++) {
                        feedback.call(self, "afterInsertRow", ids[i], items[i], cellsToDisplay[i]);
                    }
                }
                p.totaltime = new Date() - startReq;
                if (i > 0) {
                    if (p.records === 0) {
                        p.records = len;
                    }
                }
                clearArray(rowData);
                if (p.treeGrid === true) {
                    try {
                        $j.setTreeNode.call($self, fpos + 1, i + fpos + 1);
                    } catch (ignore) {}
                }
                p.reccount = Math.min(len, rn);
                p.treeANode = -1;
                if (p.userDataOnFooter) {
                    $j.footerData.call($self, "set", p.userData, true);
                }
                if (readAllInputData) {
                    p.records = len;
                    p.lastpage = Math.ceil(len / rn);
                }
                if (!more) {
                    self.updatepager(false, true);
                }
                finalizationFormatters.call(self);
            }, addLocalData = function() {
                var $self = $(this), st = p.multiSort ? [] : "", sto = {}, fndsort = false, cmtypes = {}, grtypes = [], grindexes = [], defSrcFormat = getRes("formatter.date.srcformat"), defNewFormat = getRes("formatter.date.newformat");
                if (!isArray(p.data)) {
                    return {};
                }
                if (p.multiSort) {
                    getSortNames(st, sto);
                }
                var grpview = p.grouping ? p.groupingView : false, lengrp, gin, processColModel = function(cm, iCol1, isAddProp) {
                    var srcformat, newformat, grindex = cm.index || cm.name, sorttype = cm.sorttype || "text";
                    cmtypes[cm.name] = {
                        "reader": !p.dataTypeOrg ? cm.jsonmap || cm.name : cm.name,
                        "iCol": iCol1,
                        "stype": sorttype,
                        "srcfmt": "",
                        "newfmt": "",
                        "sfunc": cm.sortfunc || null,
                        "isAddProp": isAddProp === true ? true : false
                    };
                    if (sorttype === "date" || sorttype === "datetime") {
                        if (cm.formatter && typeof cm.formatter === "string" && cm.formatter === "date") {
                            if (cm.formatoptions && cm.formatoptions.srcformat) {
                                srcformat = cm.formatoptions.srcformat;
                            } else {
                                srcformat = defSrcFormat;
                            }
                            if (cm.formatoptions && cm.formatoptions.newformat) {
                                newformat = cm.formatoptions.newformat;
                            } else {
                                newformat = defNewFormat;
                            }
                        } else {
                            srcformat = newformat = cm.datefmt || "Y-m-d";
                        }
                        cmtypes[cm.name].srcfmt = srcformat;
                        cmtypes[cm.name].newfmt = newformat;
                    }
                    if (p.grouping) {
                        for (gin = 0, lengrp = grpview.groupField.length; gin < lengrp; gin++) {
                            if (cm.name === grpview.groupField[gin]) {
                                grtypes[gin] = cmtypes[grindex];
                                grindexes[gin] = grindex;
                            }
                        }
                    }
                    if (!p.multiSort) {
                        if (!fndsort && (cm.index === p.sortname || cm.name === p.sortname)) {
                            st = cm.name;
                            fndsort = true;
                        }
                    }
                };
                each(p.colModel, function(iCol1) {
                    processColModel(this, iCol1);
                });
                each(p.additionalProperties, function(iCol1) {
                    processColModel(typeof this === "string" ? {
                        "name": this
                    } : this, iCol1, true);
                });
                if (p.treeGrid) {
                    $j.SortTree.call($self, st, p.sortorder, cmtypes[st] != null && cmtypes[st].stype ? cmtypes[st].stype : "text", cmtypes[st] != null && cmtypes[st].srcfmt ? cmtypes[st].srcfmt : "");
                    return false;
                }
                var compareFnMap = {
                    "eq": function(queryObj) {
                        return queryObj.equals;
                    },
                    "ne": function(queryObj) {
                        return queryObj.notEquals;
                    },
                    "lt": function(queryObj) {
                        return queryObj.less;
                    },
                    "le": function(queryObj) {
                        return queryObj.lessOrEquals;
                    },
                    "gt": function(queryObj) {
                        return queryObj.greater;
                    },
                    "ge": function(queryObj) {
                        return queryObj.greaterOrEquals;
                    },
                    "cn": function(queryObj) {
                        return queryObj.contains;
                    },
                    "nc": function(queryObj, op) {
                        return op === "OR" ? queryObj.orNot().contains : queryObj.andNot().contains;
                    },
                    "bw": function(queryObj) {
                        return queryObj.startsWith;
                    },
                    "bn": function(queryObj, op) {
                        return op === "OR" ? queryObj.orNot().startsWith : queryObj.andNot().startsWith;
                    },
                    "en": function(queryObj, op) {
                        return op === "OR" ? queryObj.orNot().endsWith : queryObj.andNot().endsWith;
                    },
                    "ew": function(queryObj) {
                        return queryObj.endsWith;
                    },
                    "ni": function(queryObj, op) {
                        return op === "OR" ? queryObj.orNot().equals : queryObj.andNot().equals;
                    },
                    "in": function(queryObj) {
                        return queryObj.equals;
                    },
                    "nu": function(queryObj) {
                        return queryObj.isNull;
                    },
                    "nn": function(queryObj, op) {
                        return op === "OR" ? queryObj.orNot().isNull : queryObj.andNot().isNull;
                    }
                }, query = jgrid.from.call(this, p.data);
                if (p.ignoreCase) {
                    query = query.ignoreCase();
                }
                function tojLinq(group) {
                    var s = 0, index, gor, ror, opr, rule, r, cmi1;
                    if (group.groups != null) {
                        gor = group.groups.length && group.groupOp.toString().toUpperCase() === "OR";
                        if (gor) {
                            query.orBegin();
                        }
                        for (index = 0; index < group.groups.length; index++) {
                            if (s > 0 && gor) {
                                query.or();
                            }
                            try {
                                tojLinq(group.groups[index]);
                            } catch (e) {
                                fatalErrorFunction(e);
                            }
                            s++;
                        }
                        if (gor) {
                            query.orEnd();
                        }
                    }
                    if (group.rules != null) {
                        try {
                            ror = group.rules.length && group.groupOp.toString().toUpperCase() === "OR";
                            if (ror) {
                                query.orBegin();
                            }
                            for (index = 0; index < group.rules.length; index++) {
                                rule = group.rules[index];
                                opr = group.groupOp.toString().toUpperCase();
                                if (compareFnMap[rule.op] && rule.field) {
                                    if (s > 0 && opr && opr === "OR") {
                                        query = query.or();
                                    }
                                    cmi1 = cmtypes[rule.field];
                                    if (cmi1 != null) {
                                        r = cmi1.reader;
                                        query = compareFnMap[rule.op](query, opr)(isFunction(r) ? 'jQuery.jgrid.getAccessor(this,jQuery("' + p.idSel + '")[0].p.colModel[' + cmi1.iCol + "].jsonmap)" : "jQuery.jgrid.getAccessor(this,'" + r + "')", rule.data, cmtypes[rule.field]);
                                    }
                                } else if (p.customSortOperations != null && p.customSortOperations[rule.op] != null && isFunction(p.customSortOperations[rule.op].filter)) {
                                    query = query.custom(rule.op, rule.field, rule.data);
                                }
                                s++;
                            }
                            if (ror) {
                                query.orEnd();
                            }
                        } catch (g) {
                            fatalErrorFunction(g);
                        }
                    }
                }
                if (p.search === true) {
                    var srules = p.postData.filters;
                    if (srules) {
                        if (typeof srules === "string") {
                            srules = $.parseJSON(srules);
                        }
                        tojLinq(srules);
                    } else {
                        try {
                            var cmtypes1 = cmtypes[p.postData.searchField];
                            query = compareFnMap[p.postData.searchOper](query)(isFunction(cmtypes1.reader) ? 'jQuery.jgrid.getAccessor(this,jQuery("' + p.idSel + '")[0].p.colModel[' + cmtypes1.iCol + "].jsonmap)" : "jQuery.jgrid.getAccessor(this,'" + cmtypes1.reader + "')", p.postData.searchString, cmtypes[p.postData.searchField]);
                        } catch (ignore) {}
                    }
                }
                if (p.grouping) {
                    for (gin = 0; gin < lengrp; gin++) {
                        query.orderBy(grindexes[gin], grpview.groupOrder[gin], grtypes[gin].stype, grtypes[gin].srcfmt);
                    }
                }
                if (p.multiSort) {
                    each(st, function() {
                        query.orderBy(this, sto[this], cmtypes[this].stype, cmtypes[this].srcfmt, cmtypes[this].sfunc);
                    });
                } else if (st && p.sortorder && fndsort) {
                    query.orderBy(p.sortname, p.sortorder.toUpperCase() === "DESC" ? "d" : "a", cmtypes[st].stype, cmtypes[st].srcfmt, cmtypes[st].sfunc);
                }
                p.lastSelectedData = query.select();
                var recordsperpage = parseInt(p.rowNum, 10), total = p.lastSelectedData.length, page = parseInt(p.page, 10), totalpages = Math.ceil(total / recordsperpage), retresult = {};
                if (p.grouping && p.groupingView._locgr) {
                    p.groupingView.groups = [];
                    var j, key, udc;
                    if (p.footerrow && p.userDataOnFooter) {
                        for (key in p.userData) {
                            if (p.userData.hasOwnProperty(key)) {
                                p.userData[key] = 0;
                            }
                        }
                        udc = true;
                    }
                    for (j = 0; j < total; j++) {
                        if (udc) {
                            for (key in p.userData) {
                                if (p.userData.hasOwnProperty(key)) {
                                    p.userData[key] += parseFloat(p.lastSelectedData[j][key] || 0);
                                }
                            }
                        }
                        $j.groupingPrepare.call($self, p.lastSelectedData[j], j, recordsperpage);
                    }
                }
                query = null;
                cmtypes = null;
                var localReader = p.localReader;
                retresult[localReader.total] = totalpages;
                retresult[localReader.page] = page;
                retresult[localReader.records] = total;
                retresult[localReader.root] = p.lastSelectedData.slice((page - 1) * recordsperpage, page * recordsperpage);
                retresult[localReader.userdata] = p.userData;
                return retresult;
            }, setWidthOfPagerTdWithPager = function($pgTable) {
                var self = this, width = $pgTable.outerWidth(), fontSize;
                if (width <= 0) {
                    fontSize = $(self).closest(".ui-jqgrid>.ui-jqgrid-view").css("font-size") || "11px";
                    $(document.body).append("<div id='testpg' class='" + getGuiStyles("gBox", "ui-jqgrid") + "' style='font-size:" + fontSize + ";visibility:hidden;margin:0;padding:0;' ></div>");
                    $($pgTable).clone().appendTo("#testpg");
                    width = $("#testpg>.ui-pg-table").width();
                    $("#testpg").remove();
                }
                if (width > 0) {
                    $pgTable.parent().width(width);
                }
                return width;
            }, updatepager = function(rn, dnd) {
                var self = this, $self = $(self), gridSelf = self.grid, cp, last, base1, from, to, tot, fmt, pgboxes = p.pager || "", sppg, tspg = p.pager ? "_" + p.pager.substr(1) : "", bDiv = gridSelf.bDiv, numberFormat = $.fmatter ? $.fmatter.NumberFormat : null, tspgTop = p.toppager ? "_" + p.toppager.substr(1) : "", hoverClasses = getGuiStyles("states.hover"), disabledClasses = getGuiStyles("states.disabled");
                base1 = parseInt(p.page, 10) - 1;
                if (base1 < 0) {
                    base1 = 0;
                }
                base1 = base1 * parseInt(p.rowNum, 10);
                to = base1 + p.reccount;
                if (p.scroll) {
                    var rows = $(getGridComponent(COMPONENT_NAMES.BODY_TABLE, bDiv)[0].rows).slice(1);
                    base1 = to - rows.length;
                    p.reccount = rows.length;
                    var rh = rows.outerHeight() || gridSelf.prevRowHeight;
                    if (rh) {
                        var top = base1 * rh;
                        var height = jgrid.fixMaxHeightOfDiv.call(self, parseInt(p.records, 10) * rh);
                        $(bDiv).children("div").first().css({
                            "height": height + "px"
                        }).children("div").first().css({
                            "height": top + "px",
                            "display": top + "px" ? "" : "none"
                        });
                        if (bDiv.scrollTop === 0 && p.page > 1) {
                            bDiv.scrollTop = p.rowNum * (p.page - 1) * rh;
                        }
                    }
                    bDiv.scrollLeft = gridSelf.hDiv.scrollLeft;
                }
                pgboxes += p.toppager ? (pgboxes ? "," : "") + p.toppager : "";
                if (pgboxes) {
                    fmt = getRes("formatter.integer") || {};
                    cp = intNum(p.page);
                    last = intNum(p.lastpage);
                    $(".selbox", pgboxes).prop("disabled", false);
                    if (p.pginput === true) {
                        $(".ui-pg-input", pgboxes).val(p.page);
                        sppg = p.toppager ? "#sp_1" + tspg + ",#sp_1" + tspgTop : "#sp_1" + tspg;
                        $(sppg).html($.fmatter ? numberFormat(p.lastpage, fmt) : p.lastpage).closest(".ui-pg-table").each(function() {
                            setWidthOfPagerTdWithPager.call(self, $(this));
                        });
                    }
                    if (p.viewrecords) {
                        if (p.reccount === 0) {
                            $(".ui-paging-info", pgboxes).html(getDef("emptyrecords"));
                        } else {
                            from = base1 + 1;
                            tot = p.records;
                            if ($.fmatter) {
                                from = numberFormat(from, fmt);
                                to = numberFormat(to, fmt);
                                tot = numberFormat(tot, fmt);
                            }
                            $(".ui-paging-info", pgboxes).html(jgrid.format(getDef("recordtext"), from, to, tot));
                        }
                    }
                    if (p.pgbuttons === true) {
                        if (last <= 0) {
                            cp = 0;
                        }
                        if (cp <= 0) {
                            cp = last = 0;
                        }
                        if (cp === 1 || cp === 0) {
                            $("#first" + tspg + ", #prev" + tspg).addClass(disabledClasses).removeClass(hoverClasses);
                            if (p.toppager) {
                                $("#first_t" + tspgTop + ", #prev_t" + tspgTop).addClass(disabledClasses).removeClass(hoverClasses);
                            }
                        } else {
                            $("#first" + tspg + ", #prev" + tspg).removeClass(disabledClasses);
                            if (p.toppager) {
                                $("#first_t" + tspgTop + ", #prev_t" + tspgTop).removeClass(disabledClasses);
                            }
                        }
                        if (cp === last || cp === 0) {
                            $("#next" + tspg + ", #last" + tspg).addClass(disabledClasses).removeClass(hoverClasses);
                            if (p.toppager) {
                                $("#next_t" + tspgTop + ", #last_t" + tspgTop).addClass(disabledClasses).removeClass(hoverClasses);
                            }
                        } else {
                            $("#next" + tspg + ", #last" + tspg).removeClass(disabledClasses);
                            if (p.toppager) {
                                $("#next_t" + tspgTop + ", #last_t" + tspgTop).removeClass(disabledClasses);
                            }
                        }
                    }
                }
                if (rn === true && p.rownumbers === true) {
                    $(">td.jqgrid-rownum", self.rows).each(function(i) {
                        $(this).html(base1 + 1 + i);
                    });
                }
                if (dnd && p.jqgdnd) {
                    $self.jqGrid("gridDnD", "updateDnD");
                }
                feedback.call(self, "gridComplete");
                $self.triggerHandler("jqGridAfterGridComplete");
            }, beginReq = function() {
                var self = this;
                self.grid.hDiv.loading = true;
                if (p.hiddengrid) {
                    return;
                }
                $j.progressBar.call($(self), {
                    "method": "show",
                    "loadtype": p.loadui,
                    "htmlcontent": getDef("loadtext")
                });
            }, endReq = function() {
                var self = this;
                self.grid.hDiv.loading = false;
                $j.progressBar.call($(self), {
                    "method": "hide",
                    "loadtype": p.loadui
                });
            }, populate = function(npage) {
                var self = this, $self = $(self), gridSelf = self.grid;
                if (!gridSelf.hDiv.loading) {
                    var pvis = p.scroll && npage === false, prm = {}, dt, dstr, pN = p.prmNames;
                    if (p.page <= 0) {
                        p.page = Math.min(1, p.lastpage);
                    }
                    if (pN.search !== null) {
                        prm[pN.search] = p.search;
                    }
                    if (pN.nd !== null) {
                        prm[pN.nd] = new Date().getTime();
                    }
                    if (isNaN(parseInt(p.rowNum, 10)) || parseInt(p.rowNum, 10) <= 0) {
                        p.rowNum = p.maxRowNum;
                    }
                    if (pN.rows !== null) {
                        prm[pN.rows] = p.rowNum;
                    }
                    if (pN.page !== null) {
                        prm[pN.page] = p.page;
                    }
                    if (pN.sort !== null) {
                        prm[pN.sort] = p.sortname;
                    }
                    if (pN.order !== null) {
                        prm[pN.order] = p.sortorder;
                    }
                    if (p.rowTotal !== null && pN.totalrows !== null) {
                        prm[pN.totalrows] = p.rowTotal;
                    }
                    var lcf = isFunction(p.loadComplete), lc = lcf ? p.loadComplete : null;
                    var adjust = 0;
                    npage = npage || 1;
                    if (npage > 1) {
                        if (pN.npage !== null) {
                            prm[pN.npage] = npage;
                            adjust = npage - 1;
                            npage = 1;
                        } else {
                            lc = function(data) {
                                p.page++;
                                gridSelf.hDiv.loading = false;
                                if (lcf) {
                                    p.loadComplete.call(self, data);
                                }
                                populate.call(self, npage - 1);
                            };
                        }
                    } else if (pN.npage !== null) {
                        delete p.postData[pN.npage];
                    }
                    if (p.grouping && $j.groupingSetup) {
                        $j.groupingSetup.call($self);
                        var grp = p.groupingView, gi, gs = "", index, iColumn, cmValue;
                        for (gi = 0; gi < grp.groupField.length; gi++) {
                            index = grp.groupField[gi];
                            for (iColumn = 0; iColumn < p.colModel.length; iColumn++) {
                                cmValue = p.colModel[iColumn];
                                if (cmValue.name === index && cmValue.index) {
                                    index = cmValue.index;
                                }
                            }
                            gs += index + " " + grp.groupOrder[gi] + ", ";
                        }
                        prm[pN.sort] = gs + prm[pN.sort];
                    }
                    extend(p.postData, prm);
                    var rcnt = !p.scroll ? 1 : self.rows.length - 1, fixDisplayingHorizontalScrollbar = function() {
                        fixScrollOffsetAndhBoxPadding.call(self);
                        var gBodyWidth = $self.width(), gViewWidth = $self.closest(".ui-jqgrid-view").width(), gridCssHeight = $self.css("height");
                        if (gViewWidth < gBodyWidth && p.reccount === 0) {
                            $self.css("height", "1px");
                        } else if (gridCssHeight !== "0" && gridCssHeight !== "0px") {
                            $self.css("height", "");
                        }
                        if (!p.autowidth && (p.widthOrg === undefined || p.widthOrg === "auto" || p.widthOrg === "100%")) {
                            $j.setGridWidth.call($self, p.tblwidth + p.scrollOffset, false);
                        }
                    }, resort = function() {
                        var iRes;
                        if (p.autoresizeOnLoad) {
                            $j.autoResizeAllColumns.call($self);
                            clearArray(p.columnsToReResizing);
                        } else {
                            for (iRes = 0; iRes < p.columnsToReResizing.length; iRes++) {
                                $j.autoResizeColumn.call($self, p.columnsToReResizing[iRes]);
                            }
                            clearArray(p.columnsToReResizing);
                        }
                    }, finalReportSteps = function() {
                        feedback.call(self, "loadComplete", dstr);
                        resort();
                        $self.triggerHandler("jqGridAfterLoadComplete", [ dstr ]);
                        endReq.call(self);
                        p.datatype = "local";
                        p.datastr = null;
                        fixDisplayingHorizontalScrollbar();
                    }, finalReportVirtual = function(data) {
                        $self.triggerHandler("jqGridLoadComplete", [ data ]);
                        if (lc) {
                            lc.call(self, data);
                        }
                        resort();
                        $self.triggerHandler("jqGridAfterLoadComplete", [ data ]);
                        if (pvis) {
                            gridSelf.populateVisible.call(self);
                        }
                        if (npage === 1) {
                            endReq.call(self);
                        }
                        fixDisplayingHorizontalScrollbar();
                    }, readLocal = function() {
                        var req = addLocalData.call(self);
                        readInput.call(self, req, rcnt, npage > 1, adjust);
                        finalReportVirtual(req);
                    };
                    if (!feedback.call(self, "beforeRequest")) {
                        return;
                    }
                    if (isFunction(p.datatype)) {
                        p.datatype.call(self, p.postData, "load_" + p.id, rcnt, npage, adjust);
                        return;
                    }
                    dt = p.datatype.toLowerCase();
                    $(grid.eDiv).hide();
                    switch (dt) {
                      case "json":
                      case "jsonp":
                      case "xml":
                      case "script":
                        $.ajax(extend({
                            "url": p.url,
                            "type": p.mtype,
                            "dataType": dt,
                            "data": jgrid.serializeFeedback.call(ts, p.serializeGridData, "jqGridSerializeGridData", p.postData),
                            "success": function(data, textStatus, jqXHR) {
                                p.jqXhr = null;
                                $(grid.eDiv).hide();
                                if (isFunction(p.beforeProcessing)) {
                                    if (p.beforeProcessing.call(self, data, textStatus, jqXHR) === false) {
                                        endReq.call(self);
                                        return;
                                    }
                                }
                                readInput.call(self, data, rcnt, npage > 1, adjust);
                                finalReportVirtual(data);
                                if (p.loadonce || p.treeGrid) {
                                    p.dataTypeOrg = p.datatype;
                                    p.datatype = "local";
                                    if (p.forceClientSorting) {
                                        readLocal();
                                    }
                                }
                            },
                            "error": function(jqXHR, textStatus, errorThrown) {
                                p.jqXhr = null;
                                if (isFunction(p.loadError)) {
                                    p.loadError.call(self, jqXHR, textStatus, errorThrown);
                                }
                                if (npage === 1) {
                                    endReq.call(self);
                                }
                            },
                            "beforeSend": function(jqXHR, settings) {
                                var gotoreq = true;
                                if (isFunction(p.loadBeforeSend)) {
                                    gotoreq = p.loadBeforeSend.call(self, jqXHR, settings);
                                }
                                if (gotoreq === undefined) {
                                    gotoreq = true;
                                }
                                if (gotoreq === false) {
                                    return false;
                                }
                                p.jqXhr = jqXHR;
                                beginReq.call(self);
                            }
                        }, jgrid.ajaxOptions, p.ajaxGridOptions));
                        break;

                      case "xmlstring":
                        beginReq.call(self);
                        dstr = typeof p.datastr === "string" ? $.parseXML(p.datastr) : p.datastr;
                        readInput.call(self, dstr);
                        finalReportSteps();
                        if (p.forceClientSorting) {
                            readLocal();
                        }
                        break;

                      case "jsonstring":
                        beginReq.call(self);
                        dstr = p.datastr && typeof p.datastr === "string" ? $.parseJSON(p.datastr) : p.datastr;
                        readInput.call(self, dstr);
                        finalReportSteps();
                        if (p.forceClientSorting) {
                            readLocal();
                        }
                        break;

                      case "local":
                      case "clientside":
                        beginReq.call(self);
                        p.datatype = "local";
                        readLocal();
                        break;
                    }
                }
            }, setHeadCheckBox = function(checked) {
                var self = this, gridSelf = self.grid;
                $(p.cb, gridSelf.hDiv).prop("checked", checked);
                if (p.frozenColumns) {
                    $(p.cb, gridSelf.fhDiv).prop("checked", checked);
                }
            }, setPager = function(pgid, tp) {
                var hoverClasses = getGuiStyles("states.hover"), disabledClasses = getGuiStyles("states.disabled"), sep = "<td class='ui-pg-button " + disabledClasses + "'><span class='ui-separator'></span></td>", pginp = "", blockAlign = p.pagerpos === "left" ? "margin-right:auto;" : p.pagerpos === "right" ? "margin-left:auto;" : "margin-left:auto;margin-right:auto;", pgl = "<table " + "style='table-layout:auto;white-space: pre;" + blockAlign + "' class='ui-pg-table'><tbody><tr>", str = "", pgcnt, lft, cent, rgt, twd, i, clearVals = function(onpaging, newPage, newRowNum) {
                    if (!feedback.call(ts, "onPaging", onpaging, {
                        "newPage": newPage,
                        "currentPage": intNum(p.page, 1),
                        "lastPage": intNum(p.lastpage, 1),
                        "currentRowNum": intNum(p.rowNum, 10),
                        "newRowNum": newRowNum
                    })) {
                        return false;
                    }
                    p.selrow = null;
                    if (p.multiselect) {
                        if (!p.multiPageSelection) {
                            clearArray(p.selarrrow);
                        }
                        setHeadCheckBox.call(ts, false);
                    }
                    clearArray(p.savedRow);
                    return true;
                };
                tp += "_" + pgid;
                pgcnt = "pg_" + pgid;
                lft = pgid + "_left";
                cent = pgid + "_center";
                rgt = pgid + "_right";
                $("#" + jqID(pgid)).append("<div id='" + pgcnt + "' class='ui-pager-control' role='group'><table class='ui-pg-table' style='width:100%;table-layout:fixed;height:100%;'><tbody><tr>" + "<td id='" + lft + "' style='text-align:left;" + (p.pagerLeftWidth !== undefined ? "width:" + p.pagerLeftWidth + "px;" : "") + "'></td>" + "<td id='" + cent + "' style='text-align:center;white-space:pre;" + (p.pagerCenterWidth !== undefined ? "width:" + p.pagerCenterWidth + "px;" : "") + "'></td>" + "<td id='" + rgt + "' style='text-align:right;" + (p.pagerRightWidth !== undefined ? "width:" + p.pagerRightWidth + "px;" : "") + "'></td></tr></tbody></table></div>").attr("dir", "ltr");
                pgcnt = "#" + jqID(pgcnt);
                if (p.rowList.length > 0) {
                    str = "<td dir='" + dir + "'>";
                    var pgrecs = getDef("pgrecs");
                    str += "<select class='" + getGuiStyles("pager.pagerSelect", "ui-pg-selbox") + "' " + (pgrecs ? "title='" + pgrecs + "'" : "") + ">";
                    var strnm;
                    for (i = 0; i < p.rowList.length; i++) {
                        strnm = p.rowList[i].toString().split(":");
                        if (strnm.length === 1) {
                            strnm[1] = strnm[0];
                        }
                        str += "<option value='" + strnm[0] + "'" + (intNum(p.rowNum, 0) === intNum(strnm[0], 0) ? " selected='selected'" : "") + ">" + strnm[1] + "</option>";
                    }
                    str += "</select></td>";
                }
                if (dir === "rtl") {
                    pgl += str;
                }
                if (p.pginput === true) {
                    pginp = "<td dir='" + dir + "'>" + jgrid.format(getDef("pgtext") || "", "<input class='" + getGuiStyles("pager.pagerInput", "ui-pg-input") + "' type='text' size='2' maxlength='7' value='0'/>", "<span id='sp_1_" + pgid + "'>0</span>") + "</td>";
                }
                pgid = "#" + jqID(pgid);
                if (p.pgbuttons === true) {
                    var po = [ "first", "prev", "next", "last" ], buttonClasses = getGuiStyles("pager.pagerButton", "ui-pg-button"), buildPagerButton = function(buttonName) {
                        var titleText = getDef("pg" + buttonName);
                        return "<td role='button' tabindex='0' id='" + buttonName + tp + "' class='" + buttonClasses + "' " + (titleText ? "title='" + titleText + "'" : "") + "><span class='" + getIcon("pager." + buttonName) + "'></span></td>";
                    };
                    if (dir === "rtl") {
                        po.reverse();
                    }
                    for (i = 0; i < po.length; i++) {
                        pgl += buildPagerButton(po[i]);
                        if (i === 1) {
                            pgl += pginp !== "" ? sep + pginp + sep : "";
                        }
                    }
                } else if (pginp !== "") {
                    pgl += pginp;
                }
                if (dir === "ltr") {
                    pgl += str;
                }
                pgl += "</tr></tbody></table>";
                if (p.viewrecords === true) {
                    $("td" + pgid + "_" + p.recordpos, pgcnt).append("<span dir='" + dir + "' style='text-align:" + p.recordpos + "' class='ui-paging-info'></span>");
                }
                var $pagerIn = $("td" + pgid + "_" + p.pagerpos, pgcnt);
                $pagerIn.append(pgl);
                twd = setWidthOfPagerTdWithPager.call(this, $pagerIn.children(".ui-pg-table"));
                p._nvtd = [];
                p._nvtd[0] = twd ? Math.floor((p.width - twd) / 2) : Math.floor(p.width / 3);
                p._nvtd[1] = 0;
                pgl = null;
                $(".ui-pg-selbox", pgcnt).bind("change", function() {
                    var newRowNum = intNum(this.value, 10), newPage = Math.round(p.rowNum * (p.page - 1) / newRowNum - .5) + 1;
                    if (!clearVals("records", newPage, newRowNum)) {
                        return false;
                    }
                    p.page = newPage;
                    p.rowNum = newRowNum;
                    if (p.pager) {
                        $(".ui-pg-selbox", p.pager).val(newRowNum);
                    }
                    if (p.toppager) {
                        $(".ui-pg-selbox", p.toppager).val(newRowNum);
                    }
                    populate.call(ts);
                    return false;
                });
                if (p.pgbuttons === true) {
                    $(".ui-pg-button", pgcnt).hover(function() {
                        if (hasOneFromClasses(this, disabledClasses)) {
                            this.style.cursor = "default";
                        } else {
                            $(this).addClass(hoverClasses);
                            this.style.cursor = "pointer";
                        }
                    }, function() {
                        if (!hasOneFromClasses(this, disabledClasses)) {
                            $(this).removeClass(hoverClasses);
                            this.style.cursor = "default";
                        }
                    });
                    $("#first" + jqID(tp) + ", #prev" + jqID(tp) + ", #next" + jqID(tp) + ", #last" + jqID(tp)).click(function() {
                        if (hasOneFromClasses(this, disabledClasses)) {
                            return false;
                        }
                        var cp = intNum(p.page, 1), newPage = cp, onpaging = this.id, last = intNum(p.lastpage, 1), selclick = false, fp = true, pp = true, np = true, lp = true;
                        if (last === 0 || last === 1) {
                            if (cp <= 1) {
                                fp = false;
                                pp = false;
                            }
                            np = false;
                            lp = false;
                        } else if (last > 1 && cp >= 1) {
                            if (cp === 1) {
                                fp = false;
                                pp = false;
                            } else if (cp === last) {
                                np = false;
                                lp = false;
                            }
                        } else if (last > 1 && cp === 0) {
                            np = false;
                            lp = false;
                            cp = last - 1;
                        }
                        if (this.id === "first" + tp && fp) {
                            onpaging = "first";
                            newPage = 1;
                            selclick = true;
                        }
                        if (this.id === "prev" + tp && pp) {
                            onpaging = "prev";
                            newPage = cp - 1;
                            selclick = true;
                        }
                        if (this.id === "next" + tp && np) {
                            onpaging = "next";
                            newPage = cp + 1;
                            selclick = true;
                        }
                        if (this.id === "last" + tp && lp) {
                            onpaging = "last";
                            newPage = last;
                            selclick = true;
                        }
                        if (!clearVals(onpaging, newPage, intNum(p.rowNum, 10))) {
                            return false;
                        }
                        p.page = newPage;
                        if (selclick) {
                            populate.call(ts);
                        }
                        return false;
                    });
                }
                if (p.pginput === true) {
                    $("input.ui-pg-input", pgcnt).bind("keypress.jqGrid", function(e) {
                        var key = e.charCode || e.keyCode || 0, newPage = intNum($(this).val(), 1);
                        if (key === 13) {
                            if (!clearVals("user", newPage, intNum(p.rowNum, 10))) {
                                return false;
                            }
                            $(this).val(newPage);
                            p.page = $(this).val() > 0 ? $(this).val() : p.page;
                            populate.call(ts);
                            return false;
                        }
                        return this;
                    });
                }
                $pagerIn.children(".ui-pg-table").bind("keydown.jqGrid", function(e) {
                    var $focused;
                    if (e.which === 13) {
                        $focused = $pagerIn.find(":focus");
                        if ($focused.length > 0) {
                            $focused.trigger("click");
                        }
                    }
                });
            }, getSortNames = function(sortNames, sortDirs, cm) {
                each((p.sortname + " " + p.sortorder).split(","), function() {
                    var s = $.trim(this).split(" ");
                    if (s.length === 2) {
                        sortNames.push(s[0]);
                    }
                });
                if (cm != null) {
                    var i = $.inArray(cm.index || cm.name, sortNames);
                    if (cm.lso !== "" && i < 0) {
                        sortNames.push(cm.index || cm.name);
                    } else if (cm.lso === "" && i >= 0) {
                        sortNames.splice(i, 1);
                    }
                }
                each(p.colModel, function() {
                    var sortName = this.index || this.name, splas;
                    if (this.lso) {
                        splas = this.lso.split("-");
                        if ($.inArray(sortName, sortNames) < 0) {
                            sortNames.push(sortName);
                        }
                        sortDirs[sortName] = splas[splas.length - 1];
                    }
                });
            }, multiSort = function(iCol1, obj) {
                var sort1 = "", cm = p.colModel[iCol1], so, disabledClasses = getGuiStyles("states.disabled"), $selTh = p.frozenColumns ? $(obj) : $(ts.grid.headers[iCol1].el), $iconsSpan = $selTh.find("span.s-ico"), $iconAsc = $iconsSpan.children("span.ui-icon-asc"), $iconDesc = $iconsSpan.children("span.ui-icon-desc"), $iconsActive = $iconAsc, $iconsInictive = $iconDesc, sortNames = [], sortDirs = {};
                $selTh.find("span.ui-grid-ico-sort").addClass(disabledClasses);
                $selTh.attr("aria-selected", "false");
                if (cm.lso) {
                    $iconsSpan.show();
                    so = cm.lso.split("-");
                    so = so[so.length - 1];
                    if (so === "desc") {
                        $iconsActive = $iconDesc;
                        $iconsInictive = $iconAsc;
                    }
                    $iconsActive.removeClass(disabledClasses).css("display", "");
                    if (p.showOneSortIcon) {
                        $iconsInictive.hide();
                    }
                    $selTh.attr("aria-selected", "true");
                } else if (!p.viewsortcols[0]) {
                    $iconsSpan.hide();
                }
                getSortNames(sortNames, sortDirs, cm);
                each(sortNames, function() {
                    if (sort1.length > 0) {
                        sort1 += ", ";
                    }
                    sort1 += this + " " + sortDirs[this];
                    p.sortorder = sortDirs[this];
                });
                p.sortname = sort1.substring(0, sort1.length - p.sortorder.length - 1);
            }, sortData = function(index, idxcol, reload, sor, obj) {
                var self = this, mygrid = self.grid, cm = p.colModel[idxcol], disabledClasses = getGuiStyles("states.disabled");
                if (cm == null || !cm.sortable) {
                    return;
                }
                if (p.savedRow.length > 0) {
                    return;
                }
                if (!reload) {
                    if (p.lastsort === idxcol && p.sortname !== "") {
                        if (p.sortorder === "asc") {
                            p.sortorder = "desc";
                        } else if (p.sortorder === "desc") {
                            p.sortorder = "asc";
                        } else {
                            p.sortorder = cm.firstsortorder || "asc";
                        }
                        if (cm.lso) {
                            if (cm.lso === "asc") {
                                cm.lso += "-desc";
                            } else if (cm.lso === "desc") {
                                cm.lso += "-asc";
                            } else if ((cm.lso === "asc-desc" || cm.lso === "desc-asc") && (p.threeStateSort || p.multiSort)) {
                                cm.lso = "";
                            }
                        } else {
                            cm.lso = cm.firstsortorder || "asc";
                        }
                    } else {
                        cm.lso = p.sortorder = cm.firstsortorder || "asc";
                    }
                    p.page = 1;
                }
                if (p.multiSort) {
                    multiSort(idxcol, obj);
                } else {
                    if (sor) {
                        if (p.lastsort === idxcol && p.sortorder === sor && !reload) {
                            return;
                        }
                        p.sortorder = sor;
                    }
                    var headers = mygrid.headers, fhDiv = mygrid.fhDiv, $previousSelectedTh = headers[p.lastsort] ? $(headers[p.lastsort].el) : $(), $newSelectedTh = p.frozenColumns ? $(obj) : $(headers[idxcol].el), $iconsSpan = $newSelectedTh.find("span.s-ico"), $iconsActive = $iconsSpan.children("span.ui-icon-" + p.sortorder), $iconsInictive = $iconsSpan.children("span.ui-icon-" + (p.sortorder === "asc" ? "desc" : "asc"));
                    cm = p.colModel[p.lastsort];
                    $previousSelectedTh.find("span.ui-grid-ico-sort").addClass(disabledClasses);
                    $previousSelectedTh.attr("aria-selected", "false");
                    if (p.frozenColumns) {
                        fhDiv.find("span.ui-grid-ico-sort").addClass(disabledClasses);
                        fhDiv.find("th").attr("aria-selected", "false");
                    }
                    if (!p.viewsortcols[0]) {
                        if (p.lastsort !== idxcol) {
                            if (p.frozenColumns) {
                                fhDiv.find("span.s-ico").hide();
                            }
                            $previousSelectedTh.find("span.s-ico").hide();
                            $iconsSpan.show();
                        } else if (p.sortname === "") {
                            $iconsSpan.show();
                        }
                    }
                    if (p.lastsort !== idxcol) {
                        if ($previousSelectedTh.data("autoResized") === "true" && (cm != null && cm.autoResizing != null && cm.autoResizing.compact || p.autoResizing.compact)) {
                            p.columnsToReResizing.push(p.lastsort);
                        }
                    }
                    cm = p.colModel[idxcol];
                    $iconsSpan.css("display", "");
                    if (cm.lso !== "") {
                        $iconsActive.removeClass(disabledClasses).css("display", "");
                        if (p.showOneSortIcon) {
                            $iconsInictive.removeClass(disabledClasses).hide();
                        }
                        $newSelectedTh.attr("aria-selected", "true");
                    } else {
                        $newSelectedTh.attr("aria-selected", "false");
                        if (p.threeStateSort) {
                            p.sortorder = "";
                            if (!p.viewsortcols[0]) {
                                $iconsSpan.hide();
                            }
                        }
                    }
                    if (p.lastsort !== idxcol && $newSelectedTh.data("autoResized") === "true") {
                        if (cm != null && cm.autoResizing != null && cm.autoResizing.compact || p.autoResizing.compact) {
                            p.columnsToReResizing.push(idxcol);
                        }
                    }
                    index = index.substring(5 + p.id.length + 1);
                    p.sortname = cm.index || index;
                }
                if (!feedback.call(self, "onSortCol", p.sortname, idxcol, p.sortorder)) {
                    p.lastsort = idxcol;
                    return;
                }
                if (p.datatype === "local") {
                    if (p.deselectAfterSort && !p.multiPageSelection) {
                        $j.resetSelection.call($(self));
                    }
                } else if (!p.multiPageSelection) {
                    p.selrow = null;
                    if (p.multiselect) {
                        setHeadCheckBox.call(self, false);
                        clearArray(p.selarrrow);
                    }
                }
                clearArray(p.savedRow);
                if (p.scroll) {
                    var sscroll = mygrid.bDiv.scrollLeft;
                    grid.emptyRows.call(self, true, false);
                    mygrid.hDiv.scrollLeft = sscroll;
                }
                if (p.subGrid && p.datatype === "local") {
                    $("td.sgexpanded", "#" + jqID(p.id)).each(function() {
                        $(this).trigger("click");
                    });
                }
                populate.call(self);
                p.lastsort = idxcol;
                if (p.sortname !== index && idxcol) {
                    p.lastsort = idxcol;
                }
            }, setInitialColWidth = function() {
                var initialWidth = 0, borderAndPaddingWidth = jgrid.cell_width ? 0 : intNum(p.cellLayout, 0), numberOfVariableColumns = 0, iLastVariableColumn, scrollbarWidth = intNum(p.scrollOffset, 0), columnWidth, hasScrollbar = false, totalVariableWidth, fixedColumnsWidth = 0, correctur, isCellClassHidden = jgrid.isCellClassHidden;
                each(p.colModel, function() {
                    if (this.hidden === undefined) {
                        this.hidden = false;
                    }
                    if (p.grouping && p.autowidth) {
                        var ind = inArray(this.name, p.groupingView.groupField);
                        if (ind >= 0 && p.groupingView.groupColumnShow.length > ind) {
                            this.hidden = !p.groupingView.groupColumnShow[ind];
                        }
                    }
                    this.widthOrg = columnWidth = intNum(this.width, 0);
                    if (this.hidden === false && !isCellClassHidden(this.classes)) {
                        initialWidth += columnWidth + borderAndPaddingWidth;
                        if (this.fixed) {
                            fixedColumnsWidth += columnWidth + borderAndPaddingWidth;
                        } else {
                            numberOfVariableColumns++;
                        }
                    }
                });
                if (isNaN(p.width)) {
                    p.width = initialWidth + (p.shrinkToFit === false && !isNaN(p.height) ? scrollbarWidth : 0);
                }
                grid.width = p.width;
                p.tblwidth = initialWidth;
                if (p.shrinkToFit === false && p.forceFit === true) {
                    p.forceFit = false;
                }
                if (p.shrinkToFit === true && numberOfVariableColumns > 0) {
                    totalVariableWidth = grid.width - borderAndPaddingWidth * numberOfVariableColumns - fixedColumnsWidth;
                    if (!isNaN(p.height)) {
                        totalVariableWidth -= scrollbarWidth;
                        hasScrollbar = true;
                    }
                    initialWidth = 0;
                    each(p.colModel, function(i) {
                        if (this.hidden === false && !isCellClassHidden(this.classes) && !this.fixed) {
                            columnWidth = Math.round(totalVariableWidth * this.width / (p.tblwidth - borderAndPaddingWidth * numberOfVariableColumns - fixedColumnsWidth));
                            this.width = columnWidth;
                            initialWidth += columnWidth;
                            iLastVariableColumn = i;
                        }
                    });
                    correctur = 0;
                    if (hasScrollbar) {
                        if (grid.width - fixedColumnsWidth - (initialWidth + borderAndPaddingWidth * numberOfVariableColumns) !== scrollbarWidth) {
                            correctur = grid.width - fixedColumnsWidth - (initialWidth + borderAndPaddingWidth * numberOfVariableColumns) - scrollbarWidth;
                        }
                    } else if (!hasScrollbar && Math.abs(grid.width - fixedColumnsWidth - (initialWidth + borderAndPaddingWidth * numberOfVariableColumns)) !== 1) {
                        correctur = grid.width - fixedColumnsWidth - (initialWidth + borderAndPaddingWidth * numberOfVariableColumns);
                    }
                    p.colModel[iLastVariableColumn].width += correctur;
                    p.tblwidth = initialWidth + correctur + borderAndPaddingWidth * numberOfVariableColumns + fixedColumnsWidth;
                    if (p.tblwidth > p.width) {
                        p.colModel[iLastVariableColumn].width -= p.tblwidth - parseInt(p.width, 10);
                        p.tblwidth = p.width;
                    }
                }
            }, nextVisible = function(iCol1) {
                var ret = iCol1, j = iCol1, i;
                for (i = iCol1 + 1; i < p.colModel.length; i++) {
                    if (p.colModel[i].hidden !== true) {
                        j = i;
                        break;
                    }
                }
                return j - ret;
            }, getColumnHeaderIndex = function(th) {
                return p.iColByName[(th.id || "").substring(p.id.length + 1)];
            }, colTemplate;
            if (inArray(p.multikey, sortkeys) === -1) {
                p.multikey = false;
            }
            p.keyName = false;
            p.sortorder = p.sortorder.toLowerCase();
            jgrid.cell_width = jgrid.cellWidth();
            var jgridCmTemplate = jgrid.cmTemplate, iCol, cmi;
            for (iCol = 0; iCol < p.colModel.length; iCol++) {
                cmi = p.colModel[iCol];
                colTemplate = typeof cmi.template === "string" ? jgridCmTemplate != null && (typeof jgridCmTemplate[cmi.template] === "object" || $.isFunction(jgridCmTemplate[cmi.template])) ? jgridCmTemplate[cmi.template] : {} : cmi.template;
                if (isFunction(colTemplate)) {
                    colTemplate = colTemplate.call(ts, {
                        "cm": cmi,
                        "iCol": iCol
                    });
                }
                cmi = extend(true, {}, p.cmTemplate, colTemplate || {}, cmi);
                if (p.keyName === false && cmi.key === true) {
                    p.keyName = cmi.name;
                }
                p.colModel[iCol] = cmi;
            }
            for (iCol = 0; iCol < p.additionalProperties.length; iCol++) {
                cmi = p.additionalProperties[iCol];
                if (p.keyName === false && cmi.key === true) {
                    p.keyName = cmi.name;
                }
            }
            if (p.colNames.length === 0) {
                for (iCol = 0; iCol < p.colModel.length; iCol++) {
                    p.colNames[iCol] = p.colModel[iCol].label !== undefined ? p.colModel[iCol].label : p.colModel[iCol].name;
                }
            }
            if (p.colNames.length !== p.colModel.length) {
                fatalErrorFunction(getRes("errors.model"));
                return;
            }
            if (p.grouping === true) {
                p.scroll = false;
                p.rownumbers = false;
                p.treeGrid = false;
                p.gridview = true;
            }
            if (p.subGrid) {
                try {
                    $j.setSubGrid.call($self0);
                } catch (ignore1) {}
            }
            if (p.multiselect && (p.multiselectPosition === "left" || p.multiselectPosition === "right")) {
                var insertMethod = p.multiselectPosition === "left" ? "unshift" : "push";
                p.colNames[insertMethod]("<input id='" + p.cbId + "' class='cbox' type='checkbox' aria-checked='false'/>");
                p.colModel[insertMethod]({
                    "name": "cb",
                    "width": jgrid.cell_width ? p.multiselectWidth + p.cellLayout : p.multiselectWidth,
                    "labelClasses": "jqgh_cbox",
                    "classes": "td_cbox",
                    "sortable": false,
                    "resizable": false,
                    "hidedlg": true,
                    "search": false,
                    "align": "center",
                    "fixed": true,
                    "frozen": true
                });
            }
            if (p.rownumbers) {
                p.colNames.unshift("");
                p.colModel.unshift({
                    "name": "rn",
                    "width": jgrid.cell_width ? p.rownumWidth + p.cellLayout : p.rownumWidth,
                    "labelClasses": "jqgh_rn",
                    "sortable": false,
                    "resizable": false,
                    "hidedlg": true,
                    "search": false,
                    "align": "center",
                    "fixed": true,
                    "frozen": true
                });
            }
            p.iColByName = buildColNameMap(p.colModel);
            p.xmlReader = extend(true, {
                "root": "rows",
                "row": "row",
                "page": "rows>page",
                "total": "rows>total",
                "records": "rows>records",
                "repeatitems": true,
                "cell": "cell",
                "id": "[id]",
                "userdata": "userdata",
                "subgrid": {
                    "root": "rows",
                    "row": "row",
                    "repeatitems": true,
                    "cell": "cell"
                }
            }, p.xmlReader);
            p.jsonReader = extend(true, {
                "root": "rows",
                "page": "page",
                "total": "total",
                "records": "records",
                "repeatitems": true,
                "cell": "cell",
                "id": "id",
                "userdata": "userdata",
                "subgrid": {
                    "root": "rows",
                    "repeatitems": true,
                    "cell": "cell"
                }
            }, p.jsonReader);
            p.localReader = extend(true, {
                "root": "rows",
                "page": "page",
                "total": "total",
                "records": "records",
                "repeatitems": false,
                "cell": "cell",
                "id": "id",
                "userdata": "userdata",
                "subgrid": {
                    "root": "rows",
                    "repeatitems": true,
                    "cell": "cell"
                }
            }, p.localReader);
            if (p.scroll) {
                p.pgbuttons = false;
                p.pginput = false;
                p.rowList = [];
            }
            if (p.treeGrid === true) {
                try {
                    $j.setTreeGrid.call($self0);
                } catch (ignore1) {}
                if (p.datatype !== "local") {
                    p.localReader = {
                        "id": "_id_"
                    };
                }
                p.iPropByName = buildAddPropMap(p.additionalProperties);
            }
            normalizeRemapColumns();
            buildArrayReader();
            if (p.data.length) {
                normalizeData.call(ts);
                refreshIndex();
            }
            if (p.shrinkToFit === true && p.forceFit === true) {
                for (iCol = p.colModel.length - 1; iCol >= 0; iCol--) {
                    if (p.colModel[iCol].hidden !== true) {
                        p.colModel[iCol].resizable = false;
                        break;
                    }
                }
            }
            var idn, w, res, sort, tooltip, labelStyle, ptr, sortarr = [], sortord = [], sotmp = [], thead = "<thead><tr class='ui-jqgrid-labels' role='row'>", headerText, tbody = "<tbody><tr style='display:none;'>", hoverStateClasses = getGuiStyles("states.hover"), disabledStateClasses = getGuiStyles("states.disabled");
            if (p.multiSort) {
                sortarr = p.sortname.split(",");
                var iSort;
                for (iSort = 0; iSort < sortarr.length; iSort++) {
                    sotmp = trim(sortarr[iSort]).split(" ");
                    sortarr[iSort] = trim(sotmp[0]);
                    sortord[iSort] = sotmp[1] ? trim(sotmp[1]) : p.sortorder || "asc";
                }
            }
            for (iCol = 0; iCol < p.colNames.length; iCol++) {
                cmi = p.colModel[iCol];
                tooltip = p.headertitles || cmi.headerTitle ? " title='" + stripHtml(typeof cmi.headerTitle === "string" ? cmi.headerTitle : p.colNames[iCol]) + "'" : "";
                thead += "<th id='" + p.id + "_" + cmi.name + "' class='" + getGuiStyles("colHeaders", "ui-th-column ui-th-" + dir + " " + (cmi.labelClasses || "")) + "'" + tooltip + ">";
                idn = cmi.index || cmi.name;
                switch (cmi.labelAlign) {
                  case "left":
                    labelStyle = "text-align:left;";
                    break;

                  case "right":
                    labelStyle = "text-align:right;" + (cmi.sortable === false ? "" : "padding-right:" + p.autoResizing.widthOfVisiblePartOfSortIcon + "px;");
                    break;

                  case "likeData":
                    labelStyle = cmi.align === undefined || cmi.align === "left" ? "text-align:left;" : cmi.align === "right" ? "text-align:right;" + (cmi.sortable === false ? "" : "padding-right:" + p.autoResizing.widthOfVisiblePartOfSortIcon + "px;") : "";
                    break;

                  default:
                    labelStyle = "";
                }
                thead += "<div id='jqgh_" + p.id + "_" + cmi.name + "'" + (isMSIE ? " class='ui-th-div-ie'" : "") + (labelStyle === "" ? "" : " style='" + labelStyle + "'") + ">";
                headerText = cmi.autoResizable && cmi.formatter !== "actions" ? "<span class='" + p.autoResizing.wrapperClassName + "'>" + p.colNames[iCol] + "</span>" : p.colNames[iCol];
                if (p.sortIconsBeforeText) {
                    thead += (p.builderSortIcons || jgrid.builderSortIcons).call(ts, iCol);
                    thead += headerText;
                } else {
                    thead += headerText;
                    thead += (p.builderSortIcons || jgrid.builderSortIcons).call(ts, iCol);
                }
                thead += "</div></th>";
                tbody += "<td></td>";
                cmi.width = cmi.width ? parseInt(cmi.width, 10) : 150;
                if (typeof cmi.title !== "boolean") {
                    cmi.title = true;
                }
                cmi.lso = "";
                if (idn === p.sortname) {
                    p.lastsort = iCol;
                    cmi.lso = p.sortorder || cmi.firstsortorder || "asc";
                }
                if (p.multiSort) {
                    sotmp = inArray(idn, sortarr);
                    if (sotmp !== -1) {
                        cmi.lso = sortord[sotmp];
                    }
                }
            }
            thead += "</tr></thead>";
            tbody += "</tr></tbody>";
            var hTable = $("<table class='" + getGuiStyles("hTable", "ui-jqgrid-htable") + "' style='width:1px' role='presentation' aria-labelledby='gbox_" + p.id + "'>" + thead + tbody + "</table>");
            $(hTable[0].tHead).children("tr").children("th").hover(function() {
                $(this).addClass(hoverStateClasses);
            }, function() {
                $(this).removeClass(hoverStateClasses);
            });
            if (p.multiselect) {
                $(p.cb, hTable).bind("click", function() {
                    var highlightClass = getGuiStyles("states.select"), toCheck, emp = [], iColCb = p.iColByName.cb, selectUnselectRow = function(tr, toSelect) {
                        $(tr)[toSelect ? "addClass" : "removeClass"](highlightClass).attr(toSelect ? {
                            "aria-selected": "true",
                            "tabindex": "0"
                        } : {
                            "aria-selected": "false",
                            "tabindex": "-1"
                        });
                        if (iColCb !== undefined) {
                            $(tr.cells[iColCb]).children("input.cbox").prop("checked", toSelect);
                        }
                    }, frozenRows = grid.fbRows, skipClasses = disabledStateClasses + " ui-subgrid jqgroup jqfoot jqgfirstrow jqgskipselect", id, ids = p._index;
                    clearArray(p.selarrrow);
                    if (this.checked) {
                        toCheck = true;
                        p.selrow = ts.rows.length > 1 ? ts.rows[ts.rows.length - 1].id : null;
                        if (p.multiPageSelection && (p.datatype === "local" || p.treeGrid)) {
                            if (p.data != null && p.data.length > 0 && ids != null) {
                                for (id in ids) {
                                    if (ids.hasOwnProperty(id)) {
                                        p.selarrrow.push(p.idPrefix + id);
                                    }
                                }
                            }
                        }
                    } else {
                        toCheck = false;
                        p.selrow = null;
                    }
                    var selArr = toCheck ? p.selarrrow : emp;
                    $(ts.rows).each(function(i) {
                        if (!hasOneFromClasses(this, skipClasses)) {
                            selectUnselectRow(this, toCheck);
                            if ($.inArray(this.id, selArr) < 0) {
                                selArr.push(this.id);
                            }
                            if (frozenRows) {
                                selectUnselectRow(frozenRows[i], toCheck);
                            }
                        }
                    });
                    feedback.call(ts, "onSelectAll", toCheck ? p.selarrrow : emp, toCheck);
                });
            }
            if (p.autowidth === true) {
                var pw = Math.floor($(eg).innerWidth());
                p.width = pw > 0 ? pw : "nw";
            }
            if (!isNaN(p.width)) {
                p.width = Number(p.width);
            } else if (!isNaN(parseFloat(p.width))) {
                p.width = parseFloat(p.width);
            }
            p.widthOrg = p.width;
            setInitialColWidth();
            $(eg).css("width", grid.width + "px").append("<div class='" + getGuiStyles("resizer", "ui-jqgrid-resize-mark") + "' id='" + p.rsId + "'>&#160;</div>");
            $(p.rs).bind("selectstart", function() {
                return false;
            }).click(myResizerClickHandler).dblclick(function(e) {
                var iColIndex = $(this).data("idx"), pageX = $(this).data("pageX"), cm = p.colModel[iColIndex];
                if (pageX == null || cm == null) {
                    return false;
                }
                var arPageX = String(pageX).split(";"), pageX1 = parseFloat(arPageX[0]), pageX2 = parseFloat(arPageX[1]);
                if (arPageX.length === 2 && (Math.abs(pageX1 - pageX2) > 5 || Math.abs(e.pageX - pageX1) > 5 || Math.abs(e.pageX - pageX2) > 5)) {
                    return false;
                }
                if (feedback.call(ts, "resizeDblClick", iColIndex, cm, e) && cm.autoResizable) {
                    $j.autoResizeColumn.call($self0, iColIndex);
                }
                feedback.call(ts, "afterResizeDblClick", {
                    "iCol": iColIndex,
                    "cm": cm,
                    "cmName": cm.name
                });
                return false;
            });
            $(gv).css("width", grid.width + "px");
            var tfoot = "";
            if (p.footerrow) {
                tfoot += "<table role='presentation' style='width:1px' class='" + getGuiStyles("gridFooter", "ui-jqgrid-ftable") + "'><tbody><tr role='row' class='" + getGuiStyles("rowFooter", "footrow footrow-" + dir) + "'>";
            }
            var firstr = "<tr class='jqgfirstrow' role='row' style='height:auto'>";
            p.disableClick = false;
            $("th", hTable[0].tHead.rows[0]).each(function(j) {
                var cm = p.colModel[j], nm = cm.name, $th = $(this), $sortableDiv = $th.children("div"), $iconsSpan = $sortableDiv.children("span.s-ico"), showOneSortIcon = p.showOneSortIcon;
                w = cm.width;
                if (cm.resizable === undefined) {
                    cm.resizable = true;
                }
                if (cm.resizable) {
                    res = document.createElement("span");
                    $(res).html("&#160;").addClass("ui-jqgrid-resize ui-jqgrid-resize-" + dir).bind("selectstart", function() {
                        return false;
                    });
                    $th.addClass(p.resizeclass);
                } else {
                    res = "";
                }
                $th.css("width", w + "px").prepend(res);
                res = null;
                var hdcol = "";
                if (cm.hidden === true) {
                    $th.css("display", "none");
                    hdcol = "display:none;";
                }
                firstr += "<td role='gridcell' " + (cm.classes ? "class='" + cm.classes + "' " : "") + "style='height:0;width:" + w + "px;" + hdcol + "'></td>";
                grid.headers[j] = {
                    "width": w,
                    "el": this
                };
                sort = cm.sortable;
                if (typeof sort !== "boolean") {
                    cm.sortable = true;
                    sort = true;
                }
                if (!(nm === "cb" || nm === "subgrid" || nm === "rn") && sort) {
                    if (p.viewsortcols[2]) {
                        $sortableDiv.addClass("ui-jqgrid-sortable");
                    }
                }
                if (sort) {
                    if (p.multiSort) {
                        var notLso = cm.lso === "desc" ? "asc" : "desc";
                        if (p.viewsortcols[0]) {
                            $iconsSpan.css("display", "");
                            if (cm.lso) {
                                $iconsSpan.children("span.ui-icon-" + cm.lso).removeClass(disabledStateClasses);
                                if (showOneSortIcon) {
                                    $iconsSpan.children("span.ui-icon-" + notLso).hide();
                                }
                            }
                        } else if (cm.lso) {
                            $iconsSpan.css("display", "");
                            $iconsSpan.children("span.ui-icon-" + cm.lso).removeClass(disabledStateClasses);
                            if (showOneSortIcon) {
                                $iconsSpan.children("span.ui-icon-" + notLso).hide();
                            }
                        }
                    } else {
                        var notSortOrder = p.sortorder === "desc" ? "asc" : "desc";
                        if (p.viewsortcols[0]) {
                            $iconsSpan.css("display", "");
                            if (j === p.lastsort) {
                                $iconsSpan.children("span.ui-icon-" + p.sortorder).removeClass(disabledStateClasses);
                                if (showOneSortIcon) {
                                    $iconsSpan.children("span.ui-icon-" + notSortOrder).hide();
                                }
                            }
                        } else if (j === p.lastsort && cm.lso !== "") {
                            $iconsSpan.css("display", "");
                            $iconsSpan.children("span.ui-icon-" + p.sortorder).removeClass(disabledStateClasses);
                            if (showOneSortIcon) {
                                $iconsSpan.children("span.ui-icon-" + notSortOrder).hide();
                            }
                        }
                    }
                }
                if (p.footerrow) {
                    tfoot += "<td role='gridcell' " + formatCol(j, 0, "", null, "", false) + ">&#160;</td>";
                }
            }).mousedown(function(e) {
                var $th = $(this), isFrozen = $th.closest(".ui-jqgrid-hdiv").hasClass("frozen-div"), getOffset = function() {
                    var ret = [ $th.position().left + $th.outerWidth() ];
                    if (p.direction === "rtl") {
                        ret[0] = p.width - ret[0];
                    }
                    ret[0] -= isFrozen ? 0 : grid.bDiv.scrollLeft;
                    ret.push($(grid.hDiv).position().top);
                    ret.push($(grid.bDiv).offset().top - $(grid.hDiv).offset().top + $(grid.bDiv).height() + (grid.sDiv ? $(grid.sDiv).height() : 0));
                    return ret;
                }, iCol1;
                if ($(e.target).closest("th>span.ui-jqgrid-resize").length !== 1) {
                    return;
                }
                iCol1 = getColumnHeaderIndex(this);
                if (iCol1 != null) {
                    if (p.forceFit === true) {
                        p.nv = nextVisible(iCol1);
                    }
                    grid.dragStart(iCol1, e, getOffset(), $th);
                }
                return false;
            }).click(function(e) {
                if (p.disableClick) {
                    p.disableClick = false;
                    return false;
                }
                var s = "th.ui-th-column>div", r, d;
                if (!p.viewsortcols[2]) {
                    s += ">span.s-ico>span.ui-grid-ico-sort";
                } else {
                    s += ".ui-jqgrid-sortable";
                }
                var t = $(e.target).closest(s);
                if (t.length !== 1) {
                    return;
                }
                if (!p.viewsortcols[2]) {
                    r = true;
                    d = t.hasClass("ui-icon-desc") ? "desc" : "asc";
                }
                var iColByName = getColumnHeaderIndex(this);
                if (iColByName != null) {
                    sortData.call(ts, $("div", this)[0].id, iColByName, r, d, this);
                }
                return false;
            });
            if (p.sortable && $.fn.sortable) {
                try {
                    $j.sortableColumns.call($self0, $(hTable[0].tHead.rows[0]));
                } catch (ignore1) {}
            }
            if (p.footerrow) {
                tfoot += "</tr></tbody></table>";
            }
            firstr += "</tr>";
            $self0.html("<tbody>" + firstr + "</tbody>");
            $self0.addClass(getGuiStyles("grid", "ui-jqgrid-btable" + (p.altRows === true && $self0.jqGrid("isBootstrapGuiStyle") ? " table-striped" : "")));
            var hg = p.caption && p.hiddengrid === true ? true : false, hb = $("<div class='ui-jqgrid-hbox" + (dir === "rtl" ? "-rtl" : "") + "'></div>"), topClasses = getGuiStyles("top"), bottomClasses = getGuiStyles("bottom");
            grid.hDiv = document.createElement("div");
            $(grid.hDiv).css({
                "width": grid.width + "px"
            }).addClass(getGuiStyles("hDiv", "ui-jqgrid-hdiv")).append(hb).scroll(function() {
                var bDiv = $(this).next(".ui-jqgrid-bdiv")[0];
                if (bDiv) {
                    bDiv.scrollLeft = this.scrollLeft;
                }
                return false;
            });
            $(hb).append(hTable);
            hTable = null;
            if (hg) {
                $(grid.hDiv).hide();
            }
            p.rowNum = parseInt(p.rowNum, 10);
            if (isNaN(p.rowNum) || p.rowNum <= 0) {
                p.rowNum = p.maxRowNum;
            }
            if (p.pager) {
                var $pager, pagerId;
                if (typeof p.pager === "string" && p.pager.substr(0, 1) !== "#") {
                    pagerId = p.pager;
                    $pager = $("#" + jqID(p.pager));
                } else if (p.pager === true) {
                    pagerId = randId();
                    $pager = $("<div id='" + pagerId + "'></div>");
                    $pager.appendTo("body");
                    p.pager = "#" + jqID(pagerId);
                } else {
                    $pager = $(p.pager);
                    pagerId = $pager.attr("id");
                }
                if ($pager.length > 0) {
                    $pager.css({
                        "width": grid.width + "px"
                    }).addClass(getGuiStyles("pager.pager", "ui-jqgrid-pager " + bottomClasses)).appendTo(eg);
                    if (hg) {
                        $pager.hide();
                    }
                    setPager.call(ts, pagerId, "");
                    p.pager = "#" + jqID(pagerId);
                } else {
                    p.pager = "";
                }
            }
            if (p.cellEdit === false && p.hoverrows === true) {
                $self0.bind("mouseover", function(e) {
                    ptr = $(e.target).closest("tr.jqgrow");
                    if ($(ptr).attr("class") !== "ui-subgrid") {
                        $(ptr).addClass(hoverStateClasses);
                    }
                }).bind("mouseout", function(e) {
                    ptr = $(e.target).closest("tr.jqgrow");
                    $(ptr).removeClass(hoverStateClasses);
                });
            }
            var ri, ci, tdHtml, getTdFromTarget = function(target) {
                var $td, $tr, $table;
                do {
                    $td = $(target).closest("td");
                    if ($td.length > 0) {
                        $tr = $td.parent();
                        $table = $tr.parent().parent();
                        if ($tr.is(".jqgrow") && ($table[0] === this || $table.is("table.ui-jqgrid-btable") && ($table[0].id || "").replace("_frozen", "") === this.id)) {
                            break;
                        }
                        target = $td.parent();
                    }
                } while ($td.length > 0);
                return $td;
            };
            $self0.before(grid.hDiv).click(function(e) {
                var highlightClass = getGuiStyles("states.select"), target = e.target, $td = getTdFromTarget.call(this, target), $tr = $td.parent();
                if ($tr.length === 0 || hasOneFromClasses($tr, disabledStateClasses)) {
                    return;
                }
                ri = $tr[0].id;
                var scb = $(target).hasClass("cbox") && $(target).is(":enabled") && !hasOneFromClasses(target, disabledStateClasses), cSel = feedback.call(ts, "beforeSelectRow", ri, e), editingInfo = jgrid.detectRowEditing.call(ts, ri), locked = editingInfo != null && editingInfo.mode !== "cellEditing";
                if (target.tagName === "A" || locked && !scb) {
                    return;
                }
                ci = $td[0].cellIndex;
                tdHtml = $td.html();
                feedback.call(ts, "onCellSelect", ri, ci, tdHtml, e);
                if (p.cellEdit === true) {
                    if (p.multiselect && scb && cSel) {
                        setSelection.call($self0, ri, true, e);
                    } else {
                        ri = $tr[0].rowIndex;
                        try {
                            $j.editCell.call($self0, ri, ci, true);
                        } catch (ignore) {}
                    }
                    return;
                }
                if (!cSel) {
                    if (scb) {
                        $(target).prop("checked", false);
                    }
                    return;
                }
                if (!p.multikey) {
                    if (p.multiselect && p.multiboxonly) {
                        if (scb) {
                            setSelection.call($self0, ri, true, e);
                        } else {
                            var frz = p.frozenColumns ? p.id + "_frozen" : "";
                            $(p.selarrrow).each(function(i, n) {
                                var trid = $j.getGridRowById.call($self0, n);
                                if (trid) {
                                    $(trid).removeClass(highlightClass);
                                }
                                $("#jqg_" + jqID(p.id) + "_" + jqID(n)).prop("checked", false);
                                if (frz) {
                                    $("#" + jqID(n), "#" + jqID(frz)).removeClass(highlightClass);
                                    $("#jqg_" + jqID(p.id) + "_" + jqID(n), "#" + jqID(frz)).prop("checked", false);
                                }
                            });
                            clearArray(p.selarrrow);
                            setSelection.call($self0, ri, true, e);
                        }
                    } else {
                        var oldSelRow = p.selrow;
                        setSelection.call($self0, ri, true, e);
                        if (p.singleSelectClickMode === "toggle" && !p.multiselect && oldSelRow === ri) {
                            if (this.grid.fbRows) {
                                $tr = $tr.add(this.grid.fbRows[ri]);
                            }
                            $tr.removeClass(highlightClass).attr({
                                "aria-selected": "false",
                                "tabindex": "-1"
                            });
                            p.selrow = null;
                        }
                    }
                } else {
                    if (e[p.multikey]) {
                        setSelection.call($self0, ri, true, e);
                    } else if (p.multiselect && scb) {
                        scb = $("#jqg_" + jqID(p.id) + "_" + ri).is(":checked");
                        $("#jqg_" + jqID(p.id) + "_" + ri).prop("checked", !scb);
                    }
                }
            }).bind("reloadGrid", function(e, opts) {
                var self = this, gridSelf = self.grid, $self = $(this);
                if (p.treeGrid === true) {
                    p.datatype = p.treedatatype;
                }
                opts = extend({}, defaults.reloadGridOptions || {}, p.reloadGridOptions || {}, opts || {});
                if (p.datatype === "local" && p.dataTypeOrg && p.loadonce && opts.fromServer) {
                    p.datatype = p.dataTypeOrg;
                    delete p.dataTypeOrg;
                }
                if (opts.current) {
                    gridSelf.selectionPreserver.call(self);
                }
                if (p.datatype === "local") {
                    if (!p.multiPageSelection) {
                        $j.resetSelection.call($self);
                    }
                    if (p.data.length) {
                        normalizeData.call(self);
                        refreshIndex();
                    }
                } else if (!p.treeGrid && !p.multiPageSelection) {
                    p.selrow = null;
                    if (p.multiselect) {
                        clearArray(p.selarrrow);
                        setHeadCheckBox.call(self, false);
                    }
                    clearArray(p.savedRow);
                }
                p.iRow = -1;
                p.iCol = -1;
                if (p.scroll) {
                    grid.emptyRows.call(self, true, false);
                }
                if (opts.page) {
                    var page = parseInt(opts.page, 10);
                    if (page > p.lastpage) {
                        page = p.lastpage;
                    }
                    if (page < 1) {
                        page = 1;
                    }
                    p.page = page;
                    if (gridSelf.prevRowHeight) {
                        gridSelf.bDiv.scrollTop = (page - 1) * gridSelf.prevRowHeight * p.rowNum;
                    } else {
                        gridSelf.bDiv.scrollTop = 0;
                    }
                }
                if (gridSelf.prevRowHeight && p.scroll && opts.page === undefined) {
                    delete p.lastpage;
                    gridSelf.populateVisible.call(self);
                } else {
                    gridSelf.populate.call(self);
                }
                if (p._inlinenav === true) {
                    $self.jqGrid("showAddEditButtons", false);
                }
                return false;
            }).dblclick(function(e) {
                var $td = getTdFromTarget.call(this, e.target), $tr = $td.parent();
                if ($td.length > 0 && !feedback.call(ts, "ondblClickRow", $tr.attr("id"), $tr[0].rowIndex, $td[0].cellIndex, e)) {
                    return false;
                }
            }).bind("contextmenu", function(e) {
                var $td = getTdFromTarget.call(this, e.target), $tr = $td.parent(), rowid = $tr.attr("id");
                if ($td.length === 0) {
                    return;
                }
                if (!p.multiselect) {
                    setSelection.call($self0, rowid, true, e);
                }
                if (!feedback.call(ts, "onRightClickRow", rowid, $tr[0].rowIndex, $td[0].cellIndex, e)) {
                    return false;
                }
            });
            grid.bDiv = document.createElement("div");
            if (isMSIE) {
                if (String(p.height).toLowerCase() === "auto") {
                    p.height = "100%";
                }
            }
            $(grid.bDiv).append($("<div style='position:relative;'></div>").append("<div></div>").append(ts)).addClass("ui-jqgrid-bdiv").css({
                "height": p.height + (isNaN(p.height) ? "" : "px"),
                "width": grid.width + "px"
            }).scroll(grid.scrollGrid);
            if (p.maxHeight) {
                $(grid.bDiv).css("max-height", p.maxHeight + (isNaN(p.maxHeight) ? "" : "px"));
            }
            $self0.css({
                "width": "1px"
            });
            if (!$.support.tbody) {
                if ($(">tbody", ts).length === 2) {
                    $(">tbody:gt(0)", ts).remove();
                }
            }
            if (p.multikey) {
                $(grid.bDiv).bind(jgrid.msie ? "selectstart" : "mousedown", function() {
                    return false;
                });
            }
            if (hg) {
                $(grid.bDiv).hide();
            }
            grid.cDiv = document.createElement("div");
            var visibleGridIcon = getIcon("gridMinimize.visible"), hiddenGridIcon = getIcon("gridMinimize.hidden"), showhide = getDef("showhide"), arf = p.hidegrid === true ? $("<a role='link' class='" + getGuiStyles("titleButton", "ui-jqgrid-titlebar-close") + "'" + (showhide ? " title='" + showhide + "'" : "") + "/>").hover(function() {
                arf.addClass(hoverStateClasses);
            }, function() {
                arf.removeClass(hoverStateClasses);
            }).append("<span class='" + visibleGridIcon + "'></span>") : "";
            $(grid.cDiv).append("<span class='ui-jqgrid-title'>" + p.caption + "</span>").append(arf).addClass(getGuiStyles("gridTitle", "ui-jqgrid-titlebar ui-jqgrid-caption" + (dir === "rtl" ? "-rtl " : " ") + topClasses));
            $(grid.cDiv).insertBefore(grid.hDiv);
            if (p.toolbar[0]) {
                grid.uDiv = document.createElement("div");
                if (p.toolbar[1] === "top") {
                    $(grid.uDiv).insertBefore(grid.hDiv);
                } else if (p.toolbar[1] === "bottom") {
                    $(grid.uDiv).insertAfter(grid.hDiv);
                }
                var toolbarUpperClasses = getGuiStyles("toolbarUpper", "ui-userdata");
                if (p.toolbar[1] === "both") {
                    grid.ubDiv = document.createElement("div");
                    $(grid.uDiv).addClass(toolbarUpperClasses).attr("id", "t_" + p.id).insertBefore(grid.hDiv);
                    $(grid.ubDiv).addClass(getGuiStyles("toolbarBottom", "ui-userdata")).attr("id", "tb_" + p.id).insertAfter(grid.hDiv);
                    if (hg) {
                        $(grid.ubDiv).hide();
                    }
                } else {
                    $(grid.uDiv).width(grid.width).addClass(toolbarUpperClasses).attr("id", "t_" + p.id);
                }
                if (hg) {
                    $(grid.uDiv).hide();
                }
            }
            if (typeof p.datatype === "string") {
                p.datatype = p.datatype.toLowerCase();
            }
            if (p.toppager) {
                p.toppager = p.id + "_toppager";
                grid.topDiv = $("<div id='" + p.toppager + "'></div>")[0];
                $(grid.topDiv).addClass(getGuiStyles("pager.pager", "ui-jqgrid-toppager" + (p.caption ? "" : " " + topClasses))).css({
                    "width": grid.width + "px"
                }).insertBefore(grid.hDiv);
                setPager.call(ts, p.toppager, "_t");
                p.toppager = "#" + jqID(p.toppager);
            } else if (p.pager === "" && !p.scroll) {
                p.rowNum = p.maxRowNum;
            }
            if (p.footerrow) {
                grid.sDiv = $("<div class='ui-jqgrid-sdiv'></div>")[0];
                hb = $("<div class='ui-jqgrid-hbox" + (dir === "rtl" ? "-rtl" : "") + "'></div>");
                $(grid.sDiv).append(hb).width(grid.width).insertAfter(grid.hDiv);
                $(hb).append(tfoot);
                grid.footers = $(".ui-jqgrid-ftable", grid.sDiv)[0].rows[0].cells;
                if (p.rownumbers) {
                    grid.footers[0].className = getGuiStyles("rowNum", "jqgrid-rownum");
                }
                if (hg) {
                    $(grid.sDiv).hide();
                }
            }
            hb = null;
            if (p.caption) {
                var tdt = p.datatype;
                if (p.hidegrid === true) {
                    $(".ui-jqgrid-titlebar-close", grid.cDiv).click(function(e) {
                        var elems = ".ui-jqgrid-bdiv,.ui-jqgrid-hdiv,.ui-jqgrid-pager,.ui-jqgrid-sdiv", self = this;
                        if (p.toolbar[0] === true) {
                            if (p.toolbar[1] === "both") {
                                elems += ",#" + jqID($(grid.ubDiv).attr("id"));
                            }
                            elems += ",#" + jqID($(grid.uDiv).attr("id"));
                        }
                        var counter = $(elems, p.gView).length;
                        if (p.toppager) {
                            elems += "," + p.toppager;
                        }
                        if (p.gridstate === "visible") {
                            $(elems, p.gBox).slideUp("fast", function() {
                                counter--;
                                if (counter === 0) {
                                    $("span", self).removeClass(visibleGridIcon).addClass(hiddenGridIcon);
                                    p.gridstate = "hidden";
                                    if ($(p.gBox).hasClass("ui-resizable")) {
                                        $(".ui-resizable-handle", p.gBox).hide();
                                    }
                                    $(grid.cDiv).addClass(bottomClasses);
                                    if (!hg) {
                                        feedback.call(ts, "onHeaderClick", p.gridstate, e);
                                    }
                                }
                            });
                        } else if (p.gridstate === "hidden") {
                            $(grid.cDiv).removeClass(bottomClasses);
                            $(elems, p.gBox).slideDown("fast", function() {
                                counter--;
                                if (counter === 0) {
                                    $("span", self).removeClass(hiddenGridIcon).addClass(visibleGridIcon);
                                    if (hg) {
                                        p.datatype = tdt;
                                        populate.call(ts);
                                        hg = false;
                                    }
                                    p.gridstate = "visible";
                                    if ($(p.gBox).hasClass("ui-resizable")) {
                                        $(".ui-resizable-handle", p.gBox).show();
                                    }
                                    if (!hg) {
                                        feedback.call(ts, "onHeaderClick", p.gridstate, e);
                                    }
                                }
                            });
                        }
                        return false;
                    });
                    if (hg) {
                        p.datatype = "local";
                        $(".ui-jqgrid-titlebar-close", grid.cDiv).trigger("click");
                    }
                }
            } else {
                $(grid.cDiv).hide();
                $(grid.cDiv).nextAll("div:visible").first().addClass("ui-corner-top");
            }
            $(grid.hDiv).after(grid.bDiv);
            grid.eDiv = $("<div class='" + getGuiStyles("gridError", "ui-jqgrid-errorbar ui-jqgrid-errorbar-" + dir) + "' style='display:none;'>" + "<span class='" + getGuiStyles("gridErrorText", "ui-jqgrid-error") + "'></span></div>")[0];
            $(grid.hDiv).after(grid.eDiv);
            $(eg).click(myResizerClickHandler).dblclick(function(e) {
                var $resizer = $(p.rs), resizerOffset = $resizer.offset(), iColIndex = $resizer.data("idx"), delta = $resizer.data("delta"), cm = p.colModel[iColIndex], pageX = $(this).data("pageX") || $resizer.data("pageX");
                if (pageX == null || cm == null) {
                    return false;
                }
                var arPageX = String(pageX).split(";"), pageX1 = parseFloat(arPageX[0]), pageX2 = parseFloat(arPageX[1]);
                if (arPageX.length === 2 && (Math.abs(pageX1 - pageX2) > 5 || Math.abs(e.pageX - pageX1) > 5 || Math.abs(e.pageX - pageX2) > 5)) {
                    return false;
                }
                if (feedback.call(ts, "resizeDblClick", iColIndex, cm) && (resizerOffset.left - 1 <= e.pageX + delta && e.pageX + delta <= resizerOffset.left + $resizer.outerWidth() + 1) && cm.autoResizable) {
                    $j.autoResizeColumn.call($self0, iColIndex);
                }
                feedback.call(ts, "afterResizeDblClick", {
                    "iCol": iColIndex,
                    "cm": cm,
                    "cmName": cm.name
                });
                return false;
            });
            if (!p.pager) {
                $(grid.cDiv).nextAll("div:visible").filter(":last").addClass(bottomClasses);
            }
            $(".ui-jqgrid-labels", grid.hDiv).bind("selectstart", function() {
                return false;
            });
            ts.formatCol = formatCol;
            ts.sortData = sortData;
            ts.updatepager = updatepager;
            ts.refreshIndex = refreshIndex;
            ts.setHeadCheckBox = setHeadCheckBox;
            ts.fixScrollOffsetAndhBoxPadding = fixScrollOffsetAndhBoxPadding;
            ts.constructTr = constructTr;
            ts.formatter = formatter;
            extend(grid, {
                "populate": populate,
                "emptyRows": emptyRows,
                "beginReq": beginReq,
                "endReq": endReq
            });
            ts.addXmlData = readInput;
            ts.addJSONData = readInput;
            ts.rebuildRowIndexes = rebuildRowIndexes;
            ts.grid.cols = ts.rows[0].cells;
            feedback.call(ts, "onInitGrid");
            if (p.treeGrid && p.datatype === "local" && p.data != null && p.data.length > 0) {
                p.datatype = "jsonstring";
                p.datastr = p.data;
                p.data = [];
            }
            populate.call(ts);
            p.hiddengrid = false;
        });
    };
    var base = $.fn.jqGrid;
    jgrid.extend({
        "getGridRes": function(defaultPropName) {
            var $t = this[0];
            if (!$t || !$t.grid || !$t.p) {
                return null;
            }
            var res = jgrid.getRes(locales[$t.p.locale], defaultPropName) || jgrid.getRes(locales["en-US"], defaultPropName), resDef = jgrid.getRes(jgrid, defaultPropName);
            return typeof res === "object" && res !== null && !$.isArray(res) ? $.extend(true, {}, res, resDef || {}) : resDef !== undefined ? resDef : res;
        },
        "getGuiStyles": function(path, jqClasses) {
            var $t = this instanceof $ && this.length > 0 ? this[0] : this;
            if (!$t || !$t.grid || !$t.p) {
                return "";
            }
            var p = $t.p, guiStyle = p.guiStyle || jgrid.defaults.guiStyle || "jQueryUI", guiClasses = jgrid.getRes(jgrid.guiStyles[guiStyle], path), baseGuiStyle;
            if (guiClasses === undefined) {
                baseGuiStyle = jgrid.getRes(jgrid.guiStyles[guiStyle], "baseGuiStyle");
                if (typeof baseGuiStyle === "string") {
                    guiClasses = jgrid.getRes(jgrid.guiStyles[baseGuiStyle], path);
                }
            }
            return jgrid.mergeCssClasses(guiClasses || "", jqClasses || "");
        },
        "isBootstrapGuiStyle": function() {
            return $.inArray("ui-jqgrid-bootstrap", $(this).jqGrid("getGuiStyles", "gBox").split(" ")) >= 0;
        },
        "displayErrorMessage": function(message) {
            var $t = this instanceof $ && this.length > 0 ? this[0] : this;
            if (!$t || !$t.grid || !$t.p || !message) {
                return;
            }
            var $errorDiv = $($t.grid.eDiv), $errorSpan = $errorDiv.children(".ui-jqgrid-error");
            $errorSpan.html(message);
            $errorDiv.show();
            if ($t.p.errorDisplayTimeout) {
                setTimeout(function() {
                    $errorSpan.empty();
                    $errorDiv.hide();
                }, $t.p.errorDisplayTimeout);
            }
        },
        "getIconRes": function(path) {
            var $t = this instanceof $ && this.length > 0 ? this[0] : this;
            if (!$t || !$t.p) {
                return "";
            }
            var p = $t.p, iconSet = jgrid.icons[p.iconSet], getIcon = function(basePath, path) {
                var pathParts = path.split("."), root, n = pathParts.length, part, i, classes = [];
                basePath = typeof basePath === "string" ? jgrid.icons[basePath] : basePath;
                if (basePath == null) {
                    return "";
                }
                root = basePath;
                if (root.common) {
                    classes.push(root.common);
                }
                for (i = 0; i < n; i++) {
                    part = pathParts[i];
                    if (!part) {
                        break;
                    }
                    root = root[part];
                    if (root === undefined) {
                        if (part === "common") {
                            break;
                        }
                        return "";
                    }
                    if (typeof root === "string") {
                        classes.push(root);
                        break;
                    }
                    if (root != null && root.common) {
                        classes.push(root.common);
                    }
                }
                return jgrid.mergeCssClasses.apply(this, classes);
            };
            if (iconSet == null) {
                return "";
            }
            var classes = getIcon(p.iconSet, path);
            if (classes === "" && iconSet.baseIconSet != null) {
                classes = getIcon(iconSet.baseIconSet, path);
            }
            return classes || "";
        },
        "isInCommonIconClass": function(testClass) {
            var $t = this instanceof $ && this.length > 0 ? this[0] : this;
            if (!$t || !$t.p) {
                return "";
            }
            var p = $t.p, iconSet = jgrid.icons[p.iconSet];
            if (iconSet == null) {
                return false;
            }
            var commonClasses = iconSet.common;
            if (commonClasses === undefined) {
                if (iconSet.baseIconSet == null) {
                    return false;
                }
                iconSet = jgrid.icons[iconSet.baseIconSet];
                if (iconSet == null) {
                    return false;
                }
                commonClasses = iconSet.common;
            }
            return typeof commonClasses === "string" && $.inArray(testClass, commonClasses.split(" ")) >= 0;
        },
        "getGridParam": function(pName) {
            var $t = this[0];
            if (!$t || !$t.grid) {
                return null;
            }
            if (!pName) {
                return $t.p;
            }
            return $t.p[pName] !== undefined ? $t.p[pName] : null;
        },
        "setGridParam": function(newParams, overwrite) {
            return this.each(function() {
                var self = this;
                if (overwrite == null) {
                    overwrite = false;
                }
                if (self.grid && typeof newParams === "object") {
                    if (overwrite === true) {
                        var params = $.extend({}, self.p, newParams);
                        self.p = params;
                    } else {
                        $.extend(true, self.p, newParams);
                    }
                }
            });
        },
        "abortAjaxRequest": function() {
            return this.each(function() {
                var self = this;
                if (self.p.jqXhr != null) {
                    self.p.jqXhr.abort();
                }
                self.grid.endReq.call(self);
            });
        },
        "getGridRowById": function(rowid) {
            if (rowid == null) {
                return null;
            }
            var row, rowId = rowid.toString();
            this.each(function() {
                var i, rows = this.rows, tr, rowIndex;
                if (this.p.rowIndexes != null) {
                    rowIndex = this.p.rowIndexes[rowId];
                    tr = rows[rowIndex];
                    if (tr && tr.id === rowId) {
                        row = tr;
                    }
                }
                if (!row) {
                    try {
                        i = rows.length;
                        while (i--) {
                            tr = rows[i];
                            if (rowId === tr.id) {
                                row = tr;
                                break;
                            }
                        }
                    } catch (e) {
                        row = $(this.grid.bDiv).find("#" + jqID(rowid));
                        row = row.length > 0 ? row[0] : null;
                    }
                }
            });
            return row;
        },
        "getDataIDs": function() {
            var ids = [];
            this.each(function() {
                var rows = this.rows, len = rows.length, i, tr;
                if (len && len > 0) {
                    for (i = 0; i < len; i++) {
                        tr = rows[i];
                        if ($(tr).hasClass("jqgrow")) {
                            ids.push(tr.id);
                        }
                    }
                }
            });
            return ids;
        },
        "setSelection": function(selection, onsr, e) {
            return this.each(function() {
                var $t = this, $self = $($t), p = $t.p, stat, pt, ner, ia, tpsr, csr, $tr, getGuiStyles = base.getGuiStyles, getGridRowById = base.getGridRowById, highlightClass = getGuiStyles.call($self, "states.select"), disabledClasses = getGuiStyles.call($self, "states.disabled"), frozenRows = $t.grid.fbRows, selectUnselectRow = function(tr1, toSelect) {
                    var method = toSelect ? "addClass" : "removeClass", iColCb = p.iColByName.cb, attributes = toSelect ? {
                        "aria-selected": "true",
                        "tabindex": "0"
                    } : {
                        "aria-selected": "false",
                        "tabindex": "-1"
                    }, selectUnselectRowInTable = function(tr) {
                        $(tr)[method](highlightClass).attr(attributes);
                        if (iColCb !== undefined) {
                            $(tr.cells[iColCb]).children("input.cbox").prop("checked", toSelect);
                        }
                    };
                    selectUnselectRowInTable(tr1);
                    if (frozenRows) {
                        selectUnselectRowInTable(frozenRows[tr1.rowIndex]);
                    }
                };
                if (selection === undefined) {
                    return;
                }
                onsr = onsr === false ? false : true;
                if (e != null) {
                    $tr = $(e.target).closest("tr.jqgrow");
                    if ($tr.length > 0) {
                        pt = $tr[0];
                        if (frozenRows) {
                            pt = $t.rows[pt.rowIndex];
                        }
                    }
                }
                if (pt == null) {
                    pt = getGridRowById.call($self, selection);
                }
                if (!pt || !pt.className || pt.className.indexOf(disabledClasses) > -1) {
                    return;
                }
                function scrGrid(tr, bDiv) {
                    var ch = bDiv.clientHeight, st = bDiv.scrollTop, rpos = $(tr).position().top, rh = tr.clientHeight;
                    if (rpos + rh >= ch + st) {
                        bDiv.scrollTop = rpos - (ch + st) + rh + st;
                    } else if (rpos < ch + st) {
                        if (rpos < st) {
                            bDiv.scrollTop = rpos;
                        }
                    }
                }
                if (p.scrollrows === true) {
                    ner = getGridRowById.call($self, selection);
                    if (ner != null) {
                        ner = ner.rowIndex;
                        if (ner >= 0) {
                            scrGrid($t.rows[ner], $t.grid.bDiv);
                        }
                    }
                }
                if (!p.multiselect) {
                    if (pt.className !== "ui-subgrid") {
                        if (p.selrow !== pt.id) {
                            if (p.selrow !== null) {
                                csr = getGridRowById.call($self, p.selrow);
                                if (csr) {
                                    selectUnselectRow(csr, false);
                                }
                            }
                            selectUnselectRow(pt, true);
                            stat = true;
                        } else {
                            stat = false;
                        }
                        p.selrow = pt.id;
                        if (onsr) {
                            feedback.call($t, "onSelectRow", pt.id, stat, e);
                        }
                    }
                } else {
                    $t.setHeadCheckBox(false);
                    p.selrow = pt.id;
                    ia = $.inArray(p.selrow, p.selarrrow);
                    if (ia === -1) {
                        stat = true;
                        p.selarrrow.push(p.selrow);
                    } else if (jgrid.detectRowEditing.call($t, pt.id) !== null) {
                        stat = true;
                    } else {
                        stat = false;
                        p.selarrrow.splice(ia, 1);
                        tpsr = p.selarrrow[0];
                        p.selrow = tpsr === undefined ? null : tpsr;
                    }
                    if (pt.className !== "ui-subgrid") {
                        selectUnselectRow(pt, stat);
                    }
                    if (onsr) {
                        feedback.call($t, "onSelectRow", pt.id, stat, e);
                    }
                }
            });
        },
        "resetSelection": function(rowid) {
            return this.each(function() {
                var $t = this, $self = $(this), p = $t.p, row, getGuiStyles = base.getGuiStyles, getGridRowById = base.getGridRowById, highlightClass = getGuiStyles.call($self, "states.select"), cellEditCellHighlightClasses = "edit-cell " + highlightClass, cellEditRowHighlightClasses = "selected-row " + getGuiStyles.call($self, "states.hover"), iColCb = p.iColByName.cb, multiselectChechboxes = iColCb !== undefined, frozenRows = $t.grid.fbRows, deselectRow = function(tr) {
                    var method = "removeClass", frozenRow, attributes = {
                        "aria-selected": "false",
                        "tabindex": "-1"
                    };
                    $(tr)[method](highlightClass).attr(attributes);
                    if (multiselectChechboxes) {
                        $(tr.cells[iColCb]).children("input.cbox").prop("checked", false);
                    }
                    if (frozenRows) {
                        frozenRow = frozenRows[tr.rowIndex];
                        $(frozenRow)[method](highlightClass).attr(attributes);
                        if (multiselectChechboxes) {
                            $(frozenRow.cells[iColCb]).children("input.cbox").prop("checked", false);
                        }
                    }
                };
                if (rowid !== undefined) {
                    row = getGridRowById.call($self, rowid);
                    deselectRow(row);
                    if (multiselectChechboxes) {
                        $t.setHeadCheckBox(false);
                        var ia = $.inArray(rowid, p.selarrrow);
                        if (ia !== -1) {
                            p.selarrrow.splice(ia, 1);
                        }
                    }
                } else if (!p.multiselect) {
                    if (p.selrow) {
                        row = getGridRowById.call($self, p.selrow);
                        deselectRow(row);
                        p.selrow = null;
                    }
                } else {
                    $($t.rows).each(function() {
                        var iSel = $.inArray(this.id, p.selarrrow);
                        if (iSel !== -1) {
                            deselectRow(this);
                            p.selarrrow.splice(iSel, 1);
                        }
                    });
                    $t.setHeadCheckBox(false);
                    if (!p.multiPageSelection) {
                        clearArray(p.selarrrow);
                    }
                    p.selrow = null;
                }
                if (p.cellEdit === true) {
                    if (parseInt(p.iCol, 10) >= 0 && parseInt(p.iRow, 10) >= 0) {
                        row = $t.rows[p.iRow];
                        if (row != null) {
                            $(row.cells[p.iCol]).removeClass(cellEditCellHighlightClasses);
                            $(row).removeClass(cellEditRowHighlightClasses);
                        }
                        if (frozenRows) {
                            row = frozenRows[p.iRow];
                            if (row != null) {
                                $(row.cells[p.iCol]).removeClass(cellEditCellHighlightClasses);
                                $(row).removeClass(cellEditRowHighlightClasses);
                            }
                        }
                    }
                }
                clearArray(p.savedRow);
            });
        },
        "getRowData": function(rowid, options) {
            var res = {}, resall;
            if (typeof rowid === "object") {
                options = rowid;
                rowid = undefined;
            }
            options = options || {};
            this.each(function() {
                var $t = this, p = $t.p, getall = false, ind, len = 2, j = 0, rows = $t.rows, i, $td, cm, nm, td;
                if (rowid === undefined) {
                    getall = true;
                    resall = [];
                    len = rows.length;
                } else {
                    ind = base.getGridRowById.call($($t), rowid);
                    if (!ind) {
                        return res;
                    }
                }
                while (j < len) {
                    if (getall) {
                        ind = rows[j];
                    }
                    if ($(ind).hasClass("jqgrow")) {
                        $td = $("td[role=gridcell]", ind);
                        for (i = 0; i < $td.length; i++) {
                            cm = p.colModel[i];
                            nm = cm.name;
                            if (nm !== "cb" && nm !== "subgrid" && nm !== "rn" && cm.formatter !== "actions" && (!options.skipHidden || !cm.hidden)) {
                                td = $td[i];
                                if (p.treeGrid === true && nm === p.ExpandColumn) {
                                    res[nm] = htmlDecode($("span", td).first().html());
                                } else {
                                    try {
                                        res[nm] = $.unformat.call($t, td, {
                                            "rowId": ind.id,
                                            "colModel": cm
                                        }, i);
                                    } catch (exception) {
                                        res[nm] = htmlDecode($(td).html());
                                    }
                                }
                            }
                        }
                        if (options.includeId && (p.keyName === false || res[p.keyName] == null)) {
                            res[p.prmNames.id] = stripPref(p.idPrefix, ind.id);
                        }
                        if (getall) {
                            resall.push(res);
                            res = {};
                        }
                    }
                    j++;
                }
            });
            return resall || res;
        },
        "delRowData": function(rowid) {
            var success = false, rowInd, ia, nextRow;
            this.each(function() {
                var $t = this, p = $t.p;
                rowInd = base.getGridRowById.call($($t), rowid);
                if (!rowInd) {
                    return false;
                }
                if (p.subGrid) {
                    nextRow = $(rowInd).next();
                    if (nextRow.hasClass("ui-subgrid")) {
                        nextRow.remove();
                    }
                }
                $(rowInd).remove();
                p.records--;
                p.reccount--;
                $t.updatepager(true, false);
                success = true;
                if (p.multiselect) {
                    ia = $.inArray(rowid, p.selarrrow);
                    if (ia !== -1) {
                        p.selarrrow.splice(ia, 1);
                    }
                }
                if (p.multiselect && p.selarrrow.length > 0) {
                    p.selrow = p.selarrrow[p.selarrrow.length - 1];
                } else if (p.selrow === rowid) {
                    p.selrow = null;
                }
                if (p.datatype === "local") {
                    var id = stripPref(p.idPrefix, rowid), pos = p._index[id];
                    if (pos !== undefined) {
                        p.data.splice(pos, 1);
                        $t.refreshIndex();
                    }
                }
                $t.rebuildRowIndexes();
                if (p.altRows === true && success && !$($t).jqGrid("isBootstrapGuiStyle")) {
                    var cn = p.altclass, frozenRows = $t.grid.fbRows;
                    $($t.rows).each(function(i) {
                        var $row = $(this);
                        if (frozenRows) {
                            $row = $row.add(frozenRows[this.rowIndex]);
                        }
                        $row[i % 2 === 0 ? "addClass" : "removeClass"](cn);
                    });
                }
                feedback.call($t, "afterDelRow", rowid);
            });
            return success;
        },
        "setRowData": function(rowid, data, cssp) {
            var success = true;
            this.each(function() {
                var t = this, p = t.p, ind, cp = typeof cssp, lcdata = {};
                if (!t.grid) {
                    return false;
                }
                ind = base.getGridRowById.call($(t), rowid);
                if (!ind) {
                    return false;
                }
                if (data) {
                    try {
                        var id = stripPref(p.idPrefix, rowid), key, pos = p._index[id], newData = {}, oData = pos != null ? p.data[pos] : undefined;
                        $(p.colModel).each(function(i) {
                            var cm = this, nm = cm.name, vl = getAccessor(data, nm);
                            if (vl !== undefined) {
                                if (p.datatype === "local" && oData != null) {
                                    vl = convertOnSaveLocally.call(t, vl, cm, oData[nm], id, oData, i);
                                    if ($.isFunction(cm.saveLocally)) {
                                        cm.saveLocally.call(t, {
                                            "newValue": vl,
                                            "newItem": lcdata,
                                            "oldItem": oData,
                                            "id": id,
                                            "cm": cm,
                                            "cmName": nm,
                                            "iCol": i
                                        });
                                    } else {
                                        lcdata[nm] = vl;
                                    }
                                }
                                newData[nm] = vl;
                            }
                        });
                        $(p.colModel).each(function(i) {
                            var cm = this, nm = cm.name, title, vl = getAccessor(data, nm), $td = $(ind.cells[i]);
                            if (vl !== undefined) {
                                if (p.datatype === "local" && oData != null) {
                                    vl = lcdata[nm];
                                }
                                title = cm.title ? {
                                    "title": vl
                                } : {};
                                vl = t.formatter(rowid, vl, i, data, "edit", newData);
                                var $dataFiled = $td;
                                if (p.treeGrid === true && nm === p.ExpandColumn) {
                                    $dataFiled = $dataFiled.children("span.cell-wrapperleaf,span.cell-wrapper").first();
                                }
                                $dataFiled.html(vl);
                                $td.attr(title);
                                if (p.frozenColumns) {
                                    $dataFiled = $(t.grid.fbRows[ind.rowIndex].cells[i]);
                                    if (p.treeGrid === true && nm === p.ExpandColumn) {
                                        $dataFiled = $dataFiled.children("span.cell-wrapperleaf,span.cell-wrapper").first();
                                    }
                                    $dataFiled.html(vl).attr(title);
                                }
                            }
                        });
                        if (p.datatype === "local") {
                            if (p.treeGrid) {
                                for (key in p.treeReader) {
                                    if (p.treeReader.hasOwnProperty(key)) {
                                        delete lcdata[p.treeReader[key]];
                                    }
                                }
                            }
                            if (oData !== undefined) {
                                p.data[pos] = $.extend(true, oData, lcdata);
                            }
                        }
                        feedback.call(t, "afterSetRow", {
                            "rowid": rowid,
                            "inputData": data,
                            "iData": pos,
                            "iRow": ind.rowIndex,
                            "tr": ind,
                            "localData": lcdata,
                            "cssProp": cssp
                        });
                    } catch (exception) {
                        success = false;
                    }
                }
                if (success) {
                    if (cp === "string") {
                        $(ind).addClass(cssp);
                    } else if (cssp !== null && cp === "object") {
                        $(ind).css(cssp);
                    }
                }
            });
            return success;
        },
        "addRowData": function(rowid, rdata, pos, src) {
            if ($.inArray(pos, [ "first", "last", "before", "after", "afterSelected", "beforeSelected" ]) < 0) {
                pos = "last";
            }
            var success = false, nm, row, sind, i, v, aradd, cnm, cn, data, cm, id;
            if (rdata) {
                if ($.isArray(rdata)) {
                    aradd = true;
                    cnm = rowid;
                } else {
                    rdata = [ rdata ];
                    aradd = false;
                }
                this.each(function() {
                    var t = this, p = t.p, datalen = rdata.length, $self = $(t), rows = t.rows, k = 0, getGridRowById = base.getGridRowById, colModel = p.colModel, lcdata, additionalProperties = p.additionalProperties;
                    if (!aradd) {
                        if (rowid !== undefined) {
                            rowid = String(rowid);
                        } else {
                            rowid = randId();
                            if (p.keyName !== false) {
                                cnm = p.keyName;
                                if (rdata[0][cnm] !== undefined) {
                                    rowid = rdata[0][cnm];
                                }
                            }
                        }
                    }
                    cn = p.altclass;
                    while (k < datalen) {
                        data = rdata[k];
                        row = [];
                        if (aradd) {
                            try {
                                rowid = data[cnm];
                                if (rowid === undefined) {
                                    rowid = randId();
                                }
                            } catch (exception) {
                                rowid = randId();
                            }
                        }
                        id = rowid;
                        lcdata = {};
                        for (i = 0; i < colModel.length; i++) {
                            cm = colModel[i];
                            nm = cm.name;
                            if (nm !== "rn" && nm !== "cb" && nm !== "subgrid") {
                                v = convertOnSaveLocally.call(t, data[nm], cm, undefined, id, {}, i);
                                if ($.isFunction(cm.saveLocally)) {
                                    cm.saveLocally.call(t, {
                                        "newValue": v,
                                        "newItem": lcdata,
                                        "oldItem": {},
                                        "id": id,
                                        "cm": cm,
                                        "cmName": nm,
                                        "iCol": i
                                    });
                                } else if (v !== undefined) {
                                    lcdata[nm] = v;
                                }
                            }
                        }
                        for (i = 0; i < additionalProperties.length; i++) {
                            nm = additionalProperties[i];
                            if (typeof nm === "object" && nm.hasOwnProperty("name")) {
                                nm = nm.name;
                            }
                            v = getAccessor(data, nm);
                            if (v !== undefined) {
                                lcdata[nm] = v;
                            }
                        }
                        if (p.datatype === "local") {
                            lcdata[p.localReader.id] = id;
                            p._index[id] = p.data.length;
                            p.data.push(lcdata);
                        }
                        row = jgrid.parseDataToHtml.call(t, 1, [ rowid ], [ data ]);
                        row = row.join("");
                        if (rows.length === 0) {
                            $(t.tBodies[0]).append(row);
                        } else {
                            if (pos === "afterSelected" || pos === "beforeSelected") {
                                if (src === undefined && p.selrow !== null) {
                                    src = p.selrow;
                                    pos = pos === "afterSelected" ? "after" : "before";
                                } else {
                                    pos = pos === "afterSelected" ? "last" : "first";
                                }
                            }
                            switch (pos) {
                              case "last":
                                $(rows[rows.length - 1]).after(row);
                                sind = rows.length - 1;
                                break;

                              case "first":
                                $(rows[0]).after(row);
                                sind = 1;
                                break;

                              case "after":
                                sind = getGridRowById.call($self, src);
                                if (sind) {
                                    if ($(rows[sind.rowIndex + 1]).hasClass("ui-subgrid")) {
                                        $(rows[sind.rowIndex + 1]).after(row);
                                        sind = sind.rowIndex + 2;
                                    } else {
                                        $(sind).after(row);
                                        sind = sind.rowIndex + 1;
                                    }
                                }
                                break;

                              case "before":
                                sind = getGridRowById.call($self, src);
                                if (sind) {
                                    $(sind).before(row);
                                    sind = sind.rowIndex - 1;
                                }
                                break;
                            }
                        }
                        if (p.subGrid === true) {
                            base.addSubGrid.call($self, p.iColByName.subgrid, sind);
                        }
                        p.records++;
                        p.reccount++;
                        if (p.lastpage === 0) {
                            p.lastpage = 1;
                        }
                        feedback.call(t, "afterAddRow", {
                            "rowid": rowid,
                            "inputData": rdata,
                            "position": pos,
                            "srcRowid": src,
                            "iRow": sind,
                            "localData": lcdata,
                            "iData": p.data.length - 1
                        });
                        k++;
                    }
                    if (p.altRows === true && !aradd && !$self.jqGrid("isBootstrapGuiStyle")) {
                        if (pos === "last") {
                            if ((rows.length - 1) % 2 === 0) {
                                $(rows[rows.length - 1]).addClass(cn);
                            }
                        } else {
                            $(rows).each(function(iRow) {
                                if (iRow % 2 === 1) {
                                    $(this).addClass(cn);
                                } else {
                                    $(this).removeClass(cn);
                                }
                            });
                        }
                    }
                    t.rebuildRowIndexes();
                    t.updatepager(true, true);
                    success = true;
                });
            }
            return success;
        },
        "footerData": function(action, data, format) {
            var success = false, res = {};
            function isEmpty(obj) {
                var i;
                for (i in obj) {
                    if (obj.hasOwnProperty(i)) {
                        return false;
                    }
                }
                return true;
            }
            if (action == null) {
                action = "get";
            }
            if (typeof format !== "boolean") {
                format = true;
            }
            action = action.toLowerCase();
            this.each(function() {
                var t = this, p = t.p, vl, $td, nm, iCol;
                if (!t.grid || !p.footerrow) {
                    return false;
                }
                if (action === "set" && isEmpty(data)) {
                    return false;
                }
                success = true;
                var ftable = $(t.grid.sDiv).children(".ui-jqgrid-hbox").children(".ui-jqgrid-ftable")[0];
                if (ftable == null || ftable.rows == null) {
                    return false;
                }
                var cells = ftable.rows[0].cells, fcells = t.grid.fsDiv == null ? {} : t.grid.fsDiv.children(".ui-jqgrid-ftable")[0].rows[0].cells;
                for (nm in data) {
                    iCol = p.iColByName[nm];
                    if (data.hasOwnProperty(nm) && iCol !== undefined) {
                        if (action === "get") {
                            res[nm] = $(cells[iCol]).html();
                        } else if (action === "set") {
                            vl = format ? t.formatter("", data[nm], iCol, data, "edit") : data[nm];
                            $td = $(cells[iCol]).add(fcells[iCol]);
                            $td.html(vl);
                            if (p.colModel[iCol].title) {
                                $td.attr({
                                    "title": stripHtml(vl)
                                });
                            }
                        }
                    }
                }
            });
            return action === "get" ? res : success;
        },
        "showHideCol": function(colname, show, options) {
            return this.each(function() {
                var $t = this, $self = $($t), grid = $t.grid, fndh = false, p = $t.p, brd = jgrid.cell_width ? 0 : p.cellLayout, cw;
                if (!grid) {
                    return;
                }
                if (typeof colname === "string") {
                    colname = [ colname ];
                }
                show = show !== "none" && show !== false ? "" : "none";
                options = options || {};
                var sw = show === "" ? true : false, groupHeader = p.groupHeader, gh = groupHeader && (typeof groupHeader === "object" || $.isFunction(groupHeader));
                if (gh && !options.skipSetGroupHeaders) {
                    base.destroyGroupHeader.call($self, false);
                }
                $(p.colModel).each(function(iCol) {
                    if ($.inArray(this.name, colname) !== -1 && this.hidden === sw) {
                        if (p.frozenColumns === true && this.frozen === true && !options.notSkipFrozen) {
                            return true;
                        }
                        var $rows = $(grid.hDiv).find("tr[role=row]");
                        if (p.frozenColumns === true && grid.fhDiv != null) {
                            $rows = $rows.add($(grid.fhDiv).find("tr[role=row]"));
                        }
                        $rows.each(function() {
                            $(this.cells[iCol]).css("display", show);
                        });
                        $rows = $($t.rows);
                        if (p.frozenColumns === true && grid.fbRows != null) {
                            $rows = $rows.add(grid.fbRows);
                        }
                        $rows.each(function() {
                            var cell = this.cells[iCol];
                            if (!$(this).hasClass("jqgroup") || cell != null && cell.colSpan === 1) {
                                $(cell).css("display", show);
                            }
                        });
                        if (p.footerrow) {
                            $rows = $(grid.sDiv).find("tr.footrow");
                            if (p.frozenColumns === true && grid.fsDiv != null) {
                                $rows = $rows.add($(grid.fsDiv).find("tr.footrow"));
                            }
                            $rows.each(function() {
                                $(this.cells[iCol]).css("display", show);
                            });
                        }
                        cw = parseInt(this.width, 10);
                        if (show === "none") {
                            p.tblwidth -= cw + brd;
                        } else {
                            p.tblwidth += cw + brd;
                        }
                        this.hidden = !sw;
                        fndh = true;
                        if (!options.skipFeedback) {
                            feedback.call($t, "onShowHideCol", sw, this.name, iCol);
                        } else {
                            options.toReport = options.toReport || {};
                            options.toReport[this.name] = sw;
                        }
                    }
                });
                if (fndh === true) {
                    var newGridWidth = !p.autowidth && (p.widthOrg === undefined || p.widthOrg === "auto" || p.widthOrg === "100%") ? p.tblwidth + parseInt(p.scrollOffset, 10) : p.width;
                    if (!options.skipSetGridWidth) {
                        base.setGridWidth.call($self, newGridWidth);
                    } else {
                        options.newGridWidth = newGridWidth;
                    }
                }
                if (gh && !options.skipSetGroupHeaders) {
                    if (p.pivotOptions != null && p.pivotOptions.colHeaders != null && p.pivotOptions.colHeaders.length > 1) {
                        var i, gHead = p.pivotOptions.colHeaders;
                        for (i = 0; i < gHead.length; i++) {
                            if (gHead[i] && gHead[i].groupHeaders.length) {
                                base.setGroupHeaders.call($self, gHead[i]);
                            }
                        }
                    } else {
                        base.setGroupHeaders.call($self, p.groupHeader);
                    }
                }
            });
        },
        "hideCol": function(colname, options) {
            return this.each(function() {
                base.showHideCol.call($(this), colname, "none", options);
            });
        },
        "showCol": function(colname, options) {
            return this.each(function() {
                base.showHideCol.call($(this), colname, "", options);
            });
        },
        "remapColumns": function(permutation, updateCells, keepHeader) {
            var ts = this[0], p = ts.p, grid = ts.grid, iCol, n, makeArray = $.makeArray, isFrozenColumns = p.frozenColumns === true, $toResort, nFrozenColumns = this.jqGrid("getNumberOfFrozenColumns"), permutationNormalized;
            function normalizePermutation() {
                var frozen = [], nonFrozen = [], i, l = permutation.length;
                for (i = 0; i < l; i++) {
                    if (isFrozenColumns && permutation[i] < nFrozenColumns) {
                        frozen.push(permutation[i]);
                    } else {
                        nonFrozen.push(permutation[i]);
                    }
                }
                return frozen.concat(nonFrozen);
            }
            function resortArray(a) {
                var ac = a.length ? makeArray(a) : $.extend({}, a);
                $.each(permutationNormalized, function(i) {
                    a[i] = ac[this];
                });
            }
            function resortRows($parent, selector) {
                var $rows = selector ? $parent.children(selector) : $parent.children();
                $rows.each(function() {
                    var row = this, elems = makeArray(row.cells);
                    $.each(permutationNormalized, function(i) {
                        var e = elems[this], oldElem = row.cells[i];
                        if (e != null && oldElem != null && e.cellIndex !== i) {
                            e.parentNode.insertBefore(e, oldElem);
                        }
                    });
                });
            }
            if (grid == null || p == null) {
                return;
            }
            permutationNormalized = normalizePermutation();
            resortArray(p.colModel);
            resortArray(p.colNames);
            resortArray(grid.headers);
            $toResort = $(grid.hDiv).children("div").children("table.ui-jqgrid-htable").children("thead");
            if (isFrozenColumns && grid.fhDiv != null) {
                $toResort = $toResort.add(grid.fhDiv.children("table.ui-jqgrid-htable").children("thead"));
            }
            resortRows($toResort, keepHeader && ":not(.ui-jqgrid-labels)");
            if (updateCells) {
                $toResort = $(ts.tBodies[0]);
                if (isFrozenColumns && grid.fbDiv != null) {
                    $toResort = $toResort.add(grid.fbDiv.children("table.ui-jqgrid-btable").children("tbody").first());
                }
                resortRows($toResort, "tr.jqgfirstrow,tr.jqgrow,tr.jqfoot");
            }
            if (p.footerrow) {
                $toResort = $(grid.sDiv).children("div").children("table.ui-jqgrid-ftable").children("tbody").first();
                if (isFrozenColumns && grid.fsDiv != null) {
                    $toResort = $toResort.add(grid.fsDiv.children("table.ui-jqgrid-ftable").children("tbody").first());
                }
                resortRows($toResort);
            }
            if (p.remapColumns) {
                if (!p.remapColumns.length) {
                    p.remapColumns = makeArray(permutationNormalized);
                } else {
                    resortArray(p.remapColumns);
                }
            }
            p.lastsort = $.inArray(p.lastsort, permutationNormalized);
            p.iColByName = {};
            for (iCol = 0, n = p.colModel.length; iCol < n; iCol++) {
                p.iColByName[p.colModel[iCol].name] = iCol;
            }
            feedback.call(ts, "onRemapColumns", permutationNormalized, updateCells, keepHeader);
        },
        "remapColumnsByName": function(permutationByName, updateCells, keepHeader) {
            var ts = this[0], p = ts.p, permutation = [], i, n, cmNames = permutationByName.slice(), inArray = $.inArray;
            if (p.subGrid && inArray("subgrid", cmNames) < 0) {
                cmNames.unshift("subgrid");
            }
            if (p.multiselect && inArray("cb", cmNames) < 0) {
                cmNames.unshift("cb");
            }
            if (p.rownumbers && inArray("rn", cmNames) < 0) {
                cmNames.unshift("rn");
            }
            for (i = 0, n = cmNames.length; i < n; i++) {
                permutation.push(p.iColByName[cmNames[i]]);
            }
            base.remapColumns.call(this, permutation, updateCells, keepHeader);
            return this;
        },
        "setGridWidth": function(newWidth, shrink) {
            return this.each(function() {
                var $t = this, p = $t.p, columnWidth, grid = $t.grid, initialWidth = 0, iLastVariableColumn, numberOfVariableColumns = 0, hasScrollbar = false, totalVariableWidth, fixedColumnsWidth = 0, correctur, isCellClassHidden = jgrid.isCellClassHidden, newGridWidth = newWidth;
                if (!grid || p == null) {
                    return;
                }
                $t.fixScrollOffsetAndhBoxPadding();
                var colModel = p.colModel, cm, scrollbarWidth = p.scrollOffset, borderAndPaddingWidth = jgrid.cell_width ? 0 : p.cellLayout, thInfo, headers = grid.headers, footers = grid.footers, bDiv = grid.bDiv, hDiv = grid.hDiv, sDiv = grid.sDiv, cols = grid.cols, delta, colsExist, shrinkFactor, hCols = $(hDiv).find(">div>.ui-jqgrid-htable>thead>tr").first()[0].cells, setWidthOfAllDivs = function(width) {
                    grid.width = p.width = width;
                    $(p.gBox).css("width", width + "px");
                    $(p.gView).css("width", width + "px");
                    $(bDiv).css("width", width + "px");
                    $(hDiv).css("width", width + "px");
                    if (p.pager) {
                        $(p.pager).css("width", width + "px");
                    }
                    if (p.toppager) {
                        $(p.toppager).css("width", width + "px");
                    }
                    if (p.toolbar[0] === true) {
                        $(grid.uDiv).css("width", width + "px");
                        if (p.toolbar[1] === "both") {
                            $(grid.ubDiv).css("width", width + "px");
                        }
                    }
                    if (p.footerrow) {
                        $(sDiv).css("width", width + "px");
                    }
                };
                if (typeof shrink !== "boolean") {
                    shrink = p.shrinkToFit;
                }
                if (isNaN(newGridWidth)) {
                    return;
                }
                newGridWidth = parseInt(newGridWidth, 10);
                setWidthOfAllDivs(newGridWidth);
                if (shrink === false && p.forceFit === true) {
                    p.forceFit = false;
                }
                if (shrink === true) {
                    $.each(colModel, function() {
                        if (this.hidden === false && !isCellClassHidden(this.classes)) {
                            columnWidth = this.widthOrg;
                            initialWidth += columnWidth + borderAndPaddingWidth;
                            if (this.fixed) {
                                fixedColumnsWidth += this.width + borderAndPaddingWidth;
                            } else {
                                numberOfVariableColumns++;
                            }
                        }
                    });
                    if (numberOfVariableColumns === 0) {
                        return;
                    }
                    p.tblwidth = parseInt(initialWidth, 10);
                    totalVariableWidth = newGridWidth - borderAndPaddingWidth * numberOfVariableColumns - fixedColumnsWidth;
                    if (!isNaN(p.height)) {
                        if (bDiv.clientHeight < bDiv.scrollHeight || $t.rows.length === 1) {
                            hasScrollbar = true;
                            totalVariableWidth -= scrollbarWidth;
                        }
                    }
                    shrinkFactor = totalVariableWidth / (p.tblwidth - borderAndPaddingWidth * numberOfVariableColumns - fixedColumnsWidth);
                    if (shrinkFactor < 0) {
                        return;
                    }
                    initialWidth = 0;
                    colsExist = cols.length > 0;
                    $.each(colModel, function(i) {
                        if (this.hidden === false && !isCellClassHidden(this.classes) && !this.fixed) {
                            columnWidth = Math.round(this.widthOrg * shrinkFactor);
                            this.width = columnWidth;
                            initialWidth += columnWidth;
                            headers[i].width = columnWidth;
                            hCols[i].style.width = columnWidth + "px";
                            if (p.footerrow) {
                                footers[i].style.width = columnWidth + "px";
                            }
                            if (colsExist) {
                                cols[i].style.width = columnWidth + "px";
                            }
                            iLastVariableColumn = i;
                        }
                    });
                    if (!iLastVariableColumn) {
                        return;
                    }
                    correctur = 0;
                    if (hasScrollbar) {
                        if (newGridWidth - fixedColumnsWidth - (initialWidth + borderAndPaddingWidth * numberOfVariableColumns) !== scrollbarWidth) {
                            correctur = newGridWidth - fixedColumnsWidth - (initialWidth + borderAndPaddingWidth * numberOfVariableColumns) - scrollbarWidth;
                        }
                    } else if (Math.abs(newGridWidth - fixedColumnsWidth - (initialWidth + borderAndPaddingWidth * numberOfVariableColumns)) !== 1) {
                        correctur = newGridWidth - fixedColumnsWidth - (initialWidth + borderAndPaddingWidth * numberOfVariableColumns);
                    }
                    cm = colModel[iLastVariableColumn];
                    cm.width += correctur;
                    p.tblwidth = parseInt(initialWidth + correctur + borderAndPaddingWidth * numberOfVariableColumns + fixedColumnsWidth, 10);
                    if (p.tblwidth > newGridWidth) {
                        delta = p.tblwidth - parseInt(newGridWidth, 10);
                        p.tblwidth = newGridWidth;
                        cm.width = cm.width - delta;
                    }
                    columnWidth = cm.width;
                    thInfo = headers[iLastVariableColumn];
                    thInfo.width = columnWidth;
                    hCols[iLastVariableColumn].style.width = columnWidth + "px";
                    if (colsExist) {
                        cols[iLastVariableColumn].style.width = columnWidth + "px";
                    }
                    if (p.footerrow) {
                        footers[iLastVariableColumn].style.width = columnWidth + "px";
                    }
                    if (p.tblwidth + (hasScrollbar ? scrollbarWidth : 0) < p.width) {
                        setWidthOfAllDivs(p.tblwidth + (hasScrollbar ? scrollbarWidth : 0));
                    }
                    if (bDiv.offsetWidth > bDiv.clientWidth) {
                        if (!p.autowidth && (p.widthOrg === undefined || p.widthOrg === "auto" || p.widthOrg === "100%")) {
                            setWidthOfAllDivs(bDiv.offsetWidth);
                        }
                    }
                }
                if (p.tblwidth) {
                    p.tblwidth = parseInt(p.tblwidth, 10);
                    newGridWidth = p.tblwidth;
                    hDiv.scrollLeft = bDiv.scrollLeft;
                    delta = Math.abs(newGridWidth - p.width);
                    if (p.shrinkToFit && !shrink && delta < 3 && delta > 0) {
                        if (newGridWidth < p.width) {
                            setWidthOfAllDivs(newGridWidth);
                        }
                        if (bDiv.offsetWidth > bDiv.clientWidth) {
                            if (!p.autowidth && (p.widthOrg === undefined || p.widthOrg === "auto" || p.widthOrg === "100%")) {
                                setWidthOfAllDivs(bDiv.offsetWidth);
                            }
                        }
                    }
                }
                $t.fixScrollOffsetAndhBoxPadding();
                var whichHeigthToRecalculate = {
                    "resizeDiv": true,
                    "resizedRows": {
                        "iRowStart": shrink ? 0 : -1,
                        "iRowEnd": -1
                    }
                };
                $($t).triggerHandler("jqGridResetFrozenHeights", [ {
                    "header": whichHeigthToRecalculate,
                    "resizeFooter": true,
                    "body": whichHeigthToRecalculate
                } ]);
            });
        },
        "setGridHeight": function(nh) {
            return this.each(function() {
                var $t = this, grid = $t.grid, p = $t.p;
                if (!grid) {
                    return;
                }
                var bDiv = $(grid.bDiv);
                bDiv.css({
                    "height": nh + (isNaN(nh) ? "" : "px")
                });
                if (p.frozenColumns === true) {
                    $(p.idSel + "_frozen").parent().height(bDiv.height() - 16);
                }
                p.height = nh;
                if (p.scroll) {
                    grid.populateVisible.call($t);
                }
                $t.fixScrollOffsetAndhBoxPadding();
                $($t).triggerHandler("jqGridResetFrozenHeights");
            });
        },
        "setCaption": function(newcap) {
            return this.each(function() {
                var self = this, cDiv = self.grid.cDiv;
                self.p.caption = newcap;
                $("span.ui-jqgrid-title, span.ui-jqgrid-title-rtl", cDiv).html(newcap);
                $(cDiv).show();
                $(cDiv).nextAll("div").removeClass(base.getGuiStyles.call(self, "top"));
                $(this).triggerHandler("jqGridResetFrozenHeights");
            });
        },
        "setLabel": function(colname, nData, prop, attrp) {
            return this.each(function() {
                var $t = this, iCol, p = $t.p, $th;
                if (!$t.grid) {
                    return;
                }
                if (isNaN(colname)) {
                    iCol = p.iColByName[colname];
                    if (iCol === undefined) {
                        return;
                    }
                } else {
                    iCol = parseInt(colname, 10);
                }
                if (iCol >= 0) {
                    $th = $($t.grid.headers[iCol].el);
                    if (p.frozenColumns) {
                        $th = $th.add($t.grid.fhDiv.find(".ui-jqgrid-htable tr.ui-jqgrid-labels th.ui-th-column").eq(iCol));
                    }
                    if (nData) {
                        $th.each(function() {
                            var $div = $("[id^=jqgh_]", this), $textWrapper = $div.children("span.ui-jqgrid-cell-wrapper");
                            if ($textWrapper.length > 0) {
                                $textWrapper.html(nData);
                            } else {
                                var $ico = $(".s-ico", this);
                                $div.empty().html(nData)[p.sortIconsBeforeText ? "prepend" : "append"]($ico);
                            }
                        });
                        p.colNames[iCol] = nData;
                    }
                    if (prop) {
                        if (typeof prop === "string") {
                            $th.addClass(prop);
                        } else {
                            $th.css(prop);
                        }
                    }
                    if (typeof attrp === "object") {
                        $th.attr(attrp);
                    }
                }
            });
        },
        "setCell": function(rowid, colName, nData, cssp, attrp, forceUpdate) {
            return this.each(function() {
                var $t = this, p = $t.p, iCol = -1, colModel = p.colModel, v, i, cm, item, tr, $td, $tdi, val, rawdat = {}, id, index;
                if (!$t.grid) {
                    return;
                }
                iCol = isNaN(colName) ? p.iColByName[colName] : parseInt(colName, 10);
                if (iCol >= 0) {
                    tr = base.getGridRowById.call($($t), rowid);
                    if (tr) {
                        $td = jgrid.getCell.call($t, tr, iCol);
                        if (nData !== "" || forceUpdate === true) {
                            cm = colModel[iCol];
                            if (p.datatype === "local") {
                                id = stripPref(p.idPrefix, rowid);
                                index = p._index[id];
                                if (index !== undefined) {
                                    item = p.data[index];
                                }
                            }
                            if (item == null) {
                                for (i = 0; i < tr.cells.length; i++) {
                                    if (i !== iCol) {
                                        $tdi = jgrid.getDataFieldOfCell.call($t, tr, i);
                                        if ($tdi.length > 0) {
                                            try {
                                                val = $.unformat.call($t, $tdi, {
                                                    "rowId": rowid,
                                                    "colModel": colModel[i]
                                                }, i);
                                            } catch (exception) {
                                                val = htmlDecode($tdi[0].innerHTML);
                                            }
                                            rawdat[colModel[i].name] = val;
                                        }
                                    }
                                }
                            } else {
                                rawdat = item;
                            }
                            rawdat[cm.name] = nData;
                            v = $t.formatter(rowid, nData, iCol, rawdat, "edit");
                            var $dataFiled = $td;
                            if (p.treeGrid === true && cm.name === p.ExpandColumn) {
                                $dataFiled = $dataFiled.children("span.cell-wrapperleaf,span.cell-wrapper").first();
                            }
                            $dataFiled.html(v);
                            if (cm.title) {
                                $td.attr({
                                    "title": nData
                                });
                            }
                            if (item != null) {
                                v = convertOnSaveLocally.call($t, nData, cm, item[cm.name], id, item, iCol);
                                if ($.isFunction(cm.saveLocally)) {
                                    cm.saveLocally.call($t, {
                                        "newValue": v,
                                        "newItem": item,
                                        "oldItem": item,
                                        "id": id,
                                        "cm": cm,
                                        "cmName": cm.name,
                                        "iCol": iCol
                                    });
                                } else {
                                    item[cm.name] = v;
                                }
                            }
                        }
                        if (cssp || attrp) {
                            $td = jgrid.getCell.call($t, tr, iCol);
                            if (cssp) {
                                $td[typeof cssp === "string" ? "addClass" : "css"](cssp);
                            }
                            if (typeof attrp === "object") {
                                $td.attr(attrp);
                            }
                        }
                    }
                }
            });
        },
        "getCell": function(rowid, colName) {
            var ret = false;
            this.each(function() {
                var $t = this, iCol, p = $t.p, tr, $td;
                if (!$t.grid) {
                    return;
                }
                iCol = isNaN(colName) ? p.iColByName[colName] : parseInt(colName, 10);
                if (iCol >= 0) {
                    tr = base.getGridRowById.call($($t), rowid);
                    if (tr) {
                        $td = jgrid.getDataFieldOfCell.call($t, tr, iCol).first();
                        try {
                            ret = $.unformat.call($t, $td, {
                                "rowId": tr.id,
                                "colModel": p.colModel[iCol]
                            }, iCol);
                        } catch (exception) {
                            ret = htmlDecode($td.html());
                        }
                    }
                }
            });
            return ret;
        },
        "getCol": function(colName, obj, mathopr) {
            var ret = [], val, sum = 0, min, max, v;
            obj = typeof obj !== "boolean" ? false : obj;
            if (mathopr === undefined) {
                mathopr = false;
            }
            this.each(function() {
                var $t = this, iCol, p = $t.p, $td;
                if (!$t.grid) {
                    return;
                }
                iCol = isNaN(colName) ? p.iColByName[colName] : parseInt(colName, 10);
                if (iCol >= 0) {
                    var rows = $t.rows, ln = rows.length, i = 0, dlen = 0, tr;
                    if (ln && ln > 0) {
                        while (i < ln) {
                            tr = rows[i];
                            if ($(tr).hasClass("jqgrow")) {
                                $td = jgrid.getDataFieldOfCell.call($t, tr, iCol).first();
                                try {
                                    val = $.unformat.call($t, $td, {
                                        "rowId": tr.id,
                                        "colModel": p.colModel[iCol]
                                    }, iCol);
                                } catch (exception) {
                                    val = htmlDecode($td.html());
                                }
                                if (mathopr) {
                                    v = parseFloat(val);
                                    if (!isNaN(v)) {
                                        sum += v;
                                        if (max === undefined) {
                                            max = min = v;
                                        }
                                        min = Math.min(min, v);
                                        max = Math.max(max, v);
                                        dlen++;
                                    }
                                } else if (obj) {
                                    ret.push({
                                        "id": tr.id,
                                        "value": val
                                    });
                                } else {
                                    ret.push(val);
                                }
                            }
                            i++;
                        }
                        if (mathopr) {
                            switch (mathopr.toLowerCase()) {
                              case "sum":
                                ret = sum;
                                break;

                              case "avg":
                                ret = sum / dlen;
                                break;

                              case "count":
                                ret = ln - 1;
                                break;

                              case "min":
                                ret = min;
                                break;

                              case "max":
                                ret = max;
                                break;
                            }
                        }
                    }
                }
            });
            return ret;
        },
        "clearGridData": function(clearfooter) {
            return this.each(function() {
                var $t = this, p = $t.p, rows = $t.rows, grid = $t.grid;
                if (!grid || !p || !rows) {
                    return;
                }
                if (typeof clearfooter !== "boolean") {
                    clearfooter = false;
                }
                $($t).unbind(".jqGridFormatter");
                grid.emptyRows.call($t, false, true);
                if (p.footerrow && clearfooter) {
                    $(".ui-jqgrid-ftable td", grid.sDiv).html("&#160;");
                }
                p.selrow = null;
                clearArray(p.selarrrow);
                clearArray(p.savedRow);
                clearArray(p.data);
                clearArray(p.lastSelectedData);
                p._index = {};
                p.rowIndexes = {};
                p.records = 0;
                p.page = 1;
                p.lastpage = 0;
                p.reccount = 0;
                $t.updatepager(true, false);
            });
        },
        "getInd": function(rowid, rc) {
            var tr = base.getGridRowById.call($(this), rowid);
            return tr ? rc === true ? tr : tr.rowIndex : false;
        },
        "bindKeys": function(settings) {
            var o = $.extend({
                "onEnter": null,
                "onSpace": null,
                "onLeftKey": null,
                "onRightKey": null,
                "scrollingRows": true
            }, settings || {});
            return this.each(function() {
                var $t = this, p = $t.p, $self = $($t);
                p.scrollrows = o.scrollingRows;
                $self.bind("keydown.jqGrid", function(event) {
                    var tr = $(this).find("tr[tabindex=0]")[0], editingInfo = jgrid.detectRowEditing.call($t, $(event.target).closest("tr.jqgrow").attr("id")), moveVerical = function(siblingProperty) {
                        do {
                            tr = tr[siblingProperty];
                            if (tr === null) {
                                return;
                            }
                        } while ($(tr).is(":hidden") || !$(tr).hasClass("jqgrow"));
                        base.setSelection.call($self, tr.id, true);
                        event.preventDefault();
                    }, feedbackKey = function(name, callbackSuffix) {
                        var callback = o["on" + name + (callbackSuffix || "")];
                        $self.triggerHandler("jqGridKey" + name, [ p.selrow ]);
                        if ($.isFunction(callback)) {
                            callback.call($t, p.selrow);
                        }
                    }, moveHorizontal = function(stringLeftOrRight) {
                        if (p.treeGrid) {
                            var expanded = p.data[p._index[stripPref(p.idPrefix, tr.id)]][p.treeReader.expanded_field];
                            if (stringLeftOrRight === "Right") {
                                expanded = !expanded;
                            }
                            if (expanded) {
                                $(tr).find("div.treeclick").trigger("click");
                            }
                        }
                        feedbackKey(stringLeftOrRight, "Key");
                    };
                    if (tr && editingInfo === null) {
                        switch (event.keyCode) {
                          case 38:
                            moveVerical("previousSibling");
                            break;

                          case 40:
                            moveVerical("nextSibling");
                            break;

                          case 37:
                            moveHorizontal("Left");
                            break;

                          case 39:
                            moveHorizontal("Right");
                            break;

                          case 13:
                            feedbackKey("Enter");
                            break;

                          case 32:
                            feedbackKey("Space");
                            break;

                          default:
                            break;
                        }
                    }
                });
            });
        },
        "unbindKeys": function() {
            return this.each(function() {
                $(this).unbind("keydown.jqGrid");
            });
        },
        "getLocalRow": function(rowid) {
            var ret = false, ind;
            this.each(function() {
                if (rowid !== undefined) {
                    ind = this.p._index[stripPref(this.p.idPrefix, rowid)];
                    if (ind >= 0) {
                        ret = this.p.data[ind];
                    }
                }
            });
            return ret;
        },
        "progressBar": function(p) {
            p = $.extend({
                "htmlcontent": "",
                "method": "hide",
                "loadtype": "disable"
            }, p || {});
            return this.each(function() {
                var sh = p.method === "show" ? true : false, gridIdEscaped = jqID(this.p.id), $loading = $("#load_" + gridIdEscaped);
                if (p.htmlcontent !== "") {
                    $loading.html(p.htmlcontent);
                }
                switch (p.loadtype) {
                  case "disable":
                    break;

                  case "enable":
                    $loading.toggle(sh);
                    break;

                  case "block":
                    $("#lui_" + gridIdEscaped).toggle(sh);
                    $loading.toggle(sh);
                    break;
                }
            });
        },
        "setColWidth": function(iCol, newWidth, adjustGridWidth, skipGridAdjustments) {
            return this.each(function() {
                var self = this, $self = $(self), grid = self.grid, p = self.p, h;
                if (typeof iCol === "string") {
                    iCol = p.iColByName[iCol];
                    if (iCol === undefined) {
                        return;
                    }
                } else if (typeof iCol !== "number") {
                    return;
                }
                h = grid.headers[iCol];
                if (h != null) {
                    h.newWidth = newWidth;
                    grid.newWidth = p.tblwidth + newWidth - h.width;
                    grid.resizeColumn(iCol, !p.frozenColumns, skipGridAdjustments);
                    if (adjustGridWidth !== false && !skipGridAdjustments) {
                        self.fixScrollOffsetAndhBoxPadding();
                        base.setGridWidth.call($self, grid.newWidth + p.scrollOffset, false);
                    }
                }
            });
        },
        "getAutoResizableWidth": function(iCol) {
            var self = this;
            if (self.length === 0) {
                return -1;
            }
            self = self[0];
            var rows = self.rows, row, cell, iRow, $cell, $cellFirstChild, p = self.p, cm = p.colModel[iCol], $th = $(self.grid.headers[iCol].el), $thDiv = $th.find(">div"), thPaddingLeft = parseFloat($th.css("padding-left") || 0), thPaddingRight = parseFloat($th.css("padding-right") || 0), $incosDiv = $thDiv.find("span.s-ico"), $wrapper = $thDiv.find(">." + p.autoResizing.wrapperClassName), wrapperOuterWidth = $wrapper.outerWidth(), wrapperCssWidth = parseFloat($wrapper.css("width") || 0), widthOuter = 0, colWidth = 0, compact = cm.autoResizing != null && cm.autoResizable.compact !== undefined ? cm.autoResizable.compact : p.autoResizing.compact, wrapperClassName = p.autoResizing.wrapperClassName;
            if (cm == null || !cm.autoResizable || $wrapper.length === 0 || cm.hidden || jgrid.isCellClassHidden(cm.classes) || cm.fixed) {
                return -1;
            }
            if (!compact || $incosDiv.is(":visible") || $incosDiv.css("display") !== "none") {
                colWidth = $incosDiv.outerWidth(true);
                if (!p.sortIconsBeforeText) {
                    colWidth -= p.direction === "rtl" ? parseFloat($incosDiv.css("padding-left") || 0) + parseFloat($incosDiv.css("margin-left") || 0) : parseFloat($incosDiv.css("padding-right") || 0) + parseFloat($incosDiv.css("margin-right") || 0);
                }
            }
            colWidth += wrapperOuterWidth + thPaddingLeft + (wrapperCssWidth === wrapperOuterWidth ? thPaddingLeft + thPaddingRight : 0) + parseFloat($thDiv.css("margin-left") || 0) + parseFloat($thDiv.css("margin-right") || 0);
            for (iRow = 0, rows = self.rows; iRow < rows.length; iRow++) {
                row = rows[iRow];
                cell = row.cells[iCol];
                $cell = $(row.cells[iCol]);
                if (cell != null && ($(row).hasClass("jqgrow") || $(row).hasClass("jqgroup") && cell.colSpan === 1)) {
                    $cellFirstChild = $(cell.firstChild);
                    if ($cellFirstChild.hasClass(wrapperClassName)) {
                        colWidth = Math.max(colWidth, $cellFirstChild.outerWidth() + widthOuter);
                    } else if (p.treeGrid && p.ExpandColumn === cm.name) {
                        $cellFirstChild = $cell.children(".cell-wrapper,.cell-wrapperleaf");
                        colWidth = Math.max(colWidth, $cellFirstChild.outerWidth() + widthOuter + $cell.children(".tree-wrap").outerWidth());
                    }
                } else if ($(row).hasClass("jqgfirstrow")) {
                    widthOuter = (jgrid.cell_width ? parseFloat($cell.css("padding-left") || 0) + parseFloat($cell.css("padding-right") || 0) : 0) + parseFloat($cell.css("border-right") || 0) + parseFloat($cell.css("border-left") || 0);
                }
            }
            colWidth = Math.max(colWidth, cm.autoResizing != null && cm.autoResizing.minColWidth !== undefined ? cm.autoResizing.minColWidth : p.autoResizing.minColWidth);
            return Math.min(colWidth, cm.autoResizing != null && cm.autoResizing.maxColWidth !== undefined ? cm.autoResizing.maxColWidth : p.autoResizing.maxColWidth);
        },
        "autoResizeColumn": function(iCol, skipGridAdjustments) {
            return this.each(function() {
                var self = this, $self = $(this), p = self.p, cm = p.colModel[iCol], widthOrg, $th = $(self.grid.headers[iCol].el), newWidth = base.getAutoResizableWidth.call($self, iCol);
                if (cm == null || newWidth < 0 || newWidth === cm.width) {
                    return;
                }
                base.setColWidth.call($self, iCol, newWidth, p.autoResizing.adjustGridWidth && !p.autoResizing.fixWidthOnShrink && !skipGridAdjustments, skipGridAdjustments);
                if (p.autoResizing.fixWidthOnShrink && p.shrinkToFit && !skipGridAdjustments) {
                    cm.fixed = true;
                    widthOrg = cm.widthOrg;
                    cm.widthOrg = cm.width;
                    base.setGridWidth.call($self, p.width, true);
                    cm.widthOrg = widthOrg;
                    cm.fixed = false;
                }
                $th.data("autoResized", "true");
            });
        },
        "autoResizeAllColumns": function() {
            return this.each(function() {
                var self = this, $self = $(self), p = self.p, colModel = p.colModel, nCol = colModel.length, iCol, cm, shrinkToFit = p.shrinkToFit, adjustGridWidth = p.autoResizing.adjustGridWidth, fixWidthOnShrink = p.autoResizing.fixWidthOnShrink, width = parseInt(p.widthOrg, 10), grid = self.grid, autoResizeColumn = base.autoResizeColumn;
                p.shrinkToFit = false;
                p.autoResizing.adjustGridWidth = true;
                p.autoResizing.fixWidthOnShrink = false;
                for (iCol = 0; iCol < nCol; iCol++) {
                    cm = colModel[iCol];
                    if (cm.autoResizable && cm.formatter !== "actions") {
                        autoResizeColumn.call($self, iCol, true);
                    }
                }
                grid.hDiv.scrollLeft = grid.bDiv.scrollLeft;
                if (p.footerrow) {
                    grid.sDiv.scrollLeft = grid.bDiv.scrollLeft;
                }
                self.fixScrollOffsetAndhBoxPadding();
                if (!isNaN(width)) {
                    base.setGridWidth.call($self, width, false);
                } else if (adjustGridWidth) {
                    base.setGridWidth.call($self, grid.newWidth + p.scrollOffset, false);
                }
                p.autoResizing.fixWidthOnShrink = fixWidthOnShrink;
                p.autoResizing.adjustGridWidth = adjustGridWidth;
                p.shrinkToFit = shrinkToFit;
            });
        }
    });
});

(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./grid.base", "./jquery.fmatter", "./grid.common" ], factory);
    } else if (typeof exports === "object") {
        factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    "use strict";
    var jgrid = $.jgrid, jqID = jgrid.jqID, base = $.fn.jqGrid, getGuiStyles = base.getGuiStyles, getGridRes = base.getGridRes;
    jgrid.extend({
        "getColProp": function(colname) {
            var ret = {}, t = this[0], iCol;
            if (t != null && t.grid) {
                iCol = t.p.iColByName[colname];
                if (iCol !== undefined) {
                    return t.p.colModel[iCol];
                }
            }
            return ret;
        },
        "setColProp": function(colname, obj) {
            return this.each(function() {
                var self = this, p = self.p, iCol;
                if (self.grid && p != null && obj) {
                    iCol = p.iColByName[colname];
                    if (iCol !== undefined) {
                        $.extend(true, p.colModel[iCol], obj);
                    }
                }
            });
        },
        "sortGrid": function(colname, reload, sor) {
            return this.each(function() {
                var self = this, grid = self.grid, p = self.p, colModel = p.colModel, l = colModel.length, cm, i, sobj = false, sort;
                if (!grid) {
                    return;
                }
                if (!colname) {
                    colname = p.sortname;
                }
                if (typeof reload !== "boolean") {
                    reload = false;
                }
                for (i = 0; i < l; i++) {
                    cm = colModel[i];
                    if (cm.index === colname || cm.name === colname) {
                        if (p.frozenColumns === true && cm.frozen === true) {
                            sobj = grid.fhDiv.find("#" + p.id + "_" + colname);
                        }
                        if (!sobj || sobj.length === 0) {
                            sobj = grid.headers[i].el;
                        }
                        sort = cm.sortable;
                        if (typeof sort !== "boolean" || sort) {
                            self.sortData("jqgh_" + p.id + "_" + colname, i, reload, sor, sobj);
                        }
                        break;
                    }
                }
            });
        },
        "clearBeforeUnload": function() {
            return this.each(function() {
                var self = this, p = self.p, grid = self.grid, propOrMethod, clearArray = jgrid.clearArray, hasOwnProperty = Object.prototype.hasOwnProperty;
                if ($.isFunction(grid.emptyRows)) {
                    grid.emptyRows.call(self, true, true);
                }
                $(document).unbind("mouseup.jqGrid" + p.id);
                $(grid.hDiv).unbind("mousemove");
                $(self).unbind();
                var i, l = grid.headers.length;
                for (i = 0; i < l; i++) {
                    grid.headers[i].el = null;
                }
                for (propOrMethod in grid) {
                    if (grid.hasOwnProperty(propOrMethod)) {
                        grid.propOrMethod = null;
                    }
                }
                var propOrMethods = [ "formatCol", "sortData", "updatepager", "refreshIndex", "setHeadCheckBox", "constructTr", "clearToolbar", "fixScrollOffsetAndhBoxPadding", "rebuildRowIndexes", "modalAlert", "toggleToolbar", "triggerToolbar", "formatter", "addXmlData", "addJSONData", "ftoolbar", "_inlinenav", "nav", "grid", "p" ];
                l = propOrMethods.length;
                for (i = 0; i < l; i++) {
                    if (hasOwnProperty.call(self, propOrMethods[i])) {
                        self[propOrMethods[i]] = null;
                    }
                }
                self._index = {};
                clearArray(p.data);
                clearArray(p.lastSelectedData);
                clearArray(p.selarrrow);
                clearArray(p.savedRow);
            });
        },
        "GridDestroy": function() {
            return this.each(function() {
                var self = this, p = self.p;
                if (self.grid && p != null) {
                    if (p.pager) {
                        $(p.pager).remove();
                    }
                    try {
                        $("#alertmod_" + p.idSel).remove();
                        $(self).jqGrid("clearBeforeUnload");
                        $(p.gBox).remove();
                    } catch (ignore) {}
                }
            });
        },
        "GridUnload": function() {
            return this.each(function() {
                var self = this, $self = $(self), p = self.p, $j = $.fn.jqGrid;
                if (!self.grid) {
                    return;
                }
                $self.removeClass($j.getGuiStyles.call($self, "grid", "ui-jqgrid-btable"));
                if (p.pager) {
                    $(p.pager).empty().removeClass($j.getGuiStyles.call($self, "pagerBottom", "ui-jqgrid-pager")).removeAttr("style").removeAttr("dir");
                }
                $self.jqGrid("clearBeforeUnload");
                $self.removeAttr("style").removeAttr("tabindex").removeAttr("role").removeAttr("aria-labelledby").removeAttr("style");
                $self.empty();
                $self.insertBefore(p.gBox).show();
                $(p.pager).insertBefore(p.gBox).show();
                $(p.gBox).remove();
            });
        },
        "setGridState": function(state) {
            return this.each(function() {
                var $t = this, p = $t.p, grid = $t.grid, cDiv = grid.cDiv, $uDiv = $(grid.uDiv), $ubDiv = $(grid.ubDiv);
                if (!grid || p == null) {
                    return;
                }
                var getMinimizeIcon = function(path) {
                    return base.getIconRes.call($t, "gridMinimize." + path);
                }, visibleGridIcon = getMinimizeIcon("visible"), hiddenGridIcon = getMinimizeIcon("hidden");
                if (state === "hidden") {
                    $(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv", p.gView).slideUp("fast");
                    if (p.pager) {
                        $(p.pager).slideUp("fast");
                    }
                    if (p.toppager) {
                        $(p.toppager).slideUp("fast");
                    }
                    if (p.toolbar[0] === true) {
                        if (p.toolbar[1] === "both") {
                            $ubDiv.slideUp("fast");
                        }
                        $uDiv.slideUp("fast");
                    }
                    if (p.footerrow) {
                        $(".ui-jqgrid-sdiv", p.gBox).slideUp("fast");
                    }
                    $(".ui-jqgrid-titlebar-close span", cDiv).removeClass(visibleGridIcon).addClass(hiddenGridIcon);
                    p.gridstate = "hidden";
                } else if (state === "visible") {
                    $(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv", p.gView).slideDown("fast");
                    if (p.pager) {
                        $(p.pager).slideDown("fast");
                    }
                    if (p.toppager) {
                        $(p.toppager).slideDown("fast");
                    }
                    if (p.toolbar[0] === true) {
                        if (p.toolbar[1] === "both") {
                            $ubDiv.slideDown("fast");
                        }
                        $uDiv.slideDown("fast");
                    }
                    if (p.footerrow) {
                        $(".ui-jqgrid-sdiv", p.gBox).slideDown("fast");
                    }
                    $(".ui-jqgrid-titlebar-close span", cDiv).removeClass(hiddenGridIcon).addClass(visibleGridIcon);
                    p.gridstate = "visible";
                }
            });
        },
        "filterToolbar": function(oMuligrid) {
            return this.each(function() {
                var $t = this, grid = $t.grid, $self = $($t), p = $t.p, bindEv = jgrid.bindEv, infoDialog = jgrid.info_dialog, htmlEncode = jgrid.htmlEncode;
                if (this.ftoolbar) {
                    return;
                }
                var o = $.extend(true, {
                    "autosearch": true,
                    "autosearchDelay": 500,
                    "searchOnEnter": true,
                    "beforeSearch": null,
                    "afterSearch": null,
                    "beforeClear": null,
                    "afterClear": null,
                    "searchurl": "",
                    "stringResult": false,
                    "groupOp": "AND",
                    "defaultSearch": "bw",
                    "idMode": "new",
                    "searchOperators": false,
                    "resetIcon": "&times;",
                    "applyLabelClasses": true,
                    "loadFilterDefaults": true,
                    "operands": {
                        "eq": "==",
                        "ne": "!",
                        "lt": "<",
                        "le": "<=",
                        "gt": ">",
                        "ge": ">=",
                        "bw": "^",
                        "bn": "!^",
                        "in": "=",
                        "ni": "!=",
                        "ew": "|",
                        "en": "!@",
                        "cn": "~",
                        "nc": "!~",
                        "nu": "#",
                        "nn": "!#"
                    }
                }, jgrid.search, p.searching || {}, oMuligrid || {}), colModel = p.colModel, getRes = function(path) {
                    return getGridRes.call($self, path);
                }, errcap = getRes("errors.errcap"), bClose = getRes("edit.bClose"), editMsg = getRes("edit.msg"), hoverClasses = getGuiStyles.call($t, "states.hover"), highlightClass = getGuiStyles.call($t, "states.select"), dataFieldClass = getGuiStyles.call($t, "filterToolbar.dataField"), currentFilters, getId = function(cmName) {
                    var prefix = "gs_";
                    switch (o.idMode) {
                      case "compatibility":
                        prefix += p.idPrefix;
                        break;

                      case "new":
                        prefix += p.id + "_";
                        break;

                      default:
                        break;
                    }
                    return prefix + cmName;
                }, getIdSel = function(cmName) {
                    return "#" + jqID(getId(cmName));
                }, parseFilter = function(fillAll) {
                    var i, j, filters = p.postData.filters, filter = {}, rules, rule, iColByName = p.iColByName, cm, soptions;
                    if (fillAll) {
                        for (j = 0; j < colModel.length; j++) {
                            cm = colModel[j];
                            if (cm.search !== false) {
                                soptions = cm.searchoptions || {};
                                filter[cm.name] = {
                                    "op": soptions.sopt ? soptions.sopt[0] : cm.stype === "select" ? "eq" : o.defaultSearch,
                                    "data": soptions.defaultValue !== undefined ? soptions.defaultValue : ""
                                };
                            }
                        }
                    }
                    if (!filters || !p.search) {
                        return filter;
                    }
                    if (typeof filters === "string") {
                        try {
                            filters = $.parseJSON(filters);
                        } catch (ignore) {
                            filters = {};
                        }
                    } else {
                        filters = filters || {};
                    }
                    rules = filters.rules || {};
                    if (filters == null || filters.groupOp != null && o.groupOp != null && filters.groupOp.toUpperCase() !== o.groupOp.toUpperCase() || rules == null || rules.length === 0 || filters.groups != null && filters.groups.length > 0) {
                        return filter;
                    }
                    for (j = 0; j < rules.length; j++) {
                        rule = rules[j];
                        cm = colModel[iColByName[rule.field]];
                        for (i = 0; i < colModel.length; i++) {
                            cm = colModel[i];
                            if ((cm.index || cm.name) !== rule.field || cm.search === false) {
                                continue;
                            }
                            soptions = cm.searchoptions || {};
                            if (soptions.sopt) {
                                if ($.inArray(rule.op, soptions.sopt) < 0) {
                                    continue;
                                }
                            } else if (cm.stype === "select") {
                                if (rule.op !== "eq") {
                                    continue;
                                }
                            } else if (rule.op !== o.defaultSearch) {
                                continue;
                            }
                            filter[cm.name] = {
                                "op": rule.op,
                                "data": rule.data
                            };
                        }
                    }
                    return filter;
                }, triggerToolbar = function() {
                    var sdata = {}, j = 0, sopt = {};
                    $.each(colModel, function() {
                        var cm = this, nm = cm.index || cm.name, v, so, searchoptions = cm.searchoptions || {}, $elem = $(getIdSel(cm.name), cm.frozen === true && p.frozenColumns === true ? grid.fhDiv : grid.hDiv), getFormaterOption = function(optionName, formatter) {
                            var formatoptions = cm.formatoptions || {};
                            return formatoptions[optionName] !== undefined ? formatoptions[optionName] : getRes("formatter." + (formatter || cm.formatter) + "." + optionName);
                        }, cutThousandsSeparator = function(val) {
                            var separator = getFormaterOption("thousandsSeparator").replace(/([\.\*\_\'\(\)\{\}\+\?\\])/g, "\\$1");
                            return val.replace(new RegExp(separator, "g"), "");
                        };
                        if (o.searchOperators) {
                            so = $elem.parent().prev().children("a").data("soper") || o.defaultSearch;
                        } else {
                            so = searchoptions.sopt ? searchoptions.sopt[0] : cm.stype === "select" ? "eq" : o.defaultSearch;
                        }
                        if (cm.stype === "custom" && $.isFunction(searchoptions.custom_value) && $elem.length > 0 && $elem[0].nodeName.toUpperCase() === "SPAN") {
                            v = searchoptions.custom_value.call($t, $elem.children(".customelement").first(), "get");
                        } else if (cm.stype === "select") {
                            v = $elem.val();
                        } else {
                            v = $.trim($elem.val());
                            switch (cm.formatter) {
                              case "integer":
                                v = cutThousandsSeparator(v).replace(getFormaterOption("decimalSeparator", "number"), ".");
                                if (v !== "") {
                                    v = String(parseInt(v, 10));
                                }
                                break;

                              case "number":
                                v = cutThousandsSeparator(v).replace(getFormaterOption("decimalSeparator"), ".");
                                if (v !== "" && String(v).charAt(0) === "0") {
                                    v = String(parseFloat(v));
                                }
                                break;

                              case "currency":
                                var prefix = getFormaterOption("prefix"), suffix = getFormaterOption("suffix");
                                if (prefix && prefix.length) {
                                    v = v.substr(prefix.length);
                                }
                                if (suffix && suffix.length) {
                                    v = v.substr(0, v.length - suffix.length);
                                }
                                v = cutThousandsSeparator(v).replace(getFormaterOption("decimalSeparator"), ".");
                                if (v !== "") {
                                    v = String(parseFloat(v));
                                }
                                break;

                              default:
                                break;
                            }
                        }
                        if (v || so === "nu" || so === "nn") {
                            sdata[nm] = v;
                            sopt[nm] = so;
                            j++;
                        } else {
                            if (sdata.hasOwnProperty(nm)) {
                                delete sdata[nm];
                            }
                            if (!(o.stringResult || o.searchOperators || p.datatype === "local")) {
                                try {
                                    if (p.postData != null && p.postData.hasOwnProperty(nm)) {
                                        delete p.postData[nm];
                                    }
                                } catch (ignore) {}
                            }
                        }
                    });
                    var sd = j > 0 ? true : false;
                    if (o.stringResult || o.searchOperators || p.datatype === "local") {
                        var ruleGroup = '{"groupOp":"' + o.groupOp + '","rules":[';
                        var gi = 0;
                        $.each(sdata, function(cmName, n) {
                            if (gi > 0) {
                                ruleGroup += ",";
                            }
                            ruleGroup += '{"field":"' + cmName + '",';
                            ruleGroup += '"op":"' + sopt[cmName] + '",';
                            n += "";
                            ruleGroup += '"data":"' + n.replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"}';
                            gi++;
                        });
                        ruleGroup += "]}";
                        $.extend(p.postData, {
                            "filters": ruleGroup
                        });
                        $.each([ "searchField", "searchString", "searchOper" ], function(i, n) {
                            if (p.postData.hasOwnProperty(n)) {
                                delete p.postData[n];
                            }
                        });
                    } else {
                        $.extend(p.postData, sdata);
                    }
                    var saveurl;
                    if (p.searchurl) {
                        saveurl = p.url;
                        $self.jqGrid("setGridParam", {
                            "url": p.searchurl
                        });
                    }
                    var bsr = $self.triggerHandler("jqGridToolbarBeforeSearch") === "stop" ? true : false;
                    if (!bsr && $.isFunction(o.beforeSearch)) {
                        bsr = o.beforeSearch.call($t);
                    }
                    if (!bsr) {
                        $self.jqGrid("setGridParam", {
                            "search": sd
                        }).trigger("reloadGrid", [ $.extend({
                            "page": 1
                        }, o.reloadGridSearchOptions || {}) ]);
                    }
                    if (saveurl) {
                        $self.jqGrid("setGridParam", {
                            "url": saveurl
                        });
                    }
                    $self.triggerHandler("jqGridToolbarAfterSearch");
                    if ($.isFunction(o.afterSearch)) {
                        o.afterSearch.call($t);
                    }
                }, clearToolbar = function(trigger) {
                    var sdata = {}, j = 0, nm;
                    trigger = typeof trigger !== "boolean" ? true : trigger;
                    $.each(colModel, function() {
                        var v, cm = this, $elem = $(getIdSel(cm.name), cm.frozen === true && p.frozenColumns === true ? grid.fhDiv : grid.hDiv), isSindleSelect, searchoptions = cm.searchoptions || {};
                        if (searchoptions.defaultValue !== undefined) {
                            v = searchoptions.defaultValue;
                        }
                        nm = cm.index || cm.name;
                        switch (cm.stype) {
                          case "select":
                            isSindleSelect = $elem.length > 0 ? !$elem[0].multiple : true;
                            $elem.find("option").each(function(i) {
                                this.selected = i === 0 && isSindleSelect;
                                if ($(this).val() === v) {
                                    this.selected = true;
                                    return false;
                                }
                            });
                            if (v !== undefined) {
                                sdata[nm] = v;
                                j++;
                            } else {
                                try {
                                    delete p.postData[nm];
                                } catch (ignore) {}
                            }
                            break;

                          case "text":
                            $elem.val(v || "");
                            if (v !== undefined) {
                                sdata[nm] = v;
                                j++;
                            } else {
                                try {
                                    delete p.postData[nm];
                                } catch (ignore) {}
                            }
                            break;

                          case "custom":
                            if ($.isFunction(searchoptions.custom_value) && $elem.length > 0 && $elem[0].nodeName.toUpperCase() === "SPAN") {
                                searchoptions.custom_value.call($t, $elem.children(".customelement").first(), "set", v || "");
                            }
                            break;
                        }
                    });
                    var sd = j > 0 ? true : false;
                    p.resetsearch = true;
                    if (o.stringResult || o.searchOperators || p.datatype === "local") {
                        var ruleGroup = '{"groupOp":"' + o.groupOp + '","rules":[';
                        var gi = 0;
                        $.each(sdata, function(i, n) {
                            if (gi > 0) {
                                ruleGroup += ",";
                            }
                            ruleGroup += '{"field":"' + i + '",';
                            ruleGroup += '"op":"' + "eq" + '",';
                            n += "";
                            ruleGroup += '"data":"' + n.replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"}';
                            gi++;
                        });
                        ruleGroup += "]}";
                        $.extend(p.postData, {
                            "filters": ruleGroup
                        });
                        $.each([ "searchField", "searchString", "searchOper" ], function(i, n) {
                            if (p.postData.hasOwnProperty(n)) {
                                delete p.postData[n];
                            }
                        });
                    } else {
                        $.extend(p.postData, sdata);
                    }
                    var saveurl;
                    if (p.searchurl) {
                        saveurl = p.url;
                        $self.jqGrid("setGridParam", {
                            "url": p.searchurl
                        });
                    }
                    var bcv = $self.triggerHandler("jqGridToolbarBeforeClear") === "stop" ? true : false;
                    if (!bcv && $.isFunction(o.beforeClear)) {
                        bcv = o.beforeClear.call($t);
                    }
                    if (!bcv) {
                        if (trigger) {
                            $self.jqGrid("setGridParam", {
                                "search": sd
                            }).trigger("reloadGrid", [ $.extend({
                                "page": 1
                            }, o.reloadGridResetOptions || {}) ]);
                        }
                    }
                    if (saveurl) {
                        $self.jqGrid("setGridParam", {
                            "url": saveurl
                        });
                    }
                    $self.triggerHandler("jqGridToolbarAfterClear");
                    if ($.isFunction(o.afterClear)) {
                        o.afterClear();
                    }
                }, toggleToolbar = function() {
                    var trow = $("tr.ui-search-toolbar", grid.hDiv), trow2 = p.frozenColumns === true ? $("tr.ui-search-toolbar", grid.fhDiv) : false;
                    if (trow.css("display") === "none") {
                        trow.show();
                        if (trow2) {
                            trow2.show();
                        }
                    } else {
                        trow.hide();
                        if (trow2) {
                            trow2.hide();
                        }
                    }
                    if (p.frozenColumns === true) {
                        $self.jqGrid("destroyFrozenColumns");
                        $self.jqGrid("setFrozenColumns");
                    }
                }, odata = getRes("search.odata") || [], customSortOperations = p.customSortOperations, buildRuleMenu = function(elem, left, top) {
                    $("#sopt_menu").remove();
                    left = parseInt(left, 10);
                    top = parseInt(top, 10) + 18;
                    var selclass, ina, i = 0, aoprs = [], selected = $(elem).data("soper"), nm = $(elem).data("colname"), fs = $(".ui-jqgrid-view").css("font-size") || "11px", str = "<ul id='sopt_menu' class='" + getGuiStyles.call($t, "searchToolbar.menu", "ui-search-menu") + "' role='menu' tabindex='0' style='z-index:9999;display:block;font-size:" + fs + ";left:" + left + "px;top:" + top + "px;'>";
                    i = p.iColByName[nm];
                    if (i === undefined) {
                        return;
                    }
                    var cm = colModel[i], options = $.extend({}, cm.searchoptions), odataItem, item, itemOper, itemOperand, itemText;
                    if (!options.sopt) {
                        options.sopt = [];
                        options.sopt[0] = cm.stype === "select" ? "eq" : o.defaultSearch;
                    }
                    $.each(odata, function() {
                        aoprs.push(this.oper);
                    });
                    if (customSortOperations != null) {
                        $.each(customSortOperations, function(propertyName) {
                            aoprs.push(propertyName);
                        });
                    }
                    for (i = 0; i < options.sopt.length; i++) {
                        itemOper = options.sopt[i];
                        ina = $.inArray(itemOper, aoprs);
                        if (ina !== -1) {
                            odataItem = odata[ina];
                            if (odataItem !== undefined) {
                                itemOperand = o.operands[itemOper];
                                itemText = odataItem.text;
                            } else if (customSortOperations != null) {
                                item = customSortOperations[itemOper];
                                itemOperand = item.operand;
                                itemText = item.text;
                            }
                            selclass = selected === itemOper ? highlightClass : "";
                            str += '<li class="ui-menu-item ' + selclass + '" role="presentation"><a class="ui-corner-all g-menu-item" tabindex="0" role="menuitem" value="' + htmlEncode(itemOper) + '" data-oper="' + htmlEncode(itemOperand) + '"><table><tr><td style="width:25px">' + htmlEncode(itemOperand) + "</td><td>" + htmlEncode(itemText) + "</td></tr></table></a></li>";
                        }
                    }
                    str += "</ul>";
                    $("body").append(str);
                    $("#sopt_menu").addClass("ui-menu ui-widget ui-widget-content ui-corner-all");
                    $("#sopt_menu > li > a").hover(function() {
                        $(this).addClass(hoverClasses);
                    }, function() {
                        $(this).removeClass(hoverClasses);
                    }).click(function() {
                        var v = $(this).attr("value"), oper = $(this).data("oper");
                        $self.triggerHandler("jqGridToolbarSelectOper", [ v, oper, elem ]);
                        $("#sopt_menu").hide();
                        $(elem).text(oper).data("soper", v);
                        if (o.autosearch === true) {
                            var inpelm = $(elem).parent().next().children()[0];
                            if ($(inpelm).val() || v === "nu" || v === "nn") {
                                triggerToolbar();
                            }
                        }
                    });
                }, timeoutHnd, tr = $("<tr></tr>", {
                    "class": "ui-search-toolbar",
                    "role": "row"
                });
                if (o.loadFilterDefaults) {
                    currentFilters = parseFilter() || {};
                }
                $.each(colModel, function(ci) {
                    var cm = this, soptions, mode = "filter", surl, self, select = "", sot, so, i, searchoptions = cm.searchoptions || {}, editoptions = cm.editoptions || {}, th = $("<th></th>", {
                        "class": getGuiStyles.call($t, "colHeaders", "ui-th-column ui-th-" + p.direction + " " + (o.applyLabelClasses ? cm.labelClasses || "" : ""))
                    }), thd = $("<div></div>"), stbl = $("<table class='ui-search-table'><tr><td class='ui-search-oper'></td><td class='ui-search-input'></td><td class='ui-search-clear' style='width:1px'></td></tr></table>");
                    if (this.hidden === true) {
                        $(th).css("display", "none");
                    }
                    this.search = this.search === false ? false : true;
                    if (this.stype === undefined) {
                        this.stype = "text";
                    }
                    soptions = $.extend({
                        "mode": mode
                    }, searchoptions);
                    if (this.search) {
                        if (o.searchOperators) {
                            if (p.search && currentFilters[this.name] != null) {
                                so = currentFilters[this.name].op;
                            } else {
                                so = soptions.sopt ? soptions.sopt[0] : cm.stype === "select" ? "eq" : o.defaultSearch;
                            }
                            for (i = 0; i < odata.length; i++) {
                                if (odata[i].oper === so) {
                                    sot = o.operands[so] || "";
                                    break;
                                }
                            }
                            if (sot === undefined && customSortOperations != null) {
                                var customOp;
                                for (customOp in customSortOperations) {
                                    if (customSortOperations.hasOwnProperty(customOp) && customOp === so) {
                                        sot = customSortOperations[customOp].operand;
                                        break;
                                    }
                                }
                            }
                            if (sot === undefined) {
                                sot = "=";
                            }
                            var st = soptions.searchtitle != null ? soptions.searchtitle : getRes("search.operandTitle");
                            select = "<a title='" + st + "' data-soper='" + so + "' class='" + getGuiStyles.call($t, "searchToolbar.operButton", "soptclass") + "' data-colname='" + this.name + "'>" + sot + "</a>";
                        }
                        $("td", stbl).first().data("colindex", ci).append(select);
                        if (soptions.sopt == null || soptions.sopt.length === 1) {
                            $("td.ui-search-oper", stbl).hide();
                        }
                        if (p.search && currentFilters[this.name] != null) {
                            soptions.defaultValue = currentFilters[this.name].data;
                        }
                        if (soptions.clearSearch === undefined) {
                            soptions.clearSearch = this.stype === "text" ? true : false;
                        }
                        if (soptions.clearSearch) {
                            var csv = getRes("search.resetTitle") || "Clear Search Value";
                            $("td", stbl).eq(2).append("<a title='" + csv + "' class='" + getGuiStyles.call($t, "searchToolbar.clearButton", "clearsearchclass") + "'><span>" + o.resetIcon + "</span></a>");
                        } else {
                            $("td", stbl).eq(2).hide();
                        }
                        switch (this.stype) {
                          case "select":
                            surl = this.surl || soptions.dataUrl;
                            if (surl) {
                                self = thd;
                                $(self).append(stbl);
                                $.ajax($.extend({
                                    "url": surl,
                                    "context": {
                                        "stbl": stbl,
                                        "options": soptions,
                                        "cm": cm,
                                        "iCol": ci
                                    },
                                    "dataType": "html",
                                    "success": function(data, textStatus, jqXHR) {
                                        var cm1 = this.cm, iCol1 = this.iCol, soptions1 = this.options, d, $td = this.stbl.find(">tbody>tr>td.ui-search-input"), $select;
                                        if (soptions1.buildSelect !== undefined) {
                                            d = soptions1.buildSelect.call($t, data, jqXHR, cm1, iCol1);
                                            if (d) {
                                                $td.append(d);
                                            }
                                        } else {
                                            $td.append(data);
                                        }
                                        $select = $td.children("select");
                                        if ($select.find("option[value='']").length === 0 && typeof soptions.noFilterText === "string") {
                                            ov = document.createElement("option");
                                            ov.value = "";
                                            ov.innerHTML = soptions.noFilterText;
                                            $select.prepend(ov);
                                        }
                                        if (soptions1.defaultValue !== undefined) {
                                            $select.val(soptions1.defaultValue);
                                        }
                                        $select.attr({
                                            "name": cm1.index || cm1.name,
                                            "id": getId(cm1.name)
                                        });
                                        if (soptions1.attr) {
                                            $select.attr(soptions1.attr);
                                        }
                                        $select.addClass(dataFieldClass);
                                        $select.css({
                                            "width": "100%"
                                        });
                                        bindEv.call($t, $select[0], soptions1);
                                        jgrid.fullBoolFeedback.call($t, soptions1.selectFilled, "jqGridSelectFilled", {
                                            "elem": $select[0],
                                            "options": soptions1,
                                            "cm": cm1,
                                            "cmName": cm1.name,
                                            "iCol": iCol1,
                                            "mode": mode
                                        });
                                        if (o.autosearch === true) {
                                            $select.change(function() {
                                                triggerToolbar();
                                                return false;
                                            });
                                        }
                                    }
                                }, jgrid.ajaxOptions, p.ajaxSelectOptions || {}));
                            } else {
                                var oSv, sep, delim;
                                if (cm.searchoptions) {
                                    oSv = searchoptions.value === undefined ? editoptions.value || "" : searchoptions.value;
                                    sep = searchoptions.separator === undefined ? editoptions.separator || ":" : searchoptions.separator;
                                    delim = searchoptions.delimiter === undefined ? editoptions.delimiter || ";" : searchoptions.delimiter;
                                } else if (cm.editoptions) {
                                    oSv = editoptions.value === undefined ? "" : editoptions.value;
                                    sep = editoptions.separator === undefined ? ":" : editoptions.separator;
                                    delim = editoptions.delimiter === undefined ? ";" : editoptions.delimiter;
                                }
                                if (oSv) {
                                    var elem = document.createElement("select");
                                    elem.style.width = "100%";
                                    $(elem).attr({
                                        "name": cm.index || cm.name,
                                        "id": getId(cm.name)
                                    });
                                    var sv, ov, key, k, isNoFilterValueExist;
                                    if (typeof oSv === "string") {
                                        so = oSv.split(delim);
                                        for (k = 0; k < so.length; k++) {
                                            sv = so[k].split(sep);
                                            ov = document.createElement("option");
                                            ov.value = sv[0];
                                            if (sv[0] === "") {
                                                isNoFilterValueExist = true;
                                            }
                                            ov.innerHTML = sv[1];
                                            elem.appendChild(ov);
                                        }
                                    } else if (typeof oSv === "object") {
                                        for (key in oSv) {
                                            if (oSv.hasOwnProperty(key)) {
                                                ov = document.createElement("option");
                                                ov.value = key;
                                                if (key === "") {
                                                    isNoFilterValueExist = true;
                                                }
                                                ov.innerHTML = oSv[key];
                                                elem.appendChild(ov);
                                            }
                                        }
                                    }
                                    if (!isNoFilterValueExist && typeof soptions.noFilterText === "string") {
                                        ov = document.createElement("option");
                                        ov.value = "";
                                        ov.innerHTML = soptions.noFilterText;
                                        $(elem).prepend(ov);
                                    }
                                    if (soptions.defaultValue !== undefined) {
                                        $(elem).val(soptions.defaultValue);
                                    }
                                    if (soptions.attr) {
                                        $(elem).attr(soptions.attr);
                                    }
                                    $(elem).addClass(dataFieldClass);
                                    $(thd).append(stbl);
                                    bindEv.call($t, elem, soptions);
                                    $("td", stbl).eq(1).append(elem);
                                    jgrid.fullBoolFeedback.call($t, soptions.selectFilled, "jqGridSelectFilled", {
                                        "elem": elem,
                                        "options": cm.searchoptions || editoptions,
                                        "cm": cm,
                                        "cmName": cm.name,
                                        "iCol": ci,
                                        "mode": mode
                                    });
                                    if (o.autosearch === true) {
                                        $(elem).change(function() {
                                            triggerToolbar();
                                            return false;
                                        });
                                    }
                                }
                            }
                            break;

                          case "text":
                            var df = soptions.defaultValue !== undefined ? soptions.defaultValue : "";
                            $("td", stbl).eq(1).append("<input type='text' class='" + dataFieldClass + "' name='" + (cm.index || cm.name) + "' id='" + getId(cm.name) + "' value='" + df + "'/>");
                            $(thd).append(stbl);
                            if (soptions.attr) {
                                $("input", thd).attr(soptions.attr);
                            }
                            bindEv.call($t, $("input", thd)[0], soptions);
                            if (o.autosearch === true) {
                                if (o.searchOnEnter) {
                                    $("input", thd).keypress(function(e) {
                                        var key1 = e.charCode || e.keyCode || 0;
                                        if (key1 === 13) {
                                            triggerToolbar();
                                            return false;
                                        }
                                        return this;
                                    });
                                } else {
                                    $("input", thd).keydown(function(e) {
                                        var key1 = e.which;
                                        switch (key1) {
                                          case 13:
                                            return false;

                                          case 9:
                                          case 16:
                                          case 37:
                                          case 38:
                                          case 39:
                                          case 40:
                                          case 27:
                                            break;

                                          default:
                                            if (timeoutHnd) {
                                                clearTimeout(timeoutHnd);
                                            }
                                            timeoutHnd = setTimeout(function() {
                                                triggerToolbar();
                                            }, o.autosearchDelay);
                                        }
                                    });
                                }
                            }
                            break;

                          case "custom":
                            $("td", stbl).eq(1).append("<span style='width:100%;padding:0;box-sizing:border-box;' class='" + dataFieldClass + "' name='" + (cm.index || cm.name) + "' id='" + getId(cm.name) + "'/>");
                            $(thd).append(stbl);
                            try {
                                if ($.isFunction(soptions.custom_element)) {
                                    var celm = soptions.custom_element.call($t, soptions.defaultValue !== undefined ? soptions.defaultValue : "", soptions);
                                    if (celm) {
                                        celm = $(celm).addClass("customelement");
                                        $(thd).find("span[name='" + (cm.index || cm.name) + "']").append(celm);
                                    } else {
                                        throw "e2";
                                    }
                                } else {
                                    throw "e1";
                                }
                            } catch (ex) {
                                if (ex === "e1") {
                                    infoDialog.call($t, errcap, "function 'custom_element' " + editMsg.nodefined, bClose);
                                }
                                if (ex === "e2") {
                                    infoDialog.call($t, errcap, "function 'custom_element' " + editMsg.novalue, bClose);
                                } else {
                                    infoDialog.call($t, errcap, typeof ex === "string" ? ex : ex.message, bClose);
                                }
                            }
                            break;
                        }
                    }
                    $(th).append(thd);
                    $(th).find(".ui-search-oper .soptclass,.ui-search-clear .clearsearchclass").hover(function() {
                        $(this).addClass(hoverClasses);
                    }, function() {
                        $(this).removeClass(hoverClasses);
                    });
                    $(tr).append(th);
                    if (!o.searchOperators) {
                        $("td", stbl).eq(0).hide();
                    }
                });
                $(grid.hDiv).find(">div>.ui-jqgrid-htable>thead").append(tr);
                if (o.searchOperators) {
                    $(".soptclass", tr).click(function(e) {
                        var offset = $(this).offset(), left = offset.left, top = offset.top;
                        buildRuleMenu(this, left, top);
                        e.stopPropagation();
                    });
                    $("body").on("click", function(e) {
                        if (e.target.className !== "soptclass") {
                            $("#sopt_menu").hide();
                        }
                    });
                }
                $(".clearsearchclass", tr).click(function() {
                    var ptr = $(this).parents("tr").first(), coli = parseInt($("td.ui-search-oper", ptr).data("colindex"), 10), sval = $.extend({}, colModel[coli].searchoptions || {}), dval = sval.defaultValue || "";
                    if (colModel[coli].stype === "select") {
                        if (dval) {
                            $("td.ui-search-input select", ptr).val(dval);
                        } else {
                            $("td.ui-search-input select", ptr)[0].selectedIndex = 0;
                        }
                    } else {
                        $("td.ui-search-input input", ptr).val(dval);
                    }
                    if (o.autosearch === true) {
                        triggerToolbar();
                    }
                });
                $t.ftoolbar = true;
                $t.triggerToolbar = triggerToolbar;
                $t.clearToolbar = clearToolbar;
                $t.toggleToolbar = toggleToolbar;
                if (p.frozenColumns === true) {
                    $self.jqGrid("destroyFrozenColumns");
                    $self.jqGrid("setFrozenColumns");
                }
                $self.bind("jqGridRefreshFilterValues.filterToolbar" + (o.loadFilterDefaults ? " jqGridAfterLoadComplete.filterToolbar" : ""), function() {
                    var cmName, filter, newFilters = parseFilter(true) || {}, $input, $searchOper, i;
                    if (!o.stringResult && !o.searchOperators && p.datatype !== "local" && p.search) {
                        return;
                    }
                    for (cmName in newFilters) {
                        if (newFilters.hasOwnProperty(cmName)) {
                            filter = newFilters[cmName];
                            $input = $(getIdSel(cmName));
                            if ($.trim($input.val()) !== filter.data) {
                                $input.val(filter.data);
                            }
                            $searchOper = $input.closest(".ui-search-input").siblings(".ui-search-oper").children(".soptclass");
                            $searchOper.data("soper", filter.op);
                            $searchOper.text(o.operands[filter.op]);
                        }
                    }
                    for (i = 0; i < p.colModel.length; i++) {
                        cmName = p.colModel[i].name;
                        if (!newFilters.hasOwnProperty(cmName)) {
                            $(getIdSel(cmName)).val("");
                        }
                    }
                });
            });
        },
        "destroyFilterToolbar": function() {
            return this.each(function() {
                var self = this;
                if (!self.ftoolbar) {
                    return;
                }
                self.triggerToolbar = null;
                self.clearToolbar = null;
                self.toggleToolbar = null;
                self.ftoolbar = false;
                $(self.grid.hDiv).find("table thead tr.ui-search-toolbar").remove();
                if (self.p.frozenColumns === true) {
                    $(self).jqGrid("destroyFrozenColumns").jqGrid("setFrozenColumns");
                }
            });
        },
        "destroyGroupHeader": function(nullHeader) {
            if (nullHeader === undefined) {
                nullHeader = true;
            }
            return this.each(function() {
                var $t = this, i, l, $th, $resizing, grid = $t.grid, cm = $t.p.colModel, hc, thead = $("table.ui-jqgrid-htable thead", grid.hDiv);
                if (!grid) {
                    return;
                }
                $($t).unbind(".setGroupHeaders");
                var $tr = $("<tr>", {
                    "role": "row"
                }).addClass("ui-jqgrid-labels");
                var headers = grid.headers;
                for (i = 0, l = headers.length; i < l; i++) {
                    hc = cm[i].hidden ? "none" : "";
                    $th = $(headers[i].el).width(headers[i].width).css("display", hc);
                    try {
                        $th.removeAttr("rowSpan");
                    } catch (rs) {
                        $th.attr("rowSpan", 1);
                    }
                    $tr.append($th);
                    $resizing = $th.children("span.ui-jqgrid-resize");
                    if ($resizing.length > 0) {
                        $resizing[0].style.height = "";
                    }
                    $th.children("div")[0].style.top = "";
                }
                $(thead).children("tr.ui-jqgrid-labels").remove();
                $(thead).prepend($tr);
                if (nullHeader === true) {
                    $($t).jqGrid("setGridParam", {
                        "groupHeader": null
                    });
                }
            });
        },
        "setGroupHeaders": function(o) {
            o = $.extend({
                "useColSpanStyle": false,
                "applyLabelClasses": true,
                "groupHeaders": []
            }, o || {});
            return this.each(function() {
                this.p.groupHeader = o;
                var ts = this, i, cmi, skip = 0, $tr, $colHeader, th, $th, thStyle, iCol, cghi, numberOfColumns, titleText, cVisibleColumns, cColumns, p = ts.p, colModel = p.colModel, cml = colModel.length, ths = ts.grid.headers, $theadInTable, thClasses, $htable = $("table.ui-jqgrid-htable", ts.grid.hDiv), isCellClassHidden = jgrid.isCellClassHidden, $trLabels = $htable.children("thead").children("tr.ui-jqgrid-labels"), $trLastWithLabels = $trLabels.last().addClass("jqg-second-row-header"), $thead = $htable.children("thead"), $firstHeaderRow = $htable.find(".jqg-first-row-header");
                if ($firstHeaderRow[0] === undefined) {
                    $firstHeaderRow = $("<tr>", {
                        "role": "row",
                        "aria-hidden": "true"
                    }).addClass("jqg-first-row-header").css("height", "auto");
                } else {
                    $firstHeaderRow.empty();
                }
                var inColumnHeader = function(text, columnHeaders) {
                    var length = columnHeaders.length, j;
                    for (j = 0; j < length; j++) {
                        if (columnHeaders[j].startColumnName === text) {
                            return j;
                        }
                    }
                    return -1;
                };
                $(ts).prepend($thead);
                $tr = $("<tr>", {
                    "role": "row"
                }).addClass("ui-jqgrid-labels jqg-third-row-header");
                for (i = 0; i < cml; i++) {
                    th = ths[i].el;
                    $th = $(th);
                    cmi = colModel[i];
                    thStyle = {
                        "height": "0",
                        "width": ths[i].width + "px",
                        "display": cmi.hidden ? "none" : ""
                    };
                    $("<th>", {
                        "role": "gridcell"
                    }).css(thStyle).addClass("ui-first-th-" + p.direction + (o.applyLabelClasses ? " " + (cmi.labelClasses || "") : "")).appendTo($firstHeaderRow);
                    th.style.width = "";
                    thClasses = getGuiStyles.call(ts, "colHeaders", "ui-th-column-header ui-th-" + p.direction + " " + (o.applyLabelClasses ? cmi.labelClasses || "" : ""));
                    iCol = inColumnHeader(cmi.name, o.groupHeaders);
                    if (iCol >= 0) {
                        cghi = o.groupHeaders[iCol];
                        numberOfColumns = cghi.numberOfColumns;
                        titleText = cghi.titleText;
                        for (cVisibleColumns = 0, iCol = 0, cColumns = 0; iCol < numberOfColumns && i + iCol < cml; iCol++) {
                            cColumns++;
                            if (!colModel[i + iCol].hidden && !isCellClassHidden(colModel[i + iCol].classes)) {
                                cVisibleColumns++;
                            }
                        }
                        $colHeader = $("<th>").addClass(thClasses).css({
                            "height": "22px",
                            "border-top": "0 none"
                        }).html(titleText);
                        if (cColumns > 1) {
                            $colHeader.attr("colspan", String(cColumns));
                        }
                        if (p.headertitles) {
                            $colHeader.attr("title", $colHeader.text());
                        }
                        if (cVisibleColumns === 0) {
                            $colHeader.hide();
                        }
                        $th.before($colHeader);
                        $tr.append(th);
                        skip = numberOfColumns - 1;
                    } else {
                        if (skip === 0) {
                            if (o.useColSpanStyle) {
                                $th.attr("rowspan", $trLabels.length + 1);
                            } else {
                                $("<th>").addClass(thClasses).css({
                                    "display": cmi.hidden ? "none" : "",
                                    "border-top": "0 none"
                                }).insertBefore($th);
                                $tr.append(th);
                            }
                        } else {
                            $tr.append(th);
                            skip--;
                        }
                    }
                }
                $theadInTable = $(ts).children("thead");
                $theadInTable.prepend($firstHeaderRow);
                $tr.insertAfter($trLastWithLabels);
                $htable.prepend($theadInTable);
                if (o.useColSpanStyle) {
                    $htable.find("span.ui-jqgrid-resize").each(function() {
                        var $parent = $(this).parent();
                        if ($parent.is(":visible")) {
                            this.style.cssText = "height:" + $parent.height() + "px !important;cursor:col-resize;";
                        }
                    });
                    $htable.find(".ui-th-column>div").each(function() {
                        var $ts = $(this), $parent = $ts.parent();
                        if ($parent.is(":visible") && $parent.is(":has(span.ui-jqgrid-resize)") && !($ts.hasClass("ui-jqgrid-rotate") || $ts.hasClass("ui-jqgrid-rotateOldIE"))) {
                            $ts.css("top", ($parent.height() - $ts.outerHeight(true)) / 2 + "px");
                        }
                    });
                }
                $(ts).triggerHandler("jqGridAfterSetGroupHeaders");
            });
        },
        "getNumberOfFrozenColumns": function() {
            var $t = this;
            if ($t.length === 0) {
                return 0;
            }
            $t = $t[0];
            var colModel = $t.p.colModel, len = colModel.length, maxfrozen = -1, i;
            for (i = 0; i < len; i++) {
                if (colModel[i].frozen !== true) {
                    break;
                }
                maxfrozen = i;
            }
            return maxfrozen + 1;
        },
        "setFrozenColumns": function() {
            return this.each(function() {
                var $t = this, $self = $($t), p = $t.p, grid = $t.grid;
                if (!grid || p == null || p.frozenColumns === true) {
                    return;
                }
                var cm = p.colModel, i, len = cm.length, maxfrozen = -1, frozen = false, frozenIds = [], $colHeaderRow, tid = jqID(p.id), hoverClasses = getGuiStyles.call($t, "states.hover"), disabledClass = getGuiStyles.call($t, "states.disabled");
                if (p.subGrid === true || p.treeGrid === true || p.scroll) {
                    return;
                }
                for (i = 0; i < len; i++) {
                    if (cm[i].frozen !== true) {
                        break;
                    }
                    frozen = true;
                    maxfrozen = i;
                    frozenIds.push("#jqgh_" + tid + "_" + jqID(cm[i].name));
                }
                if (p.sortable) {
                    $colHeaderRow = $(grid.hDiv).find(".ui-jqgrid-htable .ui-jqgrid-labels");
                    $colHeaderRow.sortable("destroy");
                    $self.jqGrid("setGridParam", {
                        "sortable": {
                            "options": {
                                "items": frozenIds.length > 0 ? ">th:not(:has(" + frozenIds.join(",") + "),:hidden)" : ">th:not(:hidden)"
                            }
                        }
                    });
                    $self.jqGrid("sortableColumns", $colHeaderRow);
                }
                if (maxfrozen >= 0 && frozen) {
                    var top = p.caption ? $(grid.cDiv).outerHeight() : 0, hth = $(".ui-jqgrid-htable", p.gView).height();
                    if (p.toppager) {
                        top = top + $(grid.topDiv).outerHeight();
                    }
                    if (p.toolbar[0] === true) {
                        if (p.toolbar[1] !== "bottom") {
                            top = top + $(grid.uDiv).outerHeight();
                        }
                    }
                    grid.fhDiv = $("<div style='position:absolute;overflow:hidden;" + (p.direction === "rtl" ? "right:0;border-top-left-radius:0;" : "left:0;border-top-right-radius:0;") + "top:" + top + "px;height:" + hth + "px;' class='" + getGuiStyles.call($t, "hDiv", "frozen-div ui-jqgrid-hdiv") + "'></div>");
                    grid.fbDiv = $("<div style='position:absolute;overflow:hidden;" + (p.direction === "rtl" ? "right:0;" : "left:0;") + "top:" + (parseInt(top, 10) + parseInt(hth, 10) + 1) + "px;overflow:hidden;' class='frozen-bdiv ui-jqgrid-bdiv'></div>");
                    $(p.gView).append(grid.fhDiv);
                    var htbl = $(".ui-jqgrid-htable", p.gView).clone(true), tHeadRows = htbl[0].tHead.rows;
                    if (p.groupHeader) {
                        $(tHeadRows[0].cells).filter(":gt(" + maxfrozen + ")").remove();
                        $(tHeadRows).filter(".jqg-third-row-header").each(function() {
                            $(this).children("th[id]").each(function() {
                                var id = $(this).attr("id"), colName;
                                if (id && id.substr(0, $t.id.length + 1) === $t.id + "_") {
                                    colName = id.substr($t.id.length + 1);
                                    if (p.iColByName[colName] > maxfrozen) {
                                        $(this).remove();
                                    }
                                }
                            });
                        });
                        var swapfroz = -1, fdel = -1, cs, rs;
                        $(tHeadRows).filter(".jqg-second-row-header").children("th").each(function() {
                            cs = parseInt($(this).attr("colspan") || 1, 10);
                            rs = parseInt($(this).attr("rowspan") || 1, 10);
                            if (rs > 1) {
                                swapfroz++;
                                fdel++;
                            } else if (cs) {
                                swapfroz = swapfroz + cs;
                                fdel++;
                            }
                            if (swapfroz === maxfrozen) {
                                return false;
                            }
                        });
                        if (swapfroz !== maxfrozen) {
                            fdel = maxfrozen;
                        }
                        $(tHeadRows).filter(".jqg-second-row-header,.ui-search-toolbar").each(function() {
                            $(this).children(":gt(" + fdel + ")").remove();
                        });
                    } else {
                        $(tHeadRows).each(function() {
                            $(this).children(":gt(" + maxfrozen + ")").remove();
                        });
                    }
                    $(htbl).width(1);
                    $(grid.fhDiv).append(htbl).mousemove(function(e) {
                        if (grid.resizing) {
                            grid.dragMove(e);
                            return false;
                        }
                    }).scroll(function() {
                        this.scrollLeft = 0;
                    });
                    if (p.footerrow) {
                        var hbd = $(".ui-jqgrid-bdiv", p.gView).height();
                        grid.fsDiv = $("<div style='position:absolute;" + (p.direction === "rtl" ? "right:0;" : "left:0;") + "top:" + (parseInt(top, 10) + parseInt(hth, 10) + parseInt(hbd, 10) + 1) + "px;' class='frozen-sdiv ui-jqgrid-sdiv'></div>");
                        $(p.gView).append(grid.fsDiv);
                        var ftbl = $(".ui-jqgrid-ftable", p.gView).clone(true);
                        $("tr", ftbl).each(function() {
                            $("td:gt(" + maxfrozen + ")", this).remove();
                        });
                        $(ftbl).width(1);
                        $(grid.fsDiv).append(ftbl);
                    }
                    $self.bind("jqGridSortCol.setFrozenColumns", function(e, index, idxcol) {
                        var previousSelectedTh = $("tr.ui-jqgrid-labels:last th:eq(" + p.lastsort + ")", grid.fhDiv), newSelectedTh = $("tr.ui-jqgrid-labels:last th:eq(" + idxcol + ")", grid.fhDiv);
                        $("span.ui-grid-ico-sort", previousSelectedTh).addClass(disabledClass);
                        $(previousSelectedTh).attr("aria-selected", "false");
                        $("span.ui-icon-" + p.sortorder, newSelectedTh).removeClass(disabledClass);
                        $(newSelectedTh).attr("aria-selected", "true");
                        if (!p.viewsortcols[0]) {
                            if (p.lastsort !== idxcol) {
                                $("span.s-ico", previousSelectedTh).hide();
                                $("span.s-ico", newSelectedTh).show();
                            }
                        }
                    });
                    $(p.gView).append(grid.fbDiv);
                    $(grid.bDiv).scroll(function() {
                        $(grid.fbDiv).scrollTop($(this).scrollTop());
                    });
                    if (p.hoverrows === true) {
                        $(p.idSel).unbind("mouseover").unbind("mouseout");
                    }
                    var safeHeightSet = function($elem, newHeight) {
                        var height = $elem.height();
                        if (Math.abs(height - newHeight) >= 1 && newHeight > 0) {
                            $elem.height(newHeight);
                            height = $elem.height();
                            if (Math.abs(newHeight - height) >= 1) {
                                $elem.height(newHeight + Math.round(newHeight - height));
                            }
                        }
                    }, safeWidthSet = function($elem, newWidth) {
                        var width = $elem.width();
                        if (Math.abs(width - newWidth) >= 1) {
                            $elem.width(newWidth);
                            width = $elem.width();
                            if (Math.abs(newWidth - width) >= 1) {
                                $elem.width(newWidth + Math.round(newWidth - width));
                            }
                        }
                    }, fixDiv = function($hDiv, hDivBase, iRowStart, iRowEnd) {
                        var iRow, n, $frozenRows, $rows, $row, $frozenRow, posFrozenTop, height, newHeightFrozen, td, posTop = $(hDivBase).position().top, frozenTableTop, tableTop, cells;
                        if ($hDiv != null && $hDiv.length > 0) {
                            $hDiv[0].scrollTop = hDivBase.scrollTop;
                            $hDiv.css(p.direction === "rtl" ? {
                                "top": posTop,
                                "right": 0
                            } : {
                                "top": posTop,
                                "left": 0
                            });
                            $frozenRows = $hDiv.children("table").children("thead").children("tr");
                            $rows = $(hDivBase).children("div").children("table").children("thead").children("tr");
                            if ($rows.length === 0) {
                                $frozenRows = $($hDiv.children("table")[0].rows);
                                $rows = $($(hDivBase).children("div").children("table")[0].rows);
                            }
                            n = Math.min($frozenRows.length, $rows.length);
                            frozenTableTop = n > 0 ? $($frozenRows[0]).position().top : 0;
                            tableTop = n > 0 ? $($rows[0]).position().top : 0;
                            if (iRowStart >= 0) {
                                if (iRowEnd >= 0) {
                                    n = Math.min(iRowEnd + 1, n);
                                }
                                for (iRow = iRowStart; iRow < n; iRow++) {
                                    $row = $($rows[iRow]);
                                    if ($row.css("display") !== "none" && $row.is(":visible")) {
                                        posTop = $row.position().top;
                                        $frozenRow = $($frozenRows[iRow]);
                                        posFrozenTop = $frozenRow.position().top;
                                        height = $row.height();
                                        if (p.groupHeader != null && p.groupHeader.useColSpanStyle) {
                                            cells = $row[0].cells;
                                            for (i = 0; i < cells.length; i++) {
                                                td = cells[i];
                                                if (td != null && td.nodeName.toUpperCase() === "TH") {
                                                    height = Math.max(height, $(td).height());
                                                }
                                            }
                                        }
                                        newHeightFrozen = height + (posTop - tableTop) + (frozenTableTop - posFrozenTop);
                                        safeHeightSet($frozenRow, newHeightFrozen);
                                    }
                                }
                            }
                            safeHeightSet($hDiv, hDivBase.clientHeight);
                        }
                    }, resizeAll = {
                        "resizeDiv": true,
                        "resizedRows": {
                            "iRowStart": 0,
                            "iRowEnd": -1
                        }
                    }, fullResize = {
                        "header": resizeAll,
                        "resizeFooter": true,
                        "body": resizeAll
                    };
                    $self.bind("jqGridAfterGridComplete.setFrozenColumns", function() {
                        $(p.idSel + "_frozen").remove();
                        $(grid.fbDiv).height(grid.hDiv.clientHeight);
                        var $frozenBTable = $(this).clone(true), frozenRows = $frozenBTable[0].rows, rows = $self[0].rows;
                        $(frozenRows).filter("tr[role=row]").each(function() {
                            $(this.cells).filter("td[role=gridcell]:gt(" + maxfrozen + ")").remove();
                        });
                        grid.fbRows = frozenRows;
                        $frozenBTable.width(1).attr("id", p.id + "_frozen");
                        $frozenBTable.appendTo(grid.fbDiv);
                        if (p.hoverrows === true) {
                            var hoverRows = function(tr, method, additionalRows) {
                                $(tr)[method](hoverClasses);
                                $(additionalRows[tr.rowIndex])[method](hoverClasses);
                            };
                            $(frozenRows).filter(".jqgrow").hover(function() {
                                hoverRows(this, "addClass", rows);
                            }, function() {
                                hoverRows(this, "removeClass", rows);
                            });
                            $(rows).filter(".jqgrow").hover(function() {
                                hoverRows(this, "addClass", frozenRows);
                            }, function() {
                                hoverRows(this, "removeClass", frozenRows);
                            });
                        }
                        fixDiv(grid.fhDiv, grid.hDiv, 0, -1);
                        fixDiv(grid.fbDiv, grid.bDiv, 0, -1);
                        if (grid.sDiv) {
                            fixDiv(grid.fsDiv, grid.sDiv, 0, -1);
                        }
                    });
                    var myResize = function(resizeOptions) {
                        $(grid.fbDiv).scrollTop($(grid.bDiv).scrollTop());
                        if (resizeOptions.header.resizeDiv) {
                            fixDiv(grid.fhDiv, grid.hDiv, resizeOptions.header.iRowStart, resizeOptions.header.iRowEnd);
                        }
                        if (resizeOptions.body.resizeDiv) {
                            fixDiv(grid.fbDiv, grid.bDiv, resizeOptions.body.iRowStart, resizeOptions.body.iRowEnd);
                        }
                        if (resizeOptions.resizeFooter && grid.sDiv && resizeOptions.resizeFooter) {
                            fixDiv(grid.fsDiv, grid.sDiv, 0, -1);
                        }
                        var frozenWidth = grid.fhDiv[0].clientWidth;
                        if (resizeOptions.header.resizeDiv && grid.fhDiv != null && grid.fhDiv.length >= 1) {
                            safeHeightSet($(grid.fhDiv), grid.hDiv.clientHeight);
                        }
                        if (resizeOptions.body.resizeDiv && grid.fbDiv != null && grid.fbDiv.length > 0) {
                            safeWidthSet($(grid.fbDiv), frozenWidth);
                        }
                        if (resizeOptions.resizeFooter && grid.fsDiv != null && grid.fsDiv.length >= 0) {
                            safeWidthSet($(grid.fsDiv), frozenWidth);
                        }
                    };
                    $(p.gBox).bind("resizestop.setFrozenColumns", function() {
                        setTimeout(function() {
                            myResize(fullResize);
                        }, 50);
                    });
                    $self.bind("jqGridInlineEditRow.setFrozenColumns jqGridInlineAfterRestoreRow.setFrozenColumns jqGridInlineAfterSaveRow.setFrozenColumns jqGridAfterEditCell.setFrozenColumns jqGridAfterRestoreCell.setFrozenColumns jqGridAfterSaveCell.setFrozenColumns jqGridResizeStop.setFrozenColumns", function(e, rowid) {
                        var iRow = $self.jqGrid("getInd", rowid);
                        myResize({
                            "header": {
                                "resizeDiv": false,
                                "resizedRows": {
                                    "iRowStart": -1,
                                    "iRowEnd": -1
                                }
                            },
                            "resizeFooter": true,
                            "body": {
                                "resizeDiv": true,
                                "resizedRows": {
                                    "iRowStart": iRow,
                                    "iRowEnd": iRow
                                }
                            }
                        });
                    });
                    $self.bind("jqGridResizeStop.setFrozenColumns", function() {
                        myResize(fullResize);
                    });
                    $self.bind("jqGridResetFrozenHeights.setFrozenColumns", function(e, o) {
                        myResize(o || fullResize);
                    });
                    if (!grid.hDiv.loading) {
                        $self.triggerHandler("jqGridAfterGridComplete");
                    }
                    p.frozenColumns = true;
                }
            });
        },
        "destroyFrozenColumns": function() {
            return this.each(function() {
                var $t = this, $self = $($t), grid = $t.grid, p = $t.p, tid = jqID(p.id);
                if (!grid) {
                    return;
                }
                if (p.frozenColumns === true) {
                    $(grid.fhDiv).remove();
                    $(grid.fbDiv).remove();
                    grid.fhDiv = null;
                    grid.fbDiv = null;
                    grid.fbRows = null;
                    if (p.footerrow) {
                        $(grid.fsDiv).remove();
                        grid.fsDiv = null;
                    }
                    $self.unbind(".setFrozenColumns");
                    if (p.hoverrows === true) {
                        var ptr, hoverClasses = getGuiStyles.call($t, "states.hover");
                        $self.bind("mouseover", function(e) {
                            ptr = $(e.target).closest("tr.jqgrow");
                            if ($(ptr).attr("class") !== "ui-subgrid") {
                                $(ptr).addClass(hoverClasses);
                            }
                        }).bind("mouseout", function(e) {
                            ptr = $(e.target).closest("tr.jqgrow");
                            $(ptr).removeClass(hoverClasses);
                        });
                    }
                    p.frozenColumns = false;
                    if (p.sortable) {
                        var $colHeaderRow = $(grid.hDiv).find(".ui-jqgrid-htable .ui-jqgrid-labels");
                        $colHeaderRow.sortable("destroy");
                        $self.jqGrid("setGridParam", {
                            "sortable": {
                                "options": {
                                    "items": ">th:not(:has(#jqgh_" + tid + "_cb" + ",#jqgh_" + tid + "_rn" + ",#jqgh_" + tid + "_subgrid),:hidden)"
                                }
                            }
                        });
                        $self.jqGrid("sortableColumns", $colHeaderRow);
                    }
                }
            });
        }
    });
});

(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./grid.base", "./jqdnr", "./jqmodal" ], factory);
    } else if (typeof exports === "object") {
        factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    "use strict";
    var jgrid = $.jgrid, base = $.fn.jqGrid;
    var getGuiStyles = base.getGuiStyles, getGridRes = base.getGridRes;
    jgrid.jqModal = jgrid.jqModal || {};
    $.extend(true, jgrid.jqModal, {
        "toTop": true
    });
    $.extend(jgrid, {
        "showModal": function(h) {
            h.w.show();
        },
        "closeModal": function(h) {
            h.w.hide().attr("aria-hidden", "true");
            if (h.o) {
                h.o.remove();
            }
        },
        "hideModal": function(selector, o) {
            o = $.extend({
                "jqm": true,
                "gb": "",
                "removemodal": false
            }, o || {});
            var thisgrid = o.gb && typeof o.gb === "string" && o.gb.substr(0, 6) === "#gbox_" ? $("#" + o.gb.substr(6))[0] : false, $selector = $(selector);
            if (o.onClose) {
                var oncret = thisgrid ? o.onClose.call(thisgrid, selector) : o.onClose(selector);
                if (typeof oncret === "boolean" && !oncret) {
                    return;
                }
            }
            if ($.fn.jqm && o.jqm === true) {
                $selector.attr("aria-hidden", "true").jqmHide();
            } else {
                if (o.gb !== "") {
                    try {
                        $(">.jqgrid-overlay", o.gb).first().hide();
                    } catch (ignore) {}
                }
                $selector.hide().attr("aria-hidden", "true");
            }
            if (o.removemodal) {
                $selector.remove();
            }
        },
        "findPos": function(obj) {
            var curleft = 0, curtop = 0;
            if (obj.offsetParent) {
                do {
                    curleft += obj.offsetLeft;
                    curtop += obj.offsetTop;
                    obj = obj.offsetParent;
                } while (obj);
            }
            return [ curleft, curtop ];
        },
        "createModal": function(aIDs, content, o, insertSelector, posSelector, appendsel, css) {
            var jqID = jgrid.jqID, p = this.p, gridjqModal = p != null ? p.jqModal || {} : {};
            o = $.extend(true, {
                "resizingRightBottomIcon": base.getIconRes.call(this, "form.resizableLtr")
            }, jgrid.jqModal || {}, gridjqModal, o);
            var mw = document.createElement("div"), themodalSelector = "#" + jqID(aIDs.themodal), rtlsup = $(o.gbox).attr("dir") === "rtl" ? true : false, resizeAlso = aIDs.resizeAlso ? "#" + jqID(aIDs.resizeAlso) : false;
            css = $.extend({}, css || {});
            mw.className = getGuiStyles.call(this, "dialog.window", "ui-jqdialog");
            mw.id = aIDs.themodal;
            mw.dir = rtlsup ? "rtl" : "ltr";
            var mdoc = document.createElement("div");
            mdoc.className = getGuiStyles.call(this, "dialog.document");
            $(mdoc).attr("role", "document");
            var msubdoc = document.createElement("div");
            msubdoc.className = getGuiStyles.call(this, "dialog.subdocument");
            mdoc.appendChild(msubdoc);
            mw.appendChild(mdoc);
            var mh = document.createElement("div");
            mh.className = getGuiStyles.call(this, "dialog.header", "ui-jqdialog-titlebar " + (rtlsup ? "ui-jqdialog-titlebar-rtl" : "ui-jqdialog-titlebar-ltr"));
            mh.id = aIDs.modalhead;
            $(mh).append("<span class='ui-jqdialog-title'>" + o.caption + "</span>");
            var hoverClasses = getGuiStyles.call(this, "states.hover"), ahr = $("<a aria-label='Close' class='" + getGuiStyles.call(this, "dialog.closeButton", "ui-jqdialog-titlebar-close") + "'></a>").hover(function() {
                ahr.addClass(hoverClasses);
            }, function() {
                ahr.removeClass(hoverClasses);
            }).append("<span class='" + base.getIconRes.call(this, "form.close") + "'></span>");
            $(mh).append(ahr);
            var mc = document.createElement("div");
            $(mc).addClass(getGuiStyles.call(this, "dialog.content", "ui-jqdialog-content")).attr("id", aIDs.modalcontent);
            $(mc).append(content);
            msubdoc.appendChild(mc);
            $(msubdoc).prepend(mh);
            if (appendsel === true) {
                $("body").append(mw);
            } else if (typeof appendsel === "string") {
                $(appendsel).append(mw);
            } else {
                $(mw).insertBefore(insertSelector);
            }
            $(mw).css(css);
            if (o.jqModal === undefined) {
                o.jqModal = true;
            }
            var coord = {};
            if ($.fn.jqm && o.jqModal === true) {
                if (o.left === 0 && o.top === 0 && o.overlay) {
                    var pos = [];
                    pos = jgrid.findPos(posSelector);
                    o.left = pos[0] + 4;
                    o.top = pos[1] + 4;
                }
                coord.top = o.top + "px";
                coord.left = o.left;
            } else if (o.left !== 0 || o.top !== 0) {
                coord.left = o.left;
                coord.top = o.top + "px";
            }
            $("a.ui-jqdialog-titlebar-close", mh).click(function() {
                var oncm = $(themodalSelector).data("onClose") || o.onClose;
                var gboxclose = $(themodalSelector).data("gbox") || o.gbox;
                jgrid.hideModal(themodalSelector, {
                    "gb": gboxclose,
                    "jqm": o.jqModal,
                    "onClose": oncm,
                    "removemodal": o.removemodal || false
                });
                return false;
            });
            if (o.width === 0 || !o.width) {
                o.width = 300;
            }
            if (o.height === 0 || !o.height) {
                o.height = 200;
            }
            if (!o.zIndex) {
                var parentZ = $(insertSelector).parents("*[role=dialog]").first().css("z-index");
                if (parentZ) {
                    o.zIndex = parseInt(parentZ, 10) + 2;
                    o.toTop = true;
                } else {
                    o.zIndex = 950;
                }
            }
            if (coord.left) {
                coord.left += "px";
            }
            $(mw).css($.extend({
                "width": isNaN(o.width) ? "auto" : o.width + "px",
                "height": isNaN(o.height) ? "auto" : o.height + "px",
                "zIndex": o.zIndex
            }, coord)).attr({
                "tabIndex": "-1",
                "role": "dialog",
                "aria-labelledby": aIDs.modalhead,
                "aria-hidden": "true"
            });
            if (o.drag === undefined) {
                o.drag = true;
            }
            if (o.resize === undefined) {
                o.resize = true;
            }
            if (o.drag) {
                if ($.fn.jqDrag) {
                    $(mh).css("cursor", "move");
                    $(mw).jqDrag(mh);
                } else {
                    try {
                        $(mw).draggable({
                            "handle": $("#" + jqID(mh.id))
                        });
                    } catch (ignore) {}
                }
            }
            if (o.resize) {
                if ($.fn.jqResize) {
                    $(mc).append("<div class='jqResize ui-resizable-handle ui-resizable-se " + o.resizingRightBottomIcon + "'></div>");
                    $(themodalSelector).jqResize(".jqResize", resizeAlso);
                } else {
                    try {
                        $(mw).resizable({
                            "handles": "se, sw",
                            "alsoResize": resizeAlso
                        });
                    } catch (ignore) {}
                }
            }
            if (o.closeOnEscape === true) {
                $(mw).keydown(function(e) {
                    if (e.which === 27) {
                        var cone = $(themodalSelector).data("onClose") || o.onClose;
                        jgrid.hideModal(themodalSelector, {
                            "gb": o.gbox,
                            "jqm": o.jqModal,
                            "onClose": cone,
                            "removemodal": o.removemodal || false,
                            "formprop": !o.recreateForm || false,
                            "form": o.form || ""
                        });
                    }
                });
            }
        },
        "viewModal": function(selector, o) {
            o = $.extend(true, {
                "overlay": 30,
                "modal": false,
                "overlayClass": getGuiStyles.call(this, "overlay"),
                "onShow": jgrid.showModal,
                "onHide": jgrid.closeModal,
                "gbox": "",
                "jqm": true,
                "jqM": true
            }, jgrid.jqModal || {}, o || {});
            if ($.fn.jqm && o.jqm === true) {
                if (o.jqM) {
                    $(selector).attr("aria-hidden", "false").jqm(o).jqmShow();
                } else {
                    $(selector).attr("aria-hidden", "false").jqmShow();
                }
            } else {
                if (o.gbox !== "") {
                    $(">.jqgrid-overlay", o.gbox).first().show();
                    $(selector).data("gbox", o.gbox);
                }
                $(selector).show().attr("aria-hidden", "false");
                try {
                    $(":input:visible", selector)[0].focus();
                } catch (ignore) {}
            }
        },
        "info_dialog": function(caption, content, closeButtonText, modalopt) {
            var $t = this, p = $t.p, gridjqModal = p != null ? p.jqModal || {} : {}, mopt = $.extend(true, {
                "width": 290,
                "height": "auto",
                "dataheight": "auto",
                "drag": true,
                "resize": false,
                "left": 250,
                "top": 170,
                "zIndex": 1e3,
                "jqModal": true,
                "modal": false,
                "closeOnEscape": true,
                "align": "center",
                "buttonalign": "center",
                "buttons": []
            }, jgrid.jqModal || {}, gridjqModal, {
                "caption": "<b>" + caption + "</b>"
            }, modalopt || {}), jm = mopt.jqModal;
            if ($.fn.jqm && !jm) {
                jm = false;
            }
            var buttstr = "", i, hoverClasses = getGuiStyles.call($t, "states.hover");
            if (mopt.buttons.length > 0) {
                for (i = 0; i < mopt.buttons.length; i++) {
                    if (mopt.buttons[i].id === undefined) {
                        mopt.buttons[i].id = "info_button_" + i;
                    }
                    buttstr += jgrid.builderFmButon.call($t, mopt.buttons[i].id, mopt.buttons[i].text);
                }
            }
            var dh = isNaN(mopt.dataheight) ? mopt.dataheight : mopt.dataheight + "px", cn = "text-align:" + mopt.align + ";", cnt = "<div id='info_id'>";
            cnt += "<div id='infocnt' style='margin:0px;padding-bottom:1em;width:100%;overflow:auto;position:relative;height:" + dh + ";" + cn + "'>" + content + "</div>";
            if (closeButtonText || buttstr !== "") {
                cnt += "<hr class='" + getGuiStyles.call($t, "dialog.hr") + "' style='margin:1px'/><div style='text-align:" + mopt.buttonalign + ";padding:.8em 0 .5em 0;background-image:none;border-width: 1px 0 0 0;'>" + (closeButtonText ? jgrid.builderFmButon.call($t, "closedialog", closeButtonText) : "") + buttstr + "</div>";
            }
            cnt += "</div>";
            try {
                if ($("#info_dialog").attr("aria-hidden") === "false") {
                    jgrid.hideModal("#info_dialog", {
                        "jqm": jm
                    });
                }
                $("#info_dialog").remove();
            } catch (ignore) {}
            jgrid.createModal.call($t, {
                "themodal": "info_dialog",
                "modalhead": "info_head",
                "modalcontent": "info_content",
                "resizeAlso": "infocnt"
            }, cnt, mopt, "", "", true);
            if (buttstr) {
                $.each(mopt.buttons, function(j) {
                    $("#" + jgrid.jqID($t.id), "#info_id").bind("click", function() {
                        mopt.buttons[j].onClick.call($("#info_dialog"));
                        return false;
                    });
                });
            }
            $("#closedialog", "#info_id").click(function() {
                jgrid.hideModal("#info_dialog", {
                    "jqm": jm,
                    "onClose": $("#info_dialog").data("onClose") || mopt.onClose,
                    "gb": $("#info_dialog").data("gbox") || mopt.gbox
                });
                return false;
            });
            $(".fm-button", "#info_dialog").hover(function() {
                $(this).addClass(hoverClasses);
            }, function() {
                $(this).removeClass(hoverClasses);
            });
            if ($.isFunction(mopt.beforeOpen)) {
                mopt.beforeOpen();
            }
            jgrid.viewModal.call($t, "#info_dialog", {
                "onHide": function(h) {
                    h.w.hide().remove();
                    if (h.o) {
                        h.o.remove();
                    }
                },
                "modal": mopt.modal,
                "jqm": jm
            });
            if ($.isFunction(mopt.afterOpen)) {
                mopt.afterOpen();
            }
            try {
                $("#info_dialog").focus();
            } catch (ignore) {}
        },
        "bindEv": function(el, opt) {
            var $t = this;
            if ($.isFunction(opt.dataInit)) {
                opt.dataInit.call($t, el, opt);
            }
            if (opt.dataEvents) {
                $.each(opt.dataEvents, function() {
                    if (this.data !== undefined) {
                        $(el).bind(this.type, this.data, this.fn);
                    } else {
                        $(el).bind(this.type, this.fn);
                    }
                });
            }
        },
        "createEl": function(eltype, options, vl, autowidth, ajaxso) {
            var elem = "", $t = this, p = $t.p, infoDialog = jgrid.info_dialog, getRes = function(path) {
                return getGridRes.call($($t), path);
            }, errcap = getRes("errors.errcap"), edit = getRes("edit"), editMsg = edit.msg, bClose = edit.bClose;
            function setAttributes(elm, atr, exl) {
                var exclude = [ "dataInit", "dataEvents", "dataUrl", "buildSelect", "sopt", "searchhidden", "defaultValue", "attr", "custom_element", "custom_value", "selectFilled", "rowId", "mode" ];
                if (exl !== undefined && $.isArray(exl)) {
                    $.merge(exclude, exl);
                }
                $.each(atr, function(attrName, value) {
                    if ($.inArray(attrName, exclude) === -1) {
                        $(elm).attr(attrName, value);
                    }
                });
                if (!atr.hasOwnProperty("id")) {
                    $(elm).attr("id", jgrid.randId());
                }
            }
            if (options == null) {
                return "";
            }
            switch (eltype) {
              case "textarea":
                elem = document.createElement("textarea");
                if (autowidth) {
                    if (!options.cols) {
                        $(elem).css({
                            "width": "100%",
                            "box-sizing": "border-box"
                        });
                    }
                } else if (!options.cols) {
                    options.cols = 19;
                }
                if (!options.rows) {
                    options.rows = 2;
                }
                if (vl === "&nbsp;" || vl === "&#160;" || vl.length === 1 && vl.charCodeAt(0) === 160) {
                    vl = "";
                }
                elem.value = vl;
                setAttributes(elem, options);
                $(elem).attr({
                    "role": "textbox"
                });
                break;

              case "checkbox":
                elem = document.createElement("input");
                elem.type = "checkbox";
                if (!options.value) {
                    var vl1 = String(vl).toLowerCase();
                    if (vl1.search(/(false|f|0|no|n|off|undefined)/i) < 0 && vl1 !== "") {
                        elem.checked = true;
                        elem.defaultChecked = true;
                        elem.value = vl;
                    } else {
                        elem.value = "on";
                    }
                    $(elem).data("offval", "off");
                } else {
                    var cbval = options.value.split(":");
                    if (vl === cbval[0]) {
                        elem.checked = true;
                        elem.defaultChecked = true;
                    }
                    elem.value = cbval[0];
                    $(elem).data("offval", cbval[1]);
                }
                setAttributes(elem, options, [ "value" ]);
                $(elem).attr({
                    "role": "checkbox",
                    "aria-checked": elem.checked ? "true" : "false"
                });
                break;

              case "select":
                elem = document.createElement("select");
                var msl, ovm = [], isSelected;
                if (options.multiple === true) {
                    msl = true;
                    elem.multiple = "multiple";
                    $(elem).attr("aria-multiselectable", "true");
                    ovm = vl.split(",");
                    ovm = $.map(ovm, function(n) {
                        return $.trim(n);
                    });
                } else {
                    msl = false;
                    ovm[0] = $.trim(vl);
                }
                if (options.size === undefined) {
                    options.size = msl ? 3 : 1;
                }
                if (options.dataUrl !== undefined) {
                    var rowid = null, postData = options.postData || ajaxso.postData, ajaxContext = {
                        "elem": elem,
                        "options": options,
                        "cm": options.cm,
                        "iCol": options.iCol,
                        "ovm": ovm
                    };
                    try {
                        rowid = options.rowId;
                    } catch (ignore) {}
                    if (p && p.idPrefix) {
                        rowid = jgrid.stripPref(p.idPrefix, rowid);
                    }
                    $.ajax($.extend({
                        "url": $.isFunction(options.dataUrl) ? options.dataUrl.call($t, rowid, vl, String(options.name), ajaxContext) : options.dataUrl,
                        "type": "GET",
                        "dataType": "html",
                        "data": $.isFunction(postData) ? postData.call($t, rowid, vl, String(options.name)) : postData,
                        "context": ajaxContext,
                        "success": function(data, textStatus, jqXHR) {
                            var ovm1 = this.ovm, elem1 = this.elem, cm1 = this.cm, iCol1 = this.iCol, options1 = $.extend({}, this.options), a = $.isFunction(options1.buildSelect) ? options1.buildSelect.call($t, data, jqXHR, cm1, iCol1) : data;
                            if (typeof a === "string") {
                                a = $($.trim(a)).html();
                            }
                            if (a) {
                                $(elem1).append(a);
                                setAttributes(elem1, options1, postData ? [ "postData" ] : undefined);
                                setTimeout(function() {
                                    var isSelected1;
                                    $("option", elem1).each(function(iOpt) {
                                        if (iOpt === 0 && elem1.multiple) {
                                            this.selected = false;
                                        }
                                        if ($.inArray($.trim($(this).val()), ovm1) > -1) {
                                            this.selected = "selected";
                                            isSelected1 = true;
                                        }
                                    });
                                    if (!isSelected1) {
                                        $("option", elem1).each(function() {
                                            if ($.inArray($.trim($(this).text()), ovm1) > -1) {
                                                this.selected = "selected";
                                            }
                                        });
                                    }
                                    $(elem1).change();
                                    jgrid.fullBoolFeedback.call($t, options1.selectFilled, "jqGridSelectFilled", {
                                        "elem": elem1,
                                        "options": options1,
                                        "cm": cm1,
                                        "cmName": cm1 != null ? cm1.name : options1.name,
                                        "iCol": iCol1
                                    });
                                }, 0);
                            }
                        }
                    }, ajaxso || {}));
                } else if (options.value) {
                    if (typeof options.value === "function") {
                        options.value = options.value();
                    }
                    var i, so, sv, ov, optionInfos = [], optionInfo, sep = options.separator === undefined ? ":" : options.separator, delim = options.delimiter === undefined ? ";" : options.delimiter, mapFunc = function(n, ii) {
                        if (ii > 0) {
                            return n;
                        }
                    };
                    if (typeof options.value === "string") {
                        so = options.value.split(delim);
                        for (i = 0; i < so.length; i++) {
                            sv = so[i].split(sep);
                            if (sv.length > 2) {
                                sv[1] = $.map(sv, mapFunc).join(sep);
                            }
                            optionInfos.push({
                                "value": sv[0],
                                "innerHtml": sv[1],
                                "selectValue": $.trim(sv[0]),
                                "selectText": $.trim(sv[1])
                            });
                        }
                    } else if (typeof options.value === "object") {
                        var oSv = options.value, key;
                        for (key in oSv) {
                            if (oSv.hasOwnProperty(key)) {
                                optionInfos.push({
                                    "value": key,
                                    "innerHtml": oSv[key],
                                    "selectValue": $.trim(key),
                                    "selectText": $.trim(oSv[key])
                                });
                            }
                        }
                    }
                    for (i = 0; i < optionInfos.length; i++) {
                        optionInfo = optionInfos[i];
                        ov = document.createElement("option");
                        ov.value = optionInfo.value;
                        ov.innerHTML = optionInfo.innerHtml;
                        elem.appendChild(ov);
                        if (!msl && optionInfo.selectValue === $.trim(vl)) {
                            ov.selected = "selected";
                            isSelected = true;
                        }
                        if (msl && $.inArray(optionInfo.selectValue, ovm) > -1) {
                            ov.selected = "selected";
                            isSelected = true;
                        }
                    }
                    if (!isSelected) {
                        for (i = 0; i < optionInfos.length; i++) {
                            optionInfo = optionInfos[i];
                            if (!msl && optionInfo.selectText === $.trim(vl)) {
                                ov.selected = "selected";
                            }
                            if (msl && $.inArray(optionInfo.selectText, ovm) > -1) {
                                ov.selected = "selected";
                            }
                        }
                    }
                    setAttributes(elem, options, [ "value" ]);
                    jgrid.fullBoolFeedback.call($t, options.selectFilled, "jqGridSelectFilled", {
                        "elem": elem,
                        "options": options,
                        "cm": options.cm,
                        "cmName": options.cm != null ? options.cm.name : options.name,
                        "iCol": options.iCol
                    });
                }
                break;

              case "text":
              case "password":
              case "button":
                var role;
                if (eltype === "button") {
                    role = "button";
                } else {
                    role = "textbox";
                }
                elem = document.createElement("input");
                elem.type = eltype;
                setAttributes(elem, options);
                elem.value = vl;
                if (eltype !== "button") {
                    if (autowidth) {
                        if (!options.size) {
                            $(elem).css({
                                "width": "100%",
                                "box-sizing": "border-box"
                            });
                        }
                    } else if (!options.size) {
                        options.size = 20;
                    }
                }
                $(elem).attr("role", role);
                break;

              case "image":
              case "file":
                elem = document.createElement("input");
                elem.type = eltype;
                setAttributes(elem, options);
                break;

              case "custom":
                elem = document.createElement("span");
                try {
                    if ($.isFunction(options.custom_element)) {
                        var celm = options.custom_element.call($t, vl, options);
                        if (celm instanceof jQuery || jgrid.isHTMLElement(celm) || typeof celm === "string") {
                            celm = $(celm).addClass("customelement").attr({
                                "id": options.id,
                                "name": options.name
                            });
                            $(elem).empty().append(celm);
                        } else {
                            throw "editoptions.custom_element returns value of a wrong type";
                        }
                    } else {
                        throw "editoptions.custom_element is not a function";
                    }
                } catch (e) {
                    if (e === "e1") {
                        infoDialog.call($t, errcap, "function 'custom_element' " + editMsg.nodefined, bClose);
                    }
                    if (e === "e2") {
                        infoDialog.call($t, errcap, "function 'custom_element' " + editMsg.novalue, bClose);
                    } else {
                        infoDialog.call($t, errcap, typeof e === "string" ? e : e.message, bClose);
                    }
                }
                break;
            }
            return elem;
        },
        "checkDate": function(format, date) {
            var daysInFebruary = function(year) {
                return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0) ? 29 : 28;
            }, tsp = {}, sep;
            format = format.toLowerCase();
            if (format.indexOf("/") !== -1) {
                sep = "/";
            } else if (format.indexOf("-") !== -1) {
                sep = "-";
            } else if (format.indexOf(".") !== -1) {
                sep = ".";
            } else {
                sep = "/";
            }
            format = format.split(sep);
            date = date.split(sep);
            if (date.length !== 3) {
                return false;
            }
            var j = -1, yln, dln = -1, mln = -1, i, dv;
            for (i = 0; i < format.length; i++) {
                dv = isNaN(date[i]) ? 0 : parseInt(date[i], 10);
                tsp[format[i]] = dv;
                yln = format[i];
                if (yln.indexOf("y") !== -1) {
                    j = i;
                }
                if (yln.indexOf("m") !== -1) {
                    mln = i;
                }
                if (yln.indexOf("d") !== -1) {
                    dln = i;
                }
            }
            if (format[j] === "y" || format[j] === "yyyy") {
                yln = 4;
            } else if (format[j] === "yy") {
                yln = 2;
            } else {
                yln = -1;
            }
            var strDate, daysInMonth = [ 0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
            if (j === -1) {
                return false;
            }
            strDate = tsp[format[j]].toString();
            if (yln === 2 && strDate.length === 1) {
                yln = 1;
            }
            if (strDate.length !== yln || tsp[format[j]] === 0 && date[j] !== "00") {
                return false;
            }
            if (mln === -1) {
                return false;
            }
            strDate = tsp[format[mln]].toString();
            if (strDate.length < 1 || tsp[format[mln]] < 1 || tsp[format[mln]] > 12) {
                return false;
            }
            if (dln === -1) {
                return false;
            }
            strDate = tsp[format[dln]].toString();
            if (strDate.length < 1 || tsp[format[dln]] < 1 || tsp[format[dln]] > 31 || tsp[format[mln]] === 2 && tsp[format[dln]] > daysInFebruary(tsp[format[j]]) || tsp[format[dln]] > daysInMonth[tsp[format[mln]]]) {
                return false;
            }
            return true;
        },
        "isEmpty": function(val) {
            if (val.match(/^\s+$/) || val === "") {
                return true;
            }
            return false;
        },
        "checkTime": function(time) {
            var re = /^(\d{1,2}):(\d{2})([apAP][Mm])?$/, regs;
            if (!jgrid.isEmpty(time)) {
                regs = time.match(re);
                if (regs) {
                    if (regs[3]) {
                        if (regs[1] < 1 || regs[1] > 12) {
                            return false;
                        }
                    } else {
                        if (regs[1] > 23) {
                            return false;
                        }
                    }
                    if (regs[2] > 59) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
            return true;
        },
        "checkValues": function(val, iCol, customobject, nam, options) {
            var edtrul, nm, dft, g = this, p = g.p, colModel = p.colModel, cm, isEmpty = jgrid.isEmpty, editMsg = getGridRes.call($(g), "edit.msg"), ret, dateMasks = getGridRes.call($(g), "formatter.date.masks");
            if (customobject === undefined) {
                if (typeof iCol === "string") {
                    iCol = p.iColByName[iCol];
                }
                if (iCol === undefined || iCol < 0) {
                    return [ true, "", "" ];
                }
                cm = colModel[iCol];
                edtrul = cm.editrules;
                if (cm.formoptions != null) {
                    nm = cm.formoptions.label;
                }
            } else {
                edtrul = customobject;
                nm = nam === undefined ? "_" : nam;
                cm = colModel[iCol];
            }
            if (edtrul) {
                if (!nm) {
                    nm = p.colNames != null ? p.colNames[iCol] : cm.label;
                }
                if (edtrul.required === true) {
                    if (isEmpty(val)) {
                        return [ false, nm + ": " + editMsg.required, "" ];
                    }
                }
                var rqfield = edtrul.required === false ? false : true;
                if (edtrul.number === true) {
                    if (!(rqfield === false && isEmpty(val))) {
                        if (isNaN(val)) {
                            return [ false, nm + ": " + editMsg.number, "" ];
                        }
                    }
                }
                if (edtrul.minValue !== undefined && !isNaN(edtrul.minValue)) {
                    if (parseFloat(val) < parseFloat(edtrul.minValue)) {
                        return [ false, nm + ": " + editMsg.minValue + " " + edtrul.minValue, "" ];
                    }
                }
                if (edtrul.maxValue !== undefined && !isNaN(edtrul.maxValue)) {
                    if (parseFloat(val) > parseFloat(edtrul.maxValue)) {
                        return [ false, nm + ": " + editMsg.maxValue + " " + edtrul.maxValue, "" ];
                    }
                }
                var filter;
                if (edtrul.email === true) {
                    if (!(rqfield === false && isEmpty(val))) {
                        filter = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i;
                        if (!filter.test(val)) {
                            return [ false, nm + ": " + editMsg.email, "" ];
                        }
                    }
                }
                if (edtrul.integer === true) {
                    if (!(rqfield === false && isEmpty(val))) {
                        if (isNaN(val)) {
                            return [ false, nm + ": " + editMsg.integer, "" ];
                        }
                        if (val % 1 !== 0 || val.indexOf(".") !== -1) {
                            return [ false, nm + ": " + editMsg.integer, "" ];
                        }
                    }
                }
                if (edtrul.date === true) {
                    if (!(rqfield === false && isEmpty(val))) {
                        if (cm.formatoptions && cm.formatoptions.newformat) {
                            dft = cm.formatoptions.newformat;
                            if (dateMasks.hasOwnProperty(dft)) {
                                dft = dateMasks[dft];
                            }
                        } else {
                            dft = colModel[iCol].datefmt || "Y-m-d";
                        }
                        if (!jgrid.checkDate(dft, val)) {
                            return [ false, nm + ": " + editMsg.date + " - " + dft, "" ];
                        }
                    }
                }
                if (edtrul.time === true) {
                    if (!(rqfield === false && isEmpty(val))) {
                        if (!jgrid.checkTime(val)) {
                            return [ false, nm + ": " + editMsg.date + " - hh:mm (am/pm)", "" ];
                        }
                    }
                }
                if (edtrul.url === true) {
                    if (!(rqfield === false && isEmpty(val))) {
                        filter = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i;
                        if (!filter.test(val)) {
                            return [ false, nm + ": " + editMsg.url, "" ];
                        }
                    }
                }
                if (edtrul.custom === true) {
                    if (!(rqfield === false && isEmpty(val))) {
                        if ($.isFunction(edtrul.custom_func)) {
                            ret = edtrul.custom_func.call(g, val, nm, iCol);
                            return $.isArray(ret) ? ret : [ false, editMsg.customarray, "" ];
                        }
                        return [ false, editMsg.customfcheck, "" ];
                    }
                } else if ($.isFunction(edtrul.custom)) {
                    if (!(rqfield === false && isEmpty(val))) {
                        ret = edtrul.custom.call(g, options);
                        return $.isArray(ret) ? ret : [ false, editMsg.customarray, "" ];
                    }
                }
            }
            return [ true, "", "" ];
        }
    });
});

(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./grid.base" ], factory);
    } else if (typeof exports === "object") {
        factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    "use strict";
    var jgrid = $.jgrid, base = $.fn.jqGrid;
    jgrid.extend({
        "groupingSetup": function() {
            return this.each(function() {
                var $t = this, i, j, cml, p = $t.p, colModel = p.colModel, grp = p.groupingView, cm, summary, emptyFormatter = function() {
                    return "";
                };
                if (grp !== null && (typeof grp === "object" || $.isFunction(grp))) {
                    if (!grp.groupField.length) {
                        p.grouping = false;
                    } else {
                        if (grp.visibiltyOnNextGrouping === undefined) {
                            grp.visibiltyOnNextGrouping = [];
                        }
                        grp.lastvalues = [];
                        if (!grp._locgr) {
                            grp.groups = [];
                        }
                        grp.counters = [];
                        for (i = 0; i < grp.groupField.length; i++) {
                            if (!grp.groupOrder[i]) {
                                grp.groupOrder[i] = "asc";
                            }
                            if (!grp.groupText[i]) {
                                grp.groupText[i] = "{0}";
                            }
                            if (typeof grp.groupColumnShow[i] !== "boolean") {
                                grp.groupColumnShow[i] = true;
                            }
                            if (typeof grp.groupSummary[i] !== "boolean") {
                                grp.groupSummary[i] = false;
                            }
                            if (!grp.groupSummaryPos[i]) {
                                grp.groupSummaryPos[i] = "footer";
                            }
                            cm = colModel[p.iColByName[grp.groupField[i]]];
                            if (grp.groupColumnShow[i] === true) {
                                grp.visibiltyOnNextGrouping[i] = true;
                                if (cm != null && cm.hidden === true) {
                                    base.showCol.call($($t), grp.groupField[i]);
                                }
                            } else {
                                grp.visibiltyOnNextGrouping[i] = $("#" + jgrid.jqID(p.id + "_" + grp.groupField[i])).is(":visible");
                                if (cm != null && cm.hidden !== true) {
                                    base.hideCol.call($($t), grp.groupField[i]);
                                }
                            }
                        }
                        grp.summary = [];
                        if (grp.hideFirstGroupCol) {
                            grp.formatDisplayField[0] = function(v) {
                                return v;
                            };
                        }
                        for (j = 0, cml = colModel.length; j < cml; j++) {
                            cm = colModel[j];
                            if (grp.hideFirstGroupCol) {
                                if (!cm.hidden && grp.groupField[0] === cm.name) {
                                    cm.formatter = emptyFormatter;
                                }
                            }
                            if (cm.summaryType) {
                                summary = {
                                    "nm": cm.name,
                                    "st": cm.summaryType,
                                    "v": "",
                                    "sr": cm.summaryRound,
                                    "srt": cm.summaryRoundType || "round"
                                };
                                if (cm.summaryDivider) {
                                    summary.sd = cm.summaryDivider;
                                    summary.vd = "";
                                }
                                grp.summary.push(summary);
                            }
                        }
                    }
                } else {
                    p.grouping = false;
                }
            });
        },
        "groupingPrepare": function(record, irow) {
            this.each(function() {
                var $t = this, grp = $t.p.groupingView, groups = grp.groups, counters = grp.counters, lastvalues = grp.lastvalues, isInTheSameGroup = grp.isInTheSameGroup, groupLength = grp.groupField.length, i, j, keys, newGroup, counter, fieldName, v, displayName, displayValue, changed = false, groupingCalculationsHandler = base.groupingCalculations.handler, buildSummary = function() {
                    var iSummary, summary, st;
                    for (iSummary = 0; iSummary < counter.summary.length; iSummary++) {
                        summary = counter.summary[iSummary];
                        st = $.isArray(summary.st) ? summary.st[newGroup.idx] : summary.st;
                        if ($.isFunction(st)) {
                            summary.v = st.call($t, summary.v, summary.nm, record, newGroup);
                        } else {
                            summary.v = groupingCalculationsHandler.call($($t), st, summary.v, summary.nm, summary.sr, summary.srt, record);
                            if (st.toLowerCase() === "avg" && summary.sd) {
                                summary.vd = groupingCalculationsHandler.call($($t), st, summary.vd, summary.sd, summary.sr, summary.srt, record);
                            }
                        }
                    }
                    return counter.summary;
                };
                for (i = 0; i < groupLength; i++) {
                    fieldName = grp.groupField[i];
                    displayName = grp.displayField[i];
                    v = record[fieldName];
                    displayValue = displayName == null ? null : record[displayName];
                    if (displayValue == null) {
                        displayValue = v;
                    }
                    if (v !== undefined) {
                        keys = [];
                        for (j = 0; j <= i; j++) {
                            keys.push(record[grp.groupField[j]]);
                        }
                        newGroup = {
                            "idx": i,
                            "dataIndex": fieldName,
                            "value": v,
                            "displayValue": displayValue,
                            "startRow": irow,
                            "cnt": 1,
                            "keys": keys,
                            "summary": []
                        };
                        if (irow === 0) {
                            groups.push(newGroup);
                            lastvalues[i] = v;
                            counter = {
                                "cnt": 1,
                                "pos": groups.length - 1,
                                "summary": $.extend(true, [], grp.summary)
                            };
                            counters[i] = counter;
                            groups[counter.pos].summary = buildSummary();
                        } else {
                            counter = {
                                "cnt": 1,
                                "pos": groups.length,
                                "summary": $.extend(true, [], grp.summary)
                            };
                            if (typeof v !== "object" && ($.isArray(isInTheSameGroup) && $.isFunction(isInTheSameGroup[i]) ? !isInTheSameGroup[i].call($t, lastvalues[i], v, i, grp) : lastvalues[i] !== v)) {
                                groups.push(newGroup);
                                lastvalues[i] = v;
                                changed = true;
                                counters[i] = counter;
                                groups[counter.pos].summary = buildSummary();
                            } else {
                                if (changed) {
                                    groups.push(newGroup);
                                    lastvalues[i] = v;
                                    counters[i] = counter;
                                    groups[counter.pos].summary = buildSummary();
                                } else {
                                    counter = counters[i];
                                    counter.cnt += 1;
                                    groups[counter.pos].cnt = counter.cnt;
                                    groups[counter.pos].summary = buildSummary();
                                }
                            }
                        }
                    }
                }
            });
            return this;
        },
        "groupingToggle": function(hid, clickedElem) {
            this.each(function() {
                var $t = this, p = $t.p, grp = p.groupingView, minusClasses = grp.minusicon, plusClasses = grp.plusicon, $tr = clickedElem ? $(clickedElem).closest("tr.jqgroup") : $("#" + jgrid.jqID(hid)), getGroupHeaderIcon = function($trElem) {
                    return $trElem.find(">td>span." + "tree-wrap");
                }, itemGroupingLevel, iRowStart, showDataRowsOnExpending = true, $groupIcon, collapsed = false, rowsToHideOrShow = [], addToHideOrShow = function($elem) {
                    var i, l = $elem.length;
                    for (i = 0; i < l; i++) {
                        rowsToHideOrShow.push($elem[i]);
                    }
                }, num = parseInt($tr.data("jqgrouplevel"), 10);
                if (p.frozenColumns && $tr.length > 0) {
                    iRowStart = $tr[0].rowIndex;
                    $tr = $($t.rows[iRowStart]);
                    $tr = $tr.add($t.grid.fbRows[iRowStart]);
                }
                $groupIcon = getGroupHeaderIcon($tr);
                if (jgrid.hasAllClasses($groupIcon, minusClasses)) {
                    $groupIcon.removeClass(minusClasses).addClass(plusClasses);
                    collapsed = true;
                } else {
                    $groupIcon.removeClass(plusClasses).addClass(minusClasses);
                }
                for ($tr = $tr.next(); $tr.length; $tr = $tr.next()) {
                    if ($tr.hasClass("jqfoot")) {
                        itemGroupingLevel = parseInt($tr.data("jqfootlevel"), 10);
                        if (collapsed) {
                            itemGroupingLevel = parseInt($tr.data("jqfootlevel"), 10);
                            if (!grp.showSummaryOnHide && itemGroupingLevel === num || itemGroupingLevel > num) {
                                addToHideOrShow($tr);
                            }
                            if (itemGroupingLevel < num) {
                                break;
                            }
                        } else {
                            if (itemGroupingLevel === num || grp.showSummaryOnHide && itemGroupingLevel === num + 1) {
                                addToHideOrShow($tr);
                            }
                            if (itemGroupingLevel <= num) {
                                break;
                            }
                        }
                    } else if ($tr.hasClass("jqgroup")) {
                        itemGroupingLevel = parseInt($tr.data("jqgrouplevel"), 10);
                        if (collapsed) {
                            if (itemGroupingLevel <= num) {
                                break;
                            }
                            addToHideOrShow($tr);
                        } else {
                            if (itemGroupingLevel <= num) {
                                break;
                            }
                            if (itemGroupingLevel === num + 1) {
                                getGroupHeaderIcon($tr).removeClass(minusClasses).addClass(plusClasses);
                                addToHideOrShow($tr);
                            }
                            showDataRowsOnExpending = false;
                        }
                    } else {
                        if (collapsed || showDataRowsOnExpending) {
                            addToHideOrShow($tr);
                        }
                    }
                }
                $(rowsToHideOrShow).css("display", collapsed ? "none" : "");
                if (p.frozenColumns) {
                    $($t).triggerHandler("jqGridResetFrozenHeights", [ {
                        "header": {
                            "resizeDiv": false,
                            "resizedRows": {
                                "iRowStart": -1,
                                "iRowEnd": -1
                            }
                        },
                        "resizeFooter": false,
                        "body": {
                            "resizeDiv": true,
                            "resizedRows": {
                                "iRowStart": iRowStart,
                                "iRowEnd": $tr.length ? $tr[0].rowIndex - 1 : -1
                            }
                        }
                    } ]);
                }
                $t.fixScrollOffsetAndhBoxPadding();
                $($t).triggerHandler("jqGridGroupingClickGroup", [ hid, collapsed ]);
                if ($.isFunction(p.onClickGroup)) {
                    p.onClickGroup.call($t, hid, collapsed);
                }
            });
            return false;
        },
        "groupingRender": function(grdata, rn) {
            var str = "", $t = this[0], p = $t.p, toEnd = 0, gv, cp = [], icon = "", hid, clid, grp = p.groupingView, sumreverse = $.makeArray(grp.groupSummary), pmrtl = (grp.groupCollapse ? grp.plusicon : grp.minusicon) + " tree-wrap", groupLength = grp.groupField.length, groups = grp.groups, colModel = p.colModel, cmLength = colModel.length, page = p.page, eventNames = "jqGridShowHideCol.groupingRender", getGridRowStyles = function(classes) {
                return base.getGuiStyles.call($t, "gridRow", classes);
            }, jqgroupClass = getGridRowStyles("jqgroup ui-row-" + p.direction), jqfootClass = getGridRowStyles("jqfoot ui-row-" + p.direction);
            function buildSummaryTd(iEndGroup, offset, g, foffset, iconHtml) {
                var fdata = groups[iEndGroup], i, groupCount, strTd = "", tmpdata, colSpan, align, vv, madeHidden, nMakeHidden = 0, iSummary, summary, cm, iCol, summaryType, summaryTpl, isColumnForIconNotFound = true;
                if (offset !== 0 && groups[iEndGroup].idx !== 0) {
                    for (i = iEndGroup; i >= 0; i--) {
                        if (groups[i].idx === groups[iEndGroup].idx - offset) {
                            fdata = groups[i];
                            break;
                        }
                    }
                }
                groupCount = fdata.cnt;
                for (iCol = iconHtml === undefined ? foffset : 0; iCol < cmLength; iCol++) {
                    tmpdata = "&#160;";
                    cm = colModel[iCol];
                    for (iSummary = 0; iSummary < fdata.summary.length; iSummary++) {
                        summary = fdata.summary[iSummary];
                        summaryType = $.isArray(summary.st) ? summary.st[g.idx] : summary.st;
                        summaryTpl = $.isArray(cm.summaryTpl) ? cm.summaryTpl[g.idx] : cm.summaryTpl || "{0}";
                        if (summary.nm === cm.name) {
                            if (typeof summaryType === "string" && summaryType.toLowerCase() === "avg") {
                                if (summary.sd && summary.vd) {
                                    summary.v = summary.v / summary.vd;
                                } else if (summary.v && groupCount > 0) {
                                    summary.v = summary.v / groupCount;
                                }
                            }
                            try {
                                summary.groupCount = fdata.cnt;
                                summary.groupIndex = fdata.dataIndex;
                                summary.groupValue = fdata.value;
                                vv = $t.formatter("", summary.v, iCol, summary);
                            } catch (ef) {
                                vv = summary.v;
                            }
                            tmpdata = jgrid.format(summaryTpl, vv);
                            if (cm.summaryFormat) {
                                tmpdata = cm.summaryFormat.call($t, g, tmpdata, vv, cm);
                            }
                            break;
                        }
                    }
                    colSpan = false;
                    align = false;
                    if (iconHtml !== undefined && isColumnForIconNotFound) {
                        if (!cm.hidden) {
                            tmpdata = iconHtml;
                            isColumnForIconNotFound = false;
                            if (foffset > 1) {
                                colSpan = true;
                                nMakeHidden = foffset - 1;
                            }
                            align = cm.align;
                            cm.align = p.direction === "rtl" ? "right" : "left";
                            grp.iconColumnName = cm.name;
                        }
                    }
                    madeHidden = false;
                    if (nMakeHidden > 0 && !cm.hidden && tmpdata === "&#160;") {
                        madeHidden = true;
                        if (align) {
                            cm.align = align;
                        }
                        nMakeHidden--;
                        continue;
                    }
                    strTd += "<td role='gridcell' " + $t.formatCol(iCol, 1, "") + (colSpan ? "colspan='" + foffset + "'" : "") + ">" + tmpdata + "</td>";
                    colSpan = false;
                    if (align) {
                        cm.align = align;
                    }
                    if (madeHidden) {
                        cm.hidden = false;
                        nMakeHidden--;
                    }
                }
                return strTd;
            }
            $.each(colModel, function(i, n) {
                var iGroup;
                for (iGroup = 0; iGroup < groupLength; iGroup++) {
                    if (grp.groupField[iGroup] === n.name) {
                        cp[iGroup] = i;
                        break;
                    }
                }
            });
            sumreverse.reverse();
            $.each(groups, function(i, n) {
                if (grp._locgr) {
                    if (!(n.startRow + n.cnt > (page - 1) * rn && n.startRow < page * rn)) {
                        return true;
                    }
                }
                toEnd++;
                clid = p.id + "ghead_" + n.idx;
                hid = clid + "_" + i;
                icon = "<span style='cursor:pointer;margin-" + (p.direction === "rtl" ? "right:" : "left:") + n.idx * 12 + "px;' class='" + grp.commonIconClass + " " + pmrtl + "' onclick=\"jQuery('#" + jgrid.jqID(p.id).replace("\\", "\\\\") + "').jqGrid('groupingToggle','" + hid + "', this);return false;\"></span>";
                try {
                    if ($.isArray(grp.formatDisplayField) && $.isFunction(grp.formatDisplayField[n.idx])) {
                        n.displayValue = grp.formatDisplayField[n.idx].call($t, n.displayValue, n.value, colModel[cp[n.idx]], n.idx, grp);
                        gv = n.displayValue;
                    } else {
                        gv = $t.formatter(hid, n.displayValue, cp[n.idx], n.value);
                    }
                } catch (egv) {
                    gv = n.displayValue;
                }
                str += "<tr id='" + hid + "' data-jqgrouplevel='" + n.idx + "' " + (grp.groupCollapse && n.idx > 0 ? "style='display:none;' " : "") + "role='row' class='" + jqgroupClass + " " + clid + "'>";
                var grpTextStr = $.isFunction(grp.groupText[n.idx]) ? grp.groupText[n.idx].call($t, gv, n.cnt, n.summary) : jgrid.template(grp.groupText[n.idx], gv, n.cnt, n.summary), colspan = 1, jj, kk, ik, offset = 0, sgr, gg, end, leaf = groupLength - 1 === n.idx;
                if (typeof grpTextStr !== "string" && typeof grpTextStr !== "number") {
                    grpTextStr = gv;
                }
                if (grp.groupSummaryPos[n.idx] === "header") {
                    colspan = 1;
                    if (colModel[0].name === "cb" || colModel[1].name === "cb") {
                        colspan++;
                    }
                    if (colModel[0].name === "subgrid" || colModel[1].name === "subgrid") {
                        colspan++;
                    }
                    str += buildSummaryTd(i, 0, n, colspan, icon + "<span class='cell-wrapper'>" + grpTextStr + "</span>");
                } else {
                    str += "<td role='gridcell' style='padding-left:" + n.idx * 12 + "px;'" + " colspan='" + cmLength + "'>" + icon + grpTextStr + "</td>";
                }
                str += "</tr>";
                if (leaf) {
                    gg = groups[i + 1];
                    sgr = n.startRow;
                    end = gg !== undefined ? gg.startRow : groups[i].startRow + groups[i].cnt;
                    if (grp._locgr) {
                        offset = (page - 1) * rn;
                        if (offset > n.startRow) {
                            sgr = offset;
                        }
                    }
                    for (kk = sgr; kk < end; kk++) {
                        if (!grdata[kk - offset]) {
                            break;
                        }
                        str += grdata[kk - offset].join("");
                    }
                    if (grp.groupSummaryPos[n.idx] !== "header") {
                        if (gg !== undefined) {
                            for (jj = 0; jj < grp.groupField.length; jj++) {
                                if (gg.dataIndex === grp.groupField[jj]) {
                                    break;
                                }
                            }
                            toEnd = grp.groupField.length - jj;
                        }
                        for (ik = 0; ik < toEnd; ik++) {
                            if (!sumreverse[ik]) {
                                continue;
                            }
                            str += "<tr data-jqfootlevel='" + (n.idx - ik) + (grp.groupCollapse && (n.idx - ik > 0 || !grp.showSummaryOnHide) ? "' style='display:none;'" : "'") + " role='row' class='" + jqfootClass + "'>";
                            str += buildSummaryTd(i, ik, groups[n.idx - ik], 0);
                            str += "</tr>";
                        }
                        toEnd = jj;
                    }
                }
            });
            this.unbind(eventNames).bind(eventNames, function() {
                var iCol = p.iColByName[grp.iconColumnName], iRow, row, iColNew, i;
                if ($.inArray("header", grp.groupSummaryPos) >= 0) {
                    for (i = 0; i < colModel.length; i++) {
                        if (!colModel[i].hidden) {
                            iColNew = i;
                            break;
                        }
                    }
                    if (iColNew === undefined || iCol === iColNew) {
                        return;
                    }
                    for (iRow = 0; iRow < $t.rows.length; iRow++) {
                        row = $t.rows[iRow];
                        if ($(row).hasClass("jqgroup")) {
                            $(row.cells[iColNew]).html(row.cells[iCol].innerHTML);
                            $(row.cells[iCol]).html("&nbsp;");
                        }
                    }
                    grp.iconColumnName = colModel[iColNew].name;
                }
            });
            return str;
        },
        "groupingGroupBy": function(name, options) {
            return this.each(function() {
                var $t = this, p = $t.p, grp = p.groupingView, i, cm;
                if (typeof name === "string") {
                    name = [ name ];
                }
                p.grouping = true;
                grp._locgr = false;
                if (grp.visibiltyOnNextGrouping === undefined) {
                    grp.visibiltyOnNextGrouping = [];
                }
                for (i = 0; i < grp.groupField.length; i++) {
                    cm = p.colModel[p.iColByName[grp.groupField[i]]];
                    if (!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i] && cm != null && cm.hidden === true) {
                        base.showCol.call($($t), grp.groupField[i]);
                    }
                }
                for (i = 0; i < name.length; i++) {
                    grp.visibiltyOnNextGrouping[i] = $(p.idSel + "_" + jgrid.jqID(name[i])).is(":visible");
                }
                p.groupingView = $.extend(p.groupingView, options || {});
                grp.groupField = name;
                $($t).trigger("reloadGrid");
            });
        },
        "groupingRemove": function(current) {
            return this.each(function() {
                var $t = this, p = $t.p, tbody = $t.tBodies[0], grp = p.groupingView, i;
                if (current === undefined) {
                    current = true;
                }
                p.grouping = false;
                if (current === true) {
                    for (i = 0; i < grp.groupField.length; i++) {
                        if (!grp.groupColumnShow[i] && grp.visibiltyOnNextGrouping[i]) {
                            base.showCol.call($($t), grp.groupField);
                        }
                    }
                    $("tr.jqgroup, tr.jqfoot", tbody).remove();
                    $("tr.jqgrow", tbody).filter(":hidden").show();
                } else {
                    $($t).trigger("reloadGrid");
                }
            });
        },
        "groupingCalculations": {
            "handler": function(fn, v, field, round, roundType, rc) {
                var funcs = {
                    "sum": function() {
                        return parseFloat(v || 0) + parseFloat(rc[field] || 0);
                    },
                    "min": function() {
                        if (v === "") {
                            return parseFloat(rc[field] || 0);
                        }
                        return Math.min(parseFloat(v), parseFloat(rc[field] || 0));
                    },
                    "max": function() {
                        if (v === "") {
                            return parseFloat(rc[field] || 0);
                        }
                        return Math.max(parseFloat(v), parseFloat(rc[field] || 0));
                    },
                    "count": function() {
                        if (v === "") {
                            v = 0;
                        }
                        if (rc.hasOwnProperty(field)) {
                            return v + 1;
                        }
                        return 0;
                    },
                    "avg": function() {
                        return funcs.sum();
                    }
                }, res, mul;
                if (!funcs[fn]) {
                    throw "jqGrid Grouping No such method: " + fn;
                }
                res = funcs[fn]();
                if (round != null) {
                    if (roundType === "fixed") {
                        res = res.toFixed(round);
                    } else {
                        mul = Math.pow(10, round);
                        res = Math.round(res * mul) / mul;
                    }
                }
                return res;
            }
        }
    });
});

(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "./grid.base" ], factory);
    } else if (typeof exports === "object") {
        factory(require("jquery"));
    } else {
        factory(jQuery);
    }
})(function($) {
    "use strict";
    $.jgrid = $.jgrid || {};
    var jgrid = $.jgrid, getGridRes = jgrid.getMethod("getGridRes"), base = $.fn.jqGrid;
    $.fmatter = $.fmatter || {};
    var fmatter = $.fmatter, getOptionByName = function(colModel, name) {
        var option = colModel.formatoptions || {};
        if (option.hasOwnProperty(name)) {
            return option[name];
        } else {
            return (colModel.editoptions || {})[name];
        }
    }, encodeAttr = function(v) {
        return String(v).replace(/\'/g, "&#39;");
    }, parseCheckboxOptions = function(options) {
        var colModel = options.colModel || options.cm, checked, unchecked, title = colModel.title !== false ? " title='" + encodeAttr(options.colName || colModel.name) + "'" : "", getOption = function(name) {
            return getOptionByName(colModel, name);
        }, checkedClasses = getOption("checkedClass"), uncheckedClasses = getOption("uncheckedClass"), value = getOption("value"), yes = typeof value === "string" ? value.split(":")[0] || "Yes" : "Yes", no = typeof value === "string" ? value.split(":")[1] || "No" : "No", buildCheckbox = function(classes) {
            return "<i class='" + encodeAttr(classes) + "'" + title + "></i>";
        }, disabled = getOption("disabled");
        if (disabled === undefined) {
            disabled = jgrid.formatter.checkbox.disabled;
        }
        if (disabled === true && base.isInCommonIconClass.call(this, "fa")) {
            checkedClasses = checkedClasses || "fa fa-check-square-o fa-lg";
            checked = buildCheckbox(checkedClasses);
            unchecked = buildCheckbox(uncheckedClasses || "fa fa-square-o fa-lg");
        } else if (disabled === true && base.isInCommonIconClass.call(this, "glyphicon")) {
            checkedClasses = checkedClasses || "glyphicon glyphicon-check";
            checked = buildCheckbox(checkedClasses);
            unchecked = buildCheckbox(uncheckedClasses || "glyphicon glyphicon-unchecked");
        } else {
            checkedClasses = "";
            title += disabled === true ? " disabled='disabled'" : "";
            checked = "<input type='checkbox' checked='checked'" + title + " />";
            unchecked = "<input type='checkbox'" + title + " />";
        }
        return {
            "checkedClasses": checkedClasses,
            "checked": checked,
            "unchecked": unchecked,
            "yes": yes,
            "no": no
        };
    }, YesObject = {
        "1": 1,
        "x": 1,
        "true": 1,
        "yes": 1,
        "on": 1
    }, NoObject = {
        "0": 1,
        "false": 1,
        "no": 1,
        "off": 1
    };
    $.extend(true, jgrid, {
        "formatter": {
            "date": {
                "parseRe": /[#%\\\/:_;.,\t\s\-]/,
                "masks": {
                    "ISO8601Long": "Y-m-d H:i:s",
                    "ISO8601Short": "Y-m-d",
                    "SortableDateTime": "Y-m-d\\TH:i:s",
                    "UniversalSortableDateTime": "Y-m-d H:i:sO"
                },
                "reformatAfterEdit": true,
                "userLocalTime": false
            },
            "baseLinkUrl": "",
            "showAction": "",
            "target": "",
            "checkbox": {
                "disabled": true
            },
            "idName": "id"
        },
        "cmTemplate": {
            "integerStr": {
                "formatter": "integer",
                "align": "right",
                "sorttype": "integer",
                "searchoptions": {
                    "sopt": [ "eq", "ne", "lt", "le", "gt", "ge" ]
                }
            },
            "integer": {
                "formatter": "integer",
                "align": "right",
                "sorttype": "integer",
                "convertOnSave": function(options) {
                    var nData = options.newValue;
                    return isNaN(nData) ? nData : parseInt(nData, 10);
                },
                "searchoptions": {
                    "sopt": [ "eq", "ne", "lt", "le", "gt", "ge" ]
                }
            },
            "numberStr": {
                "formatter": "number",
                "align": "right",
                "sorttype": "number",
                "searchoptions": {
                    "sopt": [ "eq", "ne", "lt", "le", "gt", "ge" ]
                }
            },
            "number": {
                "formatter": "number",
                "align": "right",
                "sorttype": "number",
                "convertOnSave": function(options) {
                    var nData = options.newValue;
                    return isNaN(nData) ? nData : parseFloat(nData);
                },
                "searchoptions": {
                    "sopt": [ "eq", "ne", "lt", "le", "gt", "ge" ]
                }
            },
            "booleanCheckbox": {
                "align": "center",
                "formatter": "checkbox",
                "edittype": "checkbox",
                "editoptions": {
                    "value": "true:false",
                    "defaultValue": "false"
                },
                "convertOnSave": function(options) {
                    var newValue = options.newValue, checkboxOptions = parseCheckboxOptions.call(this, options), lowerCaseNewData = String(newValue).toLowerCase();
                    if (YesObject[lowerCaseNewData] || lowerCaseNewData === checkboxOptions.yes.toLowerCase()) {
                        newValue = true;
                    } else if (NoObject[lowerCaseNewData] || lowerCaseNewData === checkboxOptions.no.toLowerCase()) {
                        newValue = false;
                    }
                    return newValue;
                },
                "stype": "select",
                "searchoptions": {
                    "sopt": [ "eq", "ne" ],
                    "value": "true:Yes;false:No",
                    "noFilterText": "Any"
                }
            },
            "actions": function() {
                var p = this.p;
                return {
                    "formatter": "actions",
                    "width": (p != null && (base.isInCommonIconClass.call(this, "fa") || base.isInCommonIconClass.call(this, "glyphicon")) ? $(this).jqGrid("isBootstrapGuiStyle") ? 45 : 39 : 40) + (jgrid.cellWidth() ? 5 : 0),
                    "align": "center",
                    "label": "",
                    "autoResizable": false,
                    "frozen": true,
                    "fixed": true,
                    "hidedlg": true,
                    "resizable": false,
                    "sortable": false,
                    "search": false,
                    "editable": false,
                    "viewable": false
                };
            }
        }
    });
    jgrid.cmTemplate.booleanCheckboxFa = jgrid.cmTemplate.booleanCheckbox;
    $.extend(fmatter, {
        "isObject": function(o) {
            return o && (typeof o === "object" || $.isFunction(o)) || false;
        },
        "isNumber": function(o) {
            return typeof o === "number" && isFinite(o);
        },
        "isValue": function(o) {
            return this.isObject(o) || typeof o === "string" || this.isNumber(o) || typeof o === "boolean";
        },
        "isEmpty": function(o) {
            if (typeof o !== "string" && this.isValue(o)) {
                return false;
            }
            if (!this.isValue(o)) {
                return true;
            }
            o = $.trim(o).replace(/&nbsp;/gi, "").replace(/&#160;/gi, "");
            return o === "";
        },
        "NumberFormat": function(nData, opts) {
            var isNumber = fmatter.isNumber;
            if (!isNumber(nData)) {
                nData *= 1;
            }
            if (isNumber(nData)) {
                var bNegative = nData < 0;
                var sOutput = String(nData);
                var sDecimalSeparator = opts.decimalSeparator || ".";
                var nDotIndex;
                if (isNumber(opts.decimalPlaces)) {
                    var nDecimalPlaces = opts.decimalPlaces;
                    var nDecimal = Math.pow(10, nDecimalPlaces);
                    sOutput = String(Math.round(nData * nDecimal) / nDecimal);
                    nDotIndex = sOutput.lastIndexOf(".");
                    if (nDecimalPlaces > 0) {
                        if (nDotIndex < 0) {
                            sOutput += sDecimalSeparator;
                            nDotIndex = sOutput.length - 1;
                        } else if (sDecimalSeparator !== ".") {
                            sOutput = sOutput.replace(".", sDecimalSeparator);
                        }
                        while (sOutput.length - 1 - nDotIndex < nDecimalPlaces) {
                            sOutput += "0";
                        }
                    }
                }
                if (opts.thousandsSeparator) {
                    var sThousandsSeparator = opts.thousandsSeparator;
                    nDotIndex = sOutput.lastIndexOf(sDecimalSeparator);
                    nDotIndex = nDotIndex > -1 ? nDotIndex : sOutput.length;
                    var sNewOutput = opts.decimalSeparator === undefined ? "" : sOutput.substring(nDotIndex);
                    var nCount = -1, i;
                    for (i = nDotIndex; i > 0; i--) {
                        nCount++;
                        if (nCount % 3 === 0 && i !== nDotIndex && (!bNegative || i > 1)) {
                            sNewOutput = sThousandsSeparator + sNewOutput;
                        }
                        sNewOutput = sOutput.charAt(i - 1) + sNewOutput;
                    }
                    sOutput = sNewOutput;
                }
                return sOutput;
            }
            return nData;
        }
    });
    var $FnFmatter = function(formatType, cellval, opts, rwd, act) {
        var v = cellval;
        opts = $.extend({}, getGridRes.call($(this), "formatter"), opts);
        try {
            v = $.fn.fmatter[formatType].call(this, cellval, opts, rwd, act);
        } catch (ignore) {}
        return v;
    };
    $.fn.fmatter = $FnFmatter;
    $FnFmatter.getCellBuilder = function(formatType, opts, act) {
        var cellBuilder = $.fn.fmatter[formatType] != null ? $.fn.fmatter[formatType].getCellBuilder : null;
        return $.isFunction(cellBuilder) ? cellBuilder.call(this, $.extend({}, getGridRes.call($(this), "formatter"), opts), act) : null;
    };
    $FnFmatter.defaultFormat = function(cellval, opts) {
        return fmatter.isValue(cellval) && cellval !== "" ? cellval : opts.defaultValue || "&#160;";
    };
    var defaultFormat = $FnFmatter.defaultFormat, formatCheckboxValue = function(cellValue, checkboxOptions, colModel) {
        if (cellValue === undefined || fmatter.isEmpty(cellValue)) {
            var defaultValue = getOptionByName(colModel, "defaultValue");
            if (defaultValue === undefined) {
                cellValue = checkboxOptions.no;
            }
            cellValue = defaultValue;
        }
        cellValue = String(cellValue).toLowerCase();
        return YesObject[cellValue] || cellValue === checkboxOptions.yes.toLowerCase() ? checkboxOptions.checked : checkboxOptions.unchecked;
    };
    $FnFmatter.email = function(cellval, opts) {
        if (!fmatter.isEmpty(cellval)) {
            return "<a href='mailto:" + encodeAttr(cellval) + "'>" + cellval + "</a>";
        }
        return defaultFormat(cellval, opts);
    };
    $FnFmatter.checkbox = function(cellValue, options) {
        var checkboxOptions = parseCheckboxOptions.call(this, options);
        return formatCheckboxValue(cellValue, checkboxOptions, options.colModel);
    };
    $FnFmatter.checkbox.getCellBuilder = function(options) {
        var checkboxOptions, colModel = options.colModel;
        options.colName = options.colName || this.p.colNames[options.pos];
        checkboxOptions = parseCheckboxOptions.call(this, options);
        return function(cellValue) {
            return formatCheckboxValue(cellValue, checkboxOptions, colModel);
        };
    };
    $FnFmatter.checkbox.unformat = function(cellValue, options, elem) {
        var checkboxOptions = parseCheckboxOptions.call(this, options), $elem = $(elem);
        return (checkboxOptions.checkedClasses ? jgrid.hasAllClasses($elem.children("i"), checkboxOptions.checkedClasses) : $elem.children("input").is(":checked")) ? checkboxOptions.yes : checkboxOptions.no;
    };
    $FnFmatter.checkboxFontAwesome4 = $FnFmatter.checkbox;
    $FnFmatter.checkboxFontAwesome4.getCellBuilder = $FnFmatter.checkbox.getCellBuilder;
    $FnFmatter.checkboxFontAwesome4.unformat = $FnFmatter.checkbox.unformat;
    $FnFmatter.link = function(cellval, opts) {
        var colModel = opts.colModel, target = "", op = {
            "target": opts.target
        };
        if (colModel != null) {
            op = $.extend({}, op, colModel.formatoptions || {});
        }
        if (op.target) {
            target = "target=" + op.target;
        }
        if (!fmatter.isEmpty(cellval)) {
            return "<a " + target + " href='" + encodeAttr(cellval) + "'>" + cellval + "</a>";
        }
        return defaultFormat(cellval, op);
    };
    $FnFmatter.showlink = function(cellval, opts, rowData) {
        var self = this, colModel = opts.colModel, op = {
            "baseLinkUrl": opts.baseLinkUrl,
            "showAction": opts.showAction,
            "addParam": opts.addParam || "",
            "target": opts.target,
            "idName": opts.idName,
            "hrefDefaultValue": "#"
        }, target = "", idUrl, idParam, addParam, getOptionValue = function(option) {
            return $.isFunction(option) ? option.call(self, {
                "cellValue": cellval,
                "rowid": opts.rowId,
                "rowData": rowData,
                "options": op
            }) : option || "";
        };
        if (colModel != null) {
            op = $.extend({}, op, colModel.formatoptions || {});
        }
        if (op.target) {
            target = "target=" + getOptionValue(op.target);
        }
        idUrl = getOptionValue(op.baseLinkUrl) + getOptionValue(op.showAction);
        idParam = op.idName ? encodeURIComponent(getOptionValue(op.idName)) + "=" + encodeURIComponent(getOptionValue(op.rowId) || opts.rowId) : "";
        addParam = getOptionValue(op.addParam);
        if (typeof addParam === "object" && addParam !== null) {
            addParam = (idParam !== "" ? "&" : "") + $.param(addParam);
        }
        idUrl += !idParam && !addParam ? "" : "?" + idParam + addParam;
        if (idUrl === "") {
            idUrl = getOptionValue(op.hrefDefaultValue);
        }
        if (typeof cellval === "string" || fmatter.isNumber(cellval) || $.isFunction(op.cellValue)) {
            return "<a " + target + " href='" + encodeAttr(idUrl) + "'>" + ($.isFunction(op.cellValue) ? getOptionValue(op.cellValue) : cellval) + "</a>";
        }
        return defaultFormat(cellval, op);
    };
    $FnFmatter.showlink.getCellBuilder = function(opts1) {
        var op = {
            "baseLinkUrl": opts1.baseLinkUrl,
            "showAction": opts1.showAction,
            "addParam": opts1.addParam || "",
            "target": opts1.target,
            "idName": opts1.idName,
            "hrefDefaultValue": "#"
        }, colModel = opts1.colModel;
        if (colModel != null) {
            op = $.extend({}, op, colModel.formatoptions || {});
        }
        return function(cellval, opts, rowData) {
            var self = this, rowid = opts.rowId, target = "", idUrl, idParam, addParam, getOptionValue = function(option) {
                return $.isFunction(option) ? option.call(self, {
                    "cellValue": cellval,
                    "rowid": rowid,
                    "rowData": rowData,
                    "options": op
                }) : option || "";
            };
            if (op.target) {
                target = "target=" + getOptionValue(op.target);
            }
            idUrl = getOptionValue(op.baseLinkUrl) + getOptionValue(op.showAction);
            idParam = op.idName ? encodeURIComponent(getOptionValue(op.idName)) + "=" + encodeURIComponent(getOptionValue(rowid) || opts.rowId) : "";
            addParam = getOptionValue(op.addParam);
            if (typeof addParam === "object" && addParam !== null) {
                addParam = (idParam !== "" ? "&" : "") + $.param(addParam);
            }
            idUrl += !idParam && !addParam ? "" : "?" + idParam + addParam;
            if (idUrl === "") {
                idUrl = getOptionValue(op.hrefDefaultValue);
            }
            if (typeof cellval === "string" || fmatter.isNumber(cellval) || $.isFunction(op.cellValue)) {
                return "<a " + target + " href='" + encodeAttr(idUrl) + "'>" + ($.isFunction(op.cellValue) ? getOptionValue(op.cellValue) : cellval) + "</a>";
            }
            return defaultFormat(cellval, op);
        };
    };
    $FnFmatter.showlink.pageFinalization = function(iCol) {
        var $self = $(this), p = this.p, colModel = p.colModel, cm = colModel[iCol], iRow, rows = this.rows, nRows = rows.length, row, td, onClick = function(e) {
            var $tr = $(this).closest(".jqgrow");
            if ($tr.length > 0) {
                return cm.formatoptions.onClick.call($self[0], {
                    "iCol": iCol,
                    "iRow": $tr[0].rowIndex,
                    "rowid": $tr.attr("id"),
                    "cm": cm,
                    "cmName": cm.name,
                    "cellValue": $(this).text(),
                    "a": this,
                    "event": e
                });
            }
        };
        if (cm.formatoptions != null && $.isFunction(cm.formatoptions.onClick)) {
            for (iRow = 0; iRow < nRows; iRow++) {
                row = rows[iRow];
                if ($(row).hasClass("jqgrow")) {
                    td = row.cells[iCol];
                    if (cm.autoResizable && td != null && $(td.firstChild).hasClass(p.autoResizing.wrapperClassName)) {
                        td = td.firstChild;
                    }
                    if (td != null) {
                        $(td.firstChild).bind("click", onClick);
                    }
                }
            }
        }
    };
    var insertPrefixAndSuffix = function(sOutput, opts) {
        sOutput = opts.prefix ? opts.prefix + sOutput : sOutput;
        return opts.suffix ? sOutput + opts.suffix : sOutput;
    }, numberHelper = function(cellval, opts, formatType) {
        var colModel = opts.colModel, op = $.extend({}, opts[formatType]);
        if (colModel != null) {
            op = $.extend({}, op, colModel.formatoptions || {});
        }
        if (fmatter.isEmpty(cellval)) {
            return insertPrefixAndSuffix(op.defaultValue, op);
        }
        return insertPrefixAndSuffix(fmatter.NumberFormat(cellval, op), op);
    };
    $FnFmatter.integer = function(cellval, opts) {
        return numberHelper(cellval, opts, "integer");
    };
    $FnFmatter.number = function(cellval, opts) {
        return numberHelper(cellval, opts, "number");
    };
    $FnFmatter.currency = function(cellval, opts) {
        return numberHelper(cellval, opts, "currency");
    };
    var numberCellBuilder = function(opts, formatType) {
        var colModel = opts.colModel, op = $.extend({}, opts[formatType]);
        if (colModel != null) {
            op = $.extend({}, op, colModel.formatoptions || {});
        }
        var numberFormat = fmatter.NumberFormat, defaultValue = op.defaultValue ? insertPrefixAndSuffix(op.defaultValue, op) : "";
        return function(cellValue) {
            if (fmatter.isEmpty(cellValue)) {
                return defaultValue;
            }
            return insertPrefixAndSuffix(numberFormat(cellValue, op), op);
        };
    };
    $FnFmatter.integer.getCellBuilder = function(options) {
        return numberCellBuilder(options, "integer");
    };
    $FnFmatter.number.getCellBuilder = function(options) {
        return numberCellBuilder(options, "number");
    };
    $FnFmatter.currency.getCellBuilder = function(options) {
        return numberCellBuilder(options, "currency");
    };
    $FnFmatter.date = function(cellval, opts, rwd, act) {
        var colModel = opts.colModel, op = $.extend({}, opts.date);
        if (colModel != null) {
            op = $.extend({}, op, colModel.formatoptions || {});
        }
        if (!op.reformatAfterEdit && act === "edit") {
            return defaultFormat(cellval, op);
        }
        if (!fmatter.isEmpty(cellval)) {
            return jgrid.parseDate.call(this, op.srcformat, cellval, op.newformat, op);
        }
        return defaultFormat(cellval, op);
    };
    $FnFmatter.date.getCellBuilder = function(opts, act) {
        var op = $.extend({}, opts.date);
        if (opts.colModel != null) {
            op = $.extend({}, op, opts.colModel.formatoptions || {});
        }
        var parseDate = jgrid.parseDate, srcformat = op.srcformat, newformat = op.newformat;
        if (!op.reformatAfterEdit && act === "edit") {
            return function(cellValue) {
                return defaultFormat(cellValue, op);
            };
        }
        return function(cellValue) {
            return fmatter.isEmpty(cellValue) ? defaultFormat(cellValue, op) : parseDate.call(this, srcformat, cellValue, newformat, op);
        };
    };
    $FnFmatter.select = function(cellval, opts) {
        var ret = [], colModel = opts.colModel, defaultValue, op = $.extend({}, colModel.editoptions || {}, colModel.formatoptions || {}), oSelect = op.value, sep = op.separator || ":", delim = op.delimiter || ";";
        if (oSelect) {
            var msl = op.multiple === true ? true : false, scell = [], sv, mapFunc = function(n, j) {
                if (j > 0) {
                    return n;
                }
            };
            if (msl) {
                scell = $.map(String(cellval).split(","), function(n) {
                    return $.trim(n);
                });
            }
            if (typeof oSelect === "string") {
                var so = oSelect.split(delim), i, v;
                for (i = 0; i < so.length; i++) {
                    sv = so[i].split(sep);
                    if (sv.length > 2) {
                        sv[1] = $.map(sv, mapFunc).join(sep);
                    }
                    v = $.trim(sv[0]);
                    if (op.defaultValue === v) {
                        defaultValue = sv[1];
                    }
                    if (msl) {
                        if ($.inArray(v, scell) > -1) {
                            ret.push(sv[1]);
                        }
                    } else if (v === $.trim(cellval)) {
                        ret = [ sv[1] ];
                        break;
                    }
                }
            } else if (fmatter.isObject(oSelect)) {
                defaultValue = oSelect[op.defaultValue];
                if (msl) {
                    ret = $.map(scell, function(n) {
                        return oSelect[n];
                    });
                } else {
                    ret = [ oSelect[cellval] === undefined ? "" : oSelect[cellval] ];
                }
            }
        }
        cellval = ret.join(", ");
        return cellval !== "" ? cellval : op.defaultValue !== undefined ? defaultValue : defaultFormat(cellval, op);
    };
    $FnFmatter.select.getCellBuilder = function(opts) {
        var colModel = opts.colModel, $fnDefaultFormat = $FnFmatter.defaultFormat, op = $.extend({}, colModel.editoptions || {}, colModel.formatoptions || {}), oSelect = op.value, sep = op.separator || ":", delim = op.delimiter || ";", defaultValue, defaultValueDefined = op.defaultValue !== undefined, isMultiple = op.multiple === true ? true : false, sv, so, i, nOpts, selOptions = {}, mapFunc = function(n, j) {
            if (j > 0) {
                return n;
            }
        };
        if (typeof oSelect === "string") {
            so = oSelect.split(delim);
            nOpts = so.length;
            for (i = nOpts - 1; i >= 0; i--) {
                sv = so[i].split(sep);
                if (sv.length > 2) {
                    sv[1] = $.map(sv, mapFunc).join(sep);
                }
                selOptions[$.trim(sv[0])] = sv[1];
            }
        } else if (fmatter.isObject(oSelect)) {
            selOptions = oSelect;
        } else {
            return function(cellValue) {
                return cellValue ? String(cellValue) : $fnDefaultFormat(cellValue, op);
            };
        }
        if (defaultValueDefined) {
            defaultValue = selOptions[op.defaultValue];
        }
        return isMultiple ? function(cellValue) {
            var ret = [], iOpt, splitedCell = $.map(String(cellValue).split(","), function(n) {
                return $.trim(n);
            });
            for (iOpt = 0; iOpt < splitedCell.length; iOpt++) {
                cellValue = splitedCell[iOpt];
                if (selOptions.hasOwnProperty(cellValue)) {
                    ret.push(selOptions[cellValue]);
                }
            }
            cellValue = ret.join(", ");
            return cellValue !== "" ? cellValue : defaultValueDefined ? defaultValue : $fnDefaultFormat(cellValue, op);
        } : function(cellValue) {
            var ret = selOptions[String(cellValue)];
            return ret !== "" && ret !== undefined ? ret : defaultValueDefined ? defaultValue : $fnDefaultFormat(cellValue, op);
        };
    };
    $FnFmatter.rowactions = function(e, act) {
        var $tr = $(this).closest("tr.jqgrow"), rid = $tr.attr("id"), $id = $(this).closest("table.ui-jqgrid-btable").attr("id").replace(/_frozen([^_]*)$/, "$1"), $grid = $("#" + jgrid.jqID($id)), $t = $grid[0], p = $t.p, i, n, customAction, actop, getTop = function() {
            var tr = $tr[0], gbox = $grid.closest(".ui-jqgrid")[0];
            if (tr.getBoundingClientRect != null && gbox.getBoundingClientRect != null) {
                return tr.getBoundingClientRect().top + $tr.outerHeight() - gbox.getBoundingClientRect().top;
            }
            return $tr.offset().top + $tr.outerHeight() - $(gbox).offset().top;
        }, cm = p.colModel[jgrid.getCellIndex(this)], op = $.extend(true, {
            "extraparam": {}
        }, jgrid.actionsNav || {}, p.actionsNavOptions || {}, cm.formatoptions || {});
        if (p.editOptions !== undefined) {
            op.editOptions = $.extend(true, op.editOptions || {}, p.editOptions);
        }
        if (p.delOptions !== undefined) {
            op.delOptions = p.delOptions;
        }
        if ($tr.hasClass("jqgrid-new-row")) {
            op.extraparam[p.prmNames.oper] = p.prmNames.addoper;
        }
        actop = {
            "keys": op.keys,
            "oneditfunc": op.onEdit,
            "successfunc": op.onSuccess,
            "url": op.url,
            "extraparam": op.extraparam,
            "aftersavefunc": op.afterSave,
            "errorfunc": op.onError,
            "afterrestorefunc": op.afterRestore,
            "restoreAfterError": op.restoreAfterError,
            "mtype": op.mtype
        };
        if (!p.multiselect && rid !== p.selrow || p.multiselect && $.inArray(rid, p.selarrrow) < 0) {
            $grid.jqGrid("setSelection", rid, true, e);
        } else {
            jgrid.fullBoolFeedback.call($t, "onSelectRow", "jqGridSelectRow", rid, true, e);
        }
        switch (act) {
          case "edit":
            $grid.jqGrid("editRow", rid, actop);
            break;

          case "save":
            $grid.jqGrid("saveRow", rid, actop);
            break;

          case "cancel":
            $grid.jqGrid("restoreRow", rid, op.afterRestore);
            break;

          case "del":
            op.delOptions = op.delOptions || {};
            if (op.delOptions.top === undefined) {
                op.delOptions.top = getTop();
            }
            $grid.jqGrid("delGridRow", rid, op.delOptions);
            break;

          case "formedit":
            op.editOptions = op.editOptions || {};
            if (op.editOptions.top === undefined) {
                op.editOptions.top = getTop();
                op.editOptions.recreateForm = true;
            }
            $grid.jqGrid("editGridRow", rid, op.editOptions);
            break;

          default:
            if (op.custom != null && op.custom.length > 0) {
                n = op.custom.length;
                for (i = 0; i < n; i++) {
                    customAction = op.custom[i];
                    if (customAction.action === act && $.isFunction(customAction.onClick)) {
                        customAction.onClick.call($t, {
                            "rowid": rid,
                            "event": e,
                            "action": act,
                            "options": customAction
                        });
                    }
                }
            }
        }
        if (e.stopPropagation) {
            e.stopPropagation();
        }
        return false;
    };
    $FnFmatter.actions = function(cellval, opts, rwd, act) {
        var rowid = opts.rowId, str = "", $t = this, p = $t.p, $self = $($t), i, customAction, info, displayMask = {}, edit = getGridRes.call($self, "edit") || {}, op = $.extend({
            "editbutton": true,
            "delbutton": true,
            "editformbutton": false,
            "commonIconClass": "ui-icon",
            "editicon": "ui-icon-pencil",
            "delicon": "ui-icon-trash",
            "saveicon": "ui-icon-disk",
            "cancelicon": "ui-icon-cancel",
            "savetitle": edit.bSubmit || "",
            "canceltitle": edit.bCancel || ""
        }, getGridRes.call($self, "nav") || {}, jgrid.nav || {}, p.navOptions || {}, getGridRes.call($self, "actionsNav") || {}, jgrid.actionsNav || {}, p.actionsNavOptions || {}, opts.colModel.formatoptions || {}), cssIconClass = function(name) {
            return jgrid.mergeCssClasses(op.commonIconClass, op[name + "icon"]);
        }, hoverClass = $self.jqGrid("getGuiStyles", "states.hover"), hoverAttributes = "onmouseover=\"jQuery(this).addClass('" + hoverClass + "');\" onmouseout=\"jQuery(this).removeClass('" + hoverClass + "');\"", buttonInfos = [ {
            "action": "edit",
            "actionName": "formedit",
            "display": op.editformbutton
        }, {
            "action": "edit",
            "display": !op.editformbutton && op.editbutton
        }, {
            "action": "del",
            "idPrefix": "Delete",
            "display": op.delbutton
        }, {
            "action": "save",
            "display": op.editformbutton || op.editbutton,
            "hidden": true
        }, {
            "action": "cancel",
            "display": op.editformbutton || op.editbutton,
            "hidden": true
        } ], actionButton = function(options) {
            var action = options.action, actionName = options.actionName || action, idPrefix = options.idPrefix !== undefined ? options.idPrefix : action.charAt(0).toUpperCase() + action.substring(1);
            return "<div title='" + encodeAttr(op[action + "title"]) + (options.hidden ? "' style='display:none;" : "") + "' class='" + encodeAttr($self.jqGrid("getGuiStyles", "actionsButton", "ui-pg-div ui-inline-" + action)) + "' " + (idPrefix !== null ? "id='j" + encodeAttr(idPrefix + "Button_" + rowid) : "") + "' onclick=\"return jQuery.fn.fmatter.rowactions.call(this,event,'" + actionName + "');\" " + (options.noHovering ? "" : hoverAttributes) + "><span class='" + encodeAttr(cssIconClass(action)) + "'></span></div>";
        }, n = op.custom != null ? op.custom.length - 1 : -1;
        if (rowid === undefined || fmatter.isEmpty(rowid)) {
            return "";
        }
        if ($.isFunction(op.isDisplayButtons)) {
            try {
                displayMask = op.isDisplayButtons.call($t, opts, rwd, act) || {};
            } catch (ignore) {}
        }
        while (n >= 0) {
            customAction = op.custom[n--];
            buttonInfos[customAction.position === "first" ? "unshift" : "push"](customAction);
        }
        for (i = 0, n = buttonInfos.length; i < n; i++) {
            info = $.extend({}, buttonInfos[i], displayMask[buttonInfos[i].action] || {});
            if (info.display !== false) {
                str += actionButton(info);
            }
        }
        return "<div class='" + encodeAttr($self.jqGrid("getGuiStyles", "actionsDiv", "ui-jqgrid-actions")) + "'>" + str + "</div>";
    };
    $FnFmatter.actions.pageFinalization = function(iCol) {
        var $self = $(this), p = this.p, colModel = p.colModel, cm = colModel[iCol], showHideEditDelete = function(show, rowid) {
            var maxfrozen = 0, tr, $actionsDiv, len = colModel.length, i;
            for (i = 0; i < len; i++) {
                if (colModel[i].frozen !== true) {
                    break;
                }
                maxfrozen = i;
            }
            tr = $self.jqGrid("getGridRowById", rowid);
            if (tr != null && tr.cells != null) {
                iCol = p.iColByName[cm.name];
                $actionsDiv = $(tr.cells[iCol]).children(".ui-jqgrid-actions");
                if (cm.frozen && p.frozenColumns && iCol <= maxfrozen) {
                    $actionsDiv = $actionsDiv.add($($self[0].grid.fbRows[tr.rowIndex].cells[iCol]).children(".ui-jqgrid-actions"));
                }
                if (show) {
                    $actionsDiv.find(">.ui-inline-edit,>.ui-inline-del").show();
                    $actionsDiv.find(">.ui-inline-save,>.ui-inline-cancel").hide();
                } else {
                    $actionsDiv.find(">.ui-inline-edit,>.ui-inline-del").hide();
                    $actionsDiv.find(">.ui-inline-save,>.ui-inline-cancel").show();
                }
            }
        }, showEditDelete = function(e, rowid) {
            showHideEditDelete(true, rowid);
            return false;
        }, hideEditDelete = function(e, rowid) {
            showHideEditDelete(false, rowid);
            return false;
        };
        if (cm.formatoptions == null || !cm.formatoptions.editformbutton) {
            $self.unbind("jqGridInlineAfterRestoreRow.jqGridFormatter jqGridInlineAfterSaveRow.jqGridFormatter", showEditDelete);
            $self.bind("jqGridInlineAfterRestoreRow.jqGridFormatter jqGridInlineAfterSaveRow.jqGridFormatter", showEditDelete);
            $self.unbind("jqGridInlineEditRow.jqGridFormatter", hideEditDelete);
            $self.bind("jqGridInlineEditRow.jqGridFormatter", hideEditDelete);
        }
    };
    $.unformat = function(cellval, options, pos, cnt) {
        var ret, colModel = options.colModel, formatType = colModel.formatter, p = this.p, op = colModel.formatoptions || {}, unformatFunc = colModel.unformat || $FnFmatter[formatType] && $FnFmatter[formatType].unformat;
        if (cellval instanceof jQuery && cellval.length > 0) {
            cellval = cellval[0];
        }
        if (p.treeGrid && cellval != null && $(cellval.firstChild).hasClass("tree-wrap") && ($(cellval.lastChild).hasClass("cell-wrapper") || $(cellval.lastChild).hasClass("cell-wrapperleaf"))) {
            cellval = cellval.lastChild;
        }
        if (colModel.autoResizable && cellval != null && $(cellval.firstChild).hasClass(p.autoResizing.wrapperClassName)) {
            cellval = cellval.firstChild;
        }
        if (unformatFunc !== undefined && $.isFunction(unformatFunc)) {
            ret = unformatFunc.call(this, $(cellval).text(), options, cellval);
        } else if (formatType !== undefined && typeof formatType === "string") {
            var $self = $(this), getFormaterOption = function(formatterName, optionName) {
                return op[optionName] !== undefined ? op[optionName] : getGridRes.call($self, "formatter." + formatterName + "." + optionName);
            }, cutThousandsSeparator = function(formatterName, val) {
                var separator = getFormaterOption(formatterName, "thousandsSeparator").replace(/([\.\*\_\'\(\)\{\}\+\?\\])/g, "\\$1");
                return val.replace(new RegExp(separator, "g"), "");
            };
            switch (formatType) {
              case "integer":
                ret = cutThousandsSeparator("integer", $(cellval).text());
                break;

              case "number":
                ret = cutThousandsSeparator("number", $(cellval).text()).replace(getFormaterOption("number", "decimalSeparator"), ".");
                break;

              case "currency":
                ret = $(cellval).text();
                var prefix = getFormaterOption("currency", "prefix"), suffix = getFormaterOption("currency", "suffix");
                if (prefix && prefix.length) {
                    ret = ret.substr(prefix.length);
                }
                if (suffix && suffix.length) {
                    ret = ret.substr(0, ret.length - suffix.length);
                }
                ret = cutThousandsSeparator("number", ret).replace(getFormaterOption("number", "decimalSeparator"), ".");
                break;

              case "checkbox":
                ret = $FnFmatter.checkbox.unformat(cellval, options, cellval);
                break;

              case "select":
                ret = $.unformat.select(cellval, options, pos, cnt);
                break;

              case "actions":
                return "";

              default:
                ret = $(cellval).text();
            }
        }
        ret = ret !== undefined ? ret : cnt === true ? $(cellval).text() : jgrid.htmlDecode($(cellval).html());
        return ret;
    };
    $.unformat.select = function(cellval, options, pos, cnt) {
        var ret = [], cell = $(cellval).text(), colModel = options.colModel;
        if (cnt === true) {
            return cell;
        }
        var op = $.extend({}, colModel.editoptions || {}, colModel.formatoptions || {}), sep = op.separator === undefined ? ":" : op.separator, delim = op.delimiter === undefined ? ";" : op.delimiter;
        if (op.value) {
            var oSelect = op.value, msl = op.multiple === true ? true : false, scell = [], sv, mapFunc = function(n, k) {
                if (k > 0) {
                    return n;
                }
            };
            if (msl) {
                scell = cell.split(",");
                scell = $.map(scell, function(n) {
                    return $.trim(n);
                });
            }
            if (typeof oSelect === "string") {
                var so = oSelect.split(delim), j = 0, i;
                for (i = 0; i < so.length; i++) {
                    sv = so[i].split(sep);
                    if (sv.length > 2) {
                        sv[1] = $.map(sv, mapFunc).join(sep);
                    }
                    if (msl) {
                        if ($.inArray($.trim(sv[1]), scell) > -1) {
                            ret[j] = sv[0];
                            j++;
                        }
                    } else if ($.trim(sv[1]) === $.trim(cell)) {
                        ret[0] = sv[0];
                        break;
                    }
                }
            } else if (fmatter.isObject(oSelect) || $.isArray(oSelect)) {
                if (!msl) {
                    scell[0] = cell;
                }
                ret = $.map(scell, function(n) {
                    var rv;
                    $.each(oSelect, function(k, val) {
                        if (val === n) {
                            rv = k;
                            return false;
                        }
                    });
                    if (rv !== undefined) {
                        return rv;
                    }
                });
            }
            return ret.join(", ");
        }
        return cell || "";
    };
    $.unformat.date = function(cellval, opts) {
        var op = $.extend(true, {}, getGridRes.call($(this), "formatter.date"), jgrid.formatter.date || {}, opts.formatoptions || {});
        return !fmatter.isEmpty(cellval) ? jgrid.parseDate.call(this, op.newformat, cellval, op.srcformat, op) : "";
    };
});

(function() {
    var gridz;
    gridz = angular.module("angleGrinder.gridz", [ "ngSanitize", "angleGrinder.common", "ui.select2", "angleGrinder.resources", "dndLists" ]);
    gridz.run([ "$window", "agDateFilter", "agCurrencyFilter", function($window, agDateFilter, agCurrencyFilter) {
        $window.agDateFilter = agDateFilter;
        return $window.agCurrencyFilter = agCurrencyFilter;
    } ]);
}).call(this);