(function($) {
    if (typeof $.fn.each2 == "undefined") {
        $.extend($.fn, {
            "each2": function(c) {
                var j = $([ 0 ]), i = -1, l = this.length;
                while (++i < l && (j.context = j[0] = this[i]) && c.call(j[0], i, j) !== false) ;
                return this;
            }
        });
    }
})(jQuery);

(function($, undefined) {
    "use strict";
    if (window.Select2 !== undefined) {
        return;
    }
    var AbstractSelect2, SingleSelect2, MultiSelect2, nextUid, sizer, lastMousePosition = {
        "x": 0,
        "y": 0
    }, $document, scrollBarDimensions, KEY = {
        "TAB": 9,
        "ENTER": 13,
        "ESC": 27,
        "SPACE": 32,
        "LEFT": 37,
        "UP": 38,
        "RIGHT": 39,
        "DOWN": 40,
        "SHIFT": 16,
        "CTRL": 17,
        "ALT": 18,
        "PAGE_UP": 33,
        "PAGE_DOWN": 34,
        "HOME": 36,
        "END": 35,
        "BACKSPACE": 8,
        "DELETE": 46,
        "isArrow": function(k) {
            k = k.which ? k.which : k;
            switch (k) {
              case KEY.LEFT:
              case KEY.RIGHT:
              case KEY.UP:
              case KEY.DOWN:
                return true;
            }
            return false;
        },
        "isControl": function(e) {
            var k = e.which;
            switch (k) {
              case KEY.SHIFT:
              case KEY.CTRL:
              case KEY.ALT:
                return true;
            }
            if (e.metaKey) return true;
            return false;
        },
        "isFunctionKey": function(k) {
            k = k.which ? k.which : k;
            return k >= 112 && k <= 123;
        }
    }, MEASURE_SCROLLBAR_TEMPLATE = "<div class='select2-measure-scrollbar'></div>", DIACRITICS = {
        "\u24b6": "A",
        "\uff21": "A",
        "\xc0": "A",
        "\xc1": "A",
        "\xc2": "A",
        "\u1ea6": "A",
        "\u1ea4": "A",
        "\u1eaa": "A",
        "\u1ea8": "A",
        "\xc3": "A",
        "\u0100": "A",
        "\u0102": "A",
        "\u1eb0": "A",
        "\u1eae": "A",
        "\u1eb4": "A",
        "\u1eb2": "A",
        "\u0226": "A",
        "\u01e0": "A",
        "\xc4": "A",
        "\u01de": "A",
        "\u1ea2": "A",
        "\xc5": "A",
        "\u01fa": "A",
        "\u01cd": "A",
        "\u0200": "A",
        "\u0202": "A",
        "\u1ea0": "A",
        "\u1eac": "A",
        "\u1eb6": "A",
        "\u1e00": "A",
        "\u0104": "A",
        "\u023a": "A",
        "\u2c6f": "A",
        "\ua732": "AA",
        "\xc6": "AE",
        "\u01fc": "AE",
        "\u01e2": "AE",
        "\ua734": "AO",
        "\ua736": "AU",
        "\ua738": "AV",
        "\ua73a": "AV",
        "\ua73c": "AY",
        "\u24b7": "B",
        "\uff22": "B",
        "\u1e02": "B",
        "\u1e04": "B",
        "\u1e06": "B",
        "\u0243": "B",
        "\u0182": "B",
        "\u0181": "B",
        "\u24b8": "C",
        "\uff23": "C",
        "\u0106": "C",
        "\u0108": "C",
        "\u010a": "C",
        "\u010c": "C",
        "\xc7": "C",
        "\u1e08": "C",
        "\u0187": "C",
        "\u023b": "C",
        "\ua73e": "C",
        "\u24b9": "D",
        "\uff24": "D",
        "\u1e0a": "D",
        "\u010e": "D",
        "\u1e0c": "D",
        "\u1e10": "D",
        "\u1e12": "D",
        "\u1e0e": "D",
        "\u0110": "D",
        "\u018b": "D",
        "\u018a": "D",
        "\u0189": "D",
        "\ua779": "D",
        "\u01f1": "DZ",
        "\u01c4": "DZ",
        "\u01f2": "Dz",
        "\u01c5": "Dz",
        "\u24ba": "E",
        "\uff25": "E",
        "\xc8": "E",
        "\xc9": "E",
        "\xca": "E",
        "\u1ec0": "E",
        "\u1ebe": "E",
        "\u1ec4": "E",
        "\u1ec2": "E",
        "\u1ebc": "E",
        "\u0112": "E",
        "\u1e14": "E",
        "\u1e16": "E",
        "\u0114": "E",
        "\u0116": "E",
        "\xcb": "E",
        "\u1eba": "E",
        "\u011a": "E",
        "\u0204": "E",
        "\u0206": "E",
        "\u1eb8": "E",
        "\u1ec6": "E",
        "\u0228": "E",
        "\u1e1c": "E",
        "\u0118": "E",
        "\u1e18": "E",
        "\u1e1a": "E",
        "\u0190": "E",
        "\u018e": "E",
        "\u24bb": "F",
        "\uff26": "F",
        "\u1e1e": "F",
        "\u0191": "F",
        "\ua77b": "F",
        "\u24bc": "G",
        "\uff27": "G",
        "\u01f4": "G",
        "\u011c": "G",
        "\u1e20": "G",
        "\u011e": "G",
        "\u0120": "G",
        "\u01e6": "G",
        "\u0122": "G",
        "\u01e4": "G",
        "\u0193": "G",
        "\ua7a0": "G",
        "\ua77d": "G",
        "\ua77e": "G",
        "\u24bd": "H",
        "\uff28": "H",
        "\u0124": "H",
        "\u1e22": "H",
        "\u1e26": "H",
        "\u021e": "H",
        "\u1e24": "H",
        "\u1e28": "H",
        "\u1e2a": "H",
        "\u0126": "H",
        "\u2c67": "H",
        "\u2c75": "H",
        "\ua78d": "H",
        "\u24be": "I",
        "\uff29": "I",
        "\xcc": "I",
        "\xcd": "I",
        "\xce": "I",
        "\u0128": "I",
        "\u012a": "I",
        "\u012c": "I",
        "\u0130": "I",
        "\xcf": "I",
        "\u1e2e": "I",
        "\u1ec8": "I",
        "\u01cf": "I",
        "\u0208": "I",
        "\u020a": "I",
        "\u1eca": "I",
        "\u012e": "I",
        "\u1e2c": "I",
        "\u0197": "I",
        "\u24bf": "J",
        "\uff2a": "J",
        "\u0134": "J",
        "\u0248": "J",
        "\u24c0": "K",
        "\uff2b": "K",
        "\u1e30": "K",
        "\u01e8": "K",
        "\u1e32": "K",
        "\u0136": "K",
        "\u1e34": "K",
        "\u0198": "K",
        "\u2c69": "K",
        "\ua740": "K",
        "\ua742": "K",
        "\ua744": "K",
        "\ua7a2": "K",
        "\u24c1": "L",
        "\uff2c": "L",
        "\u013f": "L",
        "\u0139": "L",
        "\u013d": "L",
        "\u1e36": "L",
        "\u1e38": "L",
        "\u013b": "L",
        "\u1e3c": "L",
        "\u1e3a": "L",
        "\u0141": "L",
        "\u023d": "L",
        "\u2c62": "L",
        "\u2c60": "L",
        "\ua748": "L",
        "\ua746": "L",
        "\ua780": "L",
        "\u01c7": "LJ",
        "\u01c8": "Lj",
        "\u24c2": "M",
        "\uff2d": "M",
        "\u1e3e": "M",
        "\u1e40": "M",
        "\u1e42": "M",
        "\u2c6e": "M",
        "\u019c": "M",
        "\u24c3": "N",
        "\uff2e": "N",
        "\u01f8": "N",
        "\u0143": "N",
        "\xd1": "N",
        "\u1e44": "N",
        "\u0147": "N",
        "\u1e46": "N",
        "\u0145": "N",
        "\u1e4a": "N",
        "\u1e48": "N",
        "\u0220": "N",
        "\u019d": "N",
        "\ua790": "N",
        "\ua7a4": "N",
        "\u01ca": "NJ",
        "\u01cb": "Nj",
        "\u24c4": "O",
        "\uff2f": "O",
        "\xd2": "O",
        "\xd3": "O",
        "\xd4": "O",
        "\u1ed2": "O",
        "\u1ed0": "O",
        "\u1ed6": "O",
        "\u1ed4": "O",
        "\xd5": "O",
        "\u1e4c": "O",
        "\u022c": "O",
        "\u1e4e": "O",
        "\u014c": "O",
        "\u1e50": "O",
        "\u1e52": "O",
        "\u014e": "O",
        "\u022e": "O",
        "\u0230": "O",
        "\xd6": "O",
        "\u022a": "O",
        "\u1ece": "O",
        "\u0150": "O",
        "\u01d1": "O",
        "\u020c": "O",
        "\u020e": "O",
        "\u01a0": "O",
        "\u1edc": "O",
        "\u1eda": "O",
        "\u1ee0": "O",
        "\u1ede": "O",
        "\u1ee2": "O",
        "\u1ecc": "O",
        "\u1ed8": "O",
        "\u01ea": "O",
        "\u01ec": "O",
        "\xd8": "O",
        "\u01fe": "O",
        "\u0186": "O",
        "\u019f": "O",
        "\ua74a": "O",
        "\ua74c": "O",
        "\u01a2": "OI",
        "\ua74e": "OO",
        "\u0222": "OU",
        "\u24c5": "P",
        "\uff30": "P",
        "\u1e54": "P",
        "\u1e56": "P",
        "\u01a4": "P",
        "\u2c63": "P",
        "\ua750": "P",
        "\ua752": "P",
        "\ua754": "P",
        "\u24c6": "Q",
        "\uff31": "Q",
        "\ua756": "Q",
        "\ua758": "Q",
        "\u024a": "Q",
        "\u24c7": "R",
        "\uff32": "R",
        "\u0154": "R",
        "\u1e58": "R",
        "\u0158": "R",
        "\u0210": "R",
        "\u0212": "R",
        "\u1e5a": "R",
        "\u1e5c": "R",
        "\u0156": "R",
        "\u1e5e": "R",
        "\u024c": "R",
        "\u2c64": "R",
        "\ua75a": "R",
        "\ua7a6": "R",
        "\ua782": "R",
        "\u24c8": "S",
        "\uff33": "S",
        "\u1e9e": "S",
        "\u015a": "S",
        "\u1e64": "S",
        "\u015c": "S",
        "\u1e60": "S",
        "\u0160": "S",
        "\u1e66": "S",
        "\u1e62": "S",
        "\u1e68": "S",
        "\u0218": "S",
        "\u015e": "S",
        "\u2c7e": "S",
        "\ua7a8": "S",
        "\ua784": "S",
        "\u24c9": "T",
        "\uff34": "T",
        "\u1e6a": "T",
        "\u0164": "T",
        "\u1e6c": "T",
        "\u021a": "T",
        "\u0162": "T",
        "\u1e70": "T",
        "\u1e6e": "T",
        "\u0166": "T",
        "\u01ac": "T",
        "\u01ae": "T",
        "\u023e": "T",
        "\ua786": "T",
        "\ua728": "TZ",
        "\u24ca": "U",
        "\uff35": "U",
        "\xd9": "U",
        "\xda": "U",
        "\xdb": "U",
        "\u0168": "U",
        "\u1e78": "U",
        "\u016a": "U",
        "\u1e7a": "U",
        "\u016c": "U",
        "\xdc": "U",
        "\u01db": "U",
        "\u01d7": "U",
        "\u01d5": "U",
        "\u01d9": "U",
        "\u1ee6": "U",
        "\u016e": "U",
        "\u0170": "U",
        "\u01d3": "U",
        "\u0214": "U",
        "\u0216": "U",
        "\u01af": "U",
        "\u1eea": "U",
        "\u1ee8": "U",
        "\u1eee": "U",
        "\u1eec": "U",
        "\u1ef0": "U",
        "\u1ee4": "U",
        "\u1e72": "U",
        "\u0172": "U",
        "\u1e76": "U",
        "\u1e74": "U",
        "\u0244": "U",
        "\u24cb": "V",
        "\uff36": "V",
        "\u1e7c": "V",
        "\u1e7e": "V",
        "\u01b2": "V",
        "\ua75e": "V",
        "\u0245": "V",
        "\ua760": "VY",
        "\u24cc": "W",
        "\uff37": "W",
        "\u1e80": "W",
        "\u1e82": "W",
        "\u0174": "W",
        "\u1e86": "W",
        "\u1e84": "W",
        "\u1e88": "W",
        "\u2c72": "W",
        "\u24cd": "X",
        "\uff38": "X",
        "\u1e8a": "X",
        "\u1e8c": "X",
        "\u24ce": "Y",
        "\uff39": "Y",
        "\u1ef2": "Y",
        "\xdd": "Y",
        "\u0176": "Y",
        "\u1ef8": "Y",
        "\u0232": "Y",
        "\u1e8e": "Y",
        "\u0178": "Y",
        "\u1ef6": "Y",
        "\u1ef4": "Y",
        "\u01b3": "Y",
        "\u024e": "Y",
        "\u1efe": "Y",
        "\u24cf": "Z",
        "\uff3a": "Z",
        "\u0179": "Z",
        "\u1e90": "Z",
        "\u017b": "Z",
        "\u017d": "Z",
        "\u1e92": "Z",
        "\u1e94": "Z",
        "\u01b5": "Z",
        "\u0224": "Z",
        "\u2c7f": "Z",
        "\u2c6b": "Z",
        "\ua762": "Z",
        "\u24d0": "a",
        "\uff41": "a",
        "\u1e9a": "a",
        "\xe0": "a",
        "\xe1": "a",
        "\xe2": "a",
        "\u1ea7": "a",
        "\u1ea5": "a",
        "\u1eab": "a",
        "\u1ea9": "a",
        "\xe3": "a",
        "\u0101": "a",
        "\u0103": "a",
        "\u1eb1": "a",
        "\u1eaf": "a",
        "\u1eb5": "a",
        "\u1eb3": "a",
        "\u0227": "a",
        "\u01e1": "a",
        "\xe4": "a",
        "\u01df": "a",
        "\u1ea3": "a",
        "\xe5": "a",
        "\u01fb": "a",
        "\u01ce": "a",
        "\u0201": "a",
        "\u0203": "a",
        "\u1ea1": "a",
        "\u1ead": "a",
        "\u1eb7": "a",
        "\u1e01": "a",
        "\u0105": "a",
        "\u2c65": "a",
        "\u0250": "a",
        "\ua733": "aa",
        "\xe6": "ae",
        "\u01fd": "ae",
        "\u01e3": "ae",
        "\ua735": "ao",
        "\ua737": "au",
        "\ua739": "av",
        "\ua73b": "av",
        "\ua73d": "ay",
        "\u24d1": "b",
        "\uff42": "b",
        "\u1e03": "b",
        "\u1e05": "b",
        "\u1e07": "b",
        "\u0180": "b",
        "\u0183": "b",
        "\u0253": "b",
        "\u24d2": "c",
        "\uff43": "c",
        "\u0107": "c",
        "\u0109": "c",
        "\u010b": "c",
        "\u010d": "c",
        "\xe7": "c",
        "\u1e09": "c",
        "\u0188": "c",
        "\u023c": "c",
        "\ua73f": "c",
        "\u2184": "c",
        "\u24d3": "d",
        "\uff44": "d",
        "\u1e0b": "d",
        "\u010f": "d",
        "\u1e0d": "d",
        "\u1e11": "d",
        "\u1e13": "d",
        "\u1e0f": "d",
        "\u0111": "d",
        "\u018c": "d",
        "\u0256": "d",
        "\u0257": "d",
        "\ua77a": "d",
        "\u01f3": "dz",
        "\u01c6": "dz",
        "\u24d4": "e",
        "\uff45": "e",
        "\xe8": "e",
        "\xe9": "e",
        "\xea": "e",
        "\u1ec1": "e",
        "\u1ebf": "e",
        "\u1ec5": "e",
        "\u1ec3": "e",
        "\u1ebd": "e",
        "\u0113": "e",
        "\u1e15": "e",
        "\u1e17": "e",
        "\u0115": "e",
        "\u0117": "e",
        "\xeb": "e",
        "\u1ebb": "e",
        "\u011b": "e",
        "\u0205": "e",
        "\u0207": "e",
        "\u1eb9": "e",
        "\u1ec7": "e",
        "\u0229": "e",
        "\u1e1d": "e",
        "\u0119": "e",
        "\u1e19": "e",
        "\u1e1b": "e",
        "\u0247": "e",
        "\u025b": "e",
        "\u01dd": "e",
        "\u24d5": "f",
        "\uff46": "f",
        "\u1e1f": "f",
        "\u0192": "f",
        "\ua77c": "f",
        "\u24d6": "g",
        "\uff47": "g",
        "\u01f5": "g",
        "\u011d": "g",
        "\u1e21": "g",
        "\u011f": "g",
        "\u0121": "g",
        "\u01e7": "g",
        "\u0123": "g",
        "\u01e5": "g",
        "\u0260": "g",
        "\ua7a1": "g",
        "\u1d79": "g",
        "\ua77f": "g",
        "\u24d7": "h",
        "\uff48": "h",
        "\u0125": "h",
        "\u1e23": "h",
        "\u1e27": "h",
        "\u021f": "h",
        "\u1e25": "h",
        "\u1e29": "h",
        "\u1e2b": "h",
        "\u1e96": "h",
        "\u0127": "h",
        "\u2c68": "h",
        "\u2c76": "h",
        "\u0265": "h",
        "\u0195": "hv",
        "\u24d8": "i",
        "\uff49": "i",
        "\xec": "i",
        "\xed": "i",
        "\xee": "i",
        "\u0129": "i",
        "\u012b": "i",
        "\u012d": "i",
        "\xef": "i",
        "\u1e2f": "i",
        "\u1ec9": "i",
        "\u01d0": "i",
        "\u0209": "i",
        "\u020b": "i",
        "\u1ecb": "i",
        "\u012f": "i",
        "\u1e2d": "i",
        "\u0268": "i",
        "\u0131": "i",
        "\u24d9": "j",
        "\uff4a": "j",
        "\u0135": "j",
        "\u01f0": "j",
        "\u0249": "j",
        "\u24da": "k",
        "\uff4b": "k",
        "\u1e31": "k",
        "\u01e9": "k",
        "\u1e33": "k",
        "\u0137": "k",
        "\u1e35": "k",
        "\u0199": "k",
        "\u2c6a": "k",
        "\ua741": "k",
        "\ua743": "k",
        "\ua745": "k",
        "\ua7a3": "k",
        "\u24db": "l",
        "\uff4c": "l",
        "\u0140": "l",
        "\u013a": "l",
        "\u013e": "l",
        "\u1e37": "l",
        "\u1e39": "l",
        "\u013c": "l",
        "\u1e3d": "l",
        "\u1e3b": "l",
        "\u017f": "l",
        "\u0142": "l",
        "\u019a": "l",
        "\u026b": "l",
        "\u2c61": "l",
        "\ua749": "l",
        "\ua781": "l",
        "\ua747": "l",
        "\u01c9": "lj",
        "\u24dc": "m",
        "\uff4d": "m",
        "\u1e3f": "m",
        "\u1e41": "m",
        "\u1e43": "m",
        "\u0271": "m",
        "\u026f": "m",
        "\u24dd": "n",
        "\uff4e": "n",
        "\u01f9": "n",
        "\u0144": "n",
        "\xf1": "n",
        "\u1e45": "n",
        "\u0148": "n",
        "\u1e47": "n",
        "\u0146": "n",
        "\u1e4b": "n",
        "\u1e49": "n",
        "\u019e": "n",
        "\u0272": "n",
        "\u0149": "n",
        "\ua791": "n",
        "\ua7a5": "n",
        "\u01cc": "nj",
        "\u24de": "o",
        "\uff4f": "o",
        "\xf2": "o",
        "\xf3": "o",
        "\xf4": "o",
        "\u1ed3": "o",
        "\u1ed1": "o",
        "\u1ed7": "o",
        "\u1ed5": "o",
        "\xf5": "o",
        "\u1e4d": "o",
        "\u022d": "o",
        "\u1e4f": "o",
        "\u014d": "o",
        "\u1e51": "o",
        "\u1e53": "o",
        "\u014f": "o",
        "\u022f": "o",
        "\u0231": "o",
        "\xf6": "o",
        "\u022b": "o",
        "\u1ecf": "o",
        "\u0151": "o",
        "\u01d2": "o",
        "\u020d": "o",
        "\u020f": "o",
        "\u01a1": "o",
        "\u1edd": "o",
        "\u1edb": "o",
        "\u1ee1": "o",
        "\u1edf": "o",
        "\u1ee3": "o",
        "\u1ecd": "o",
        "\u1ed9": "o",
        "\u01eb": "o",
        "\u01ed": "o",
        "\xf8": "o",
        "\u01ff": "o",
        "\u0254": "o",
        "\ua74b": "o",
        "\ua74d": "o",
        "\u0275": "o",
        "\u01a3": "oi",
        "\u0223": "ou",
        "\ua74f": "oo",
        "\u24df": "p",
        "\uff50": "p",
        "\u1e55": "p",
        "\u1e57": "p",
        "\u01a5": "p",
        "\u1d7d": "p",
        "\ua751": "p",
        "\ua753": "p",
        "\ua755": "p",
        "\u24e0": "q",
        "\uff51": "q",
        "\u024b": "q",
        "\ua757": "q",
        "\ua759": "q",
        "\u24e1": "r",
        "\uff52": "r",
        "\u0155": "r",
        "\u1e59": "r",
        "\u0159": "r",
        "\u0211": "r",
        "\u0213": "r",
        "\u1e5b": "r",
        "\u1e5d": "r",
        "\u0157": "r",
        "\u1e5f": "r",
        "\u024d": "r",
        "\u027d": "r",
        "\ua75b": "r",
        "\ua7a7": "r",
        "\ua783": "r",
        "\u24e2": "s",
        "\uff53": "s",
        "\xdf": "s",
        "\u015b": "s",
        "\u1e65": "s",
        "\u015d": "s",
        "\u1e61": "s",
        "\u0161": "s",
        "\u1e67": "s",
        "\u1e63": "s",
        "\u1e69": "s",
        "\u0219": "s",
        "\u015f": "s",
        "\u023f": "s",
        "\ua7a9": "s",
        "\ua785": "s",
        "\u1e9b": "s",
        "\u24e3": "t",
        "\uff54": "t",
        "\u1e6b": "t",
        "\u1e97": "t",
        "\u0165": "t",
        "\u1e6d": "t",
        "\u021b": "t",
        "\u0163": "t",
        "\u1e71": "t",
        "\u1e6f": "t",
        "\u0167": "t",
        "\u01ad": "t",
        "\u0288": "t",
        "\u2c66": "t",
        "\ua787": "t",
        "\ua729": "tz",
        "\u24e4": "u",
        "\uff55": "u",
        "\xf9": "u",
        "\xfa": "u",
        "\xfb": "u",
        "\u0169": "u",
        "\u1e79": "u",
        "\u016b": "u",
        "\u1e7b": "u",
        "\u016d": "u",
        "\xfc": "u",
        "\u01dc": "u",
        "\u01d8": "u",
        "\u01d6": "u",
        "\u01da": "u",
        "\u1ee7": "u",
        "\u016f": "u",
        "\u0171": "u",
        "\u01d4": "u",
        "\u0215": "u",
        "\u0217": "u",
        "\u01b0": "u",
        "\u1eeb": "u",
        "\u1ee9": "u",
        "\u1eef": "u",
        "\u1eed": "u",
        "\u1ef1": "u",
        "\u1ee5": "u",
        "\u1e73": "u",
        "\u0173": "u",
        "\u1e77": "u",
        "\u1e75": "u",
        "\u0289": "u",
        "\u24e5": "v",
        "\uff56": "v",
        "\u1e7d": "v",
        "\u1e7f": "v",
        "\u028b": "v",
        "\ua75f": "v",
        "\u028c": "v",
        "\ua761": "vy",
        "\u24e6": "w",
        "\uff57": "w",
        "\u1e81": "w",
        "\u1e83": "w",
        "\u0175": "w",
        "\u1e87": "w",
        "\u1e85": "w",
        "\u1e98": "w",
        "\u1e89": "w",
        "\u2c73": "w",
        "\u24e7": "x",
        "\uff58": "x",
        "\u1e8b": "x",
        "\u1e8d": "x",
        "\u24e8": "y",
        "\uff59": "y",
        "\u1ef3": "y",
        "\xfd": "y",
        "\u0177": "y",
        "\u1ef9": "y",
        "\u0233": "y",
        "\u1e8f": "y",
        "\xff": "y",
        "\u1ef7": "y",
        "\u1e99": "y",
        "\u1ef5": "y",
        "\u01b4": "y",
        "\u024f": "y",
        "\u1eff": "y",
        "\u24e9": "z",
        "\uff5a": "z",
        "\u017a": "z",
        "\u1e91": "z",
        "\u017c": "z",
        "\u017e": "z",
        "\u1e93": "z",
        "\u1e95": "z",
        "\u01b6": "z",
        "\u0225": "z",
        "\u0240": "z",
        "\u2c6c": "z",
        "\ua763": "z",
        "\u0386": "\u0391",
        "\u0388": "\u0395",
        "\u0389": "\u0397",
        "\u038a": "\u0399",
        "\u03aa": "\u0399",
        "\u038c": "\u039f",
        "\u038e": "\u03a5",
        "\u03ab": "\u03a5",
        "\u038f": "\u03a9",
        "\u03ac": "\u03b1",
        "\u03ad": "\u03b5",
        "\u03ae": "\u03b7",
        "\u03af": "\u03b9",
        "\u03ca": "\u03b9",
        "\u0390": "\u03b9",
        "\u03cc": "\u03bf",
        "\u03cd": "\u03c5",
        "\u03cb": "\u03c5",
        "\u03b0": "\u03c5",
        "\u03c9": "\u03c9",
        "\u03c2": "\u03c3"
    };
    $document = $(document);
    nextUid = function() {
        var counter = 1;
        return function() {
            return counter++;
        };
    }();
    function reinsertElement(element) {
        var placeholder = $(document.createTextNode(""));
        element.before(placeholder);
        placeholder.before(element);
        placeholder.remove();
    }
    function stripDiacritics(str) {
        function match(a) {
            return DIACRITICS[a] || a;
        }
        return str.replace(/[^\u0000-\u007E]/g, match);
    }
    function indexOf(value, array) {
        var i = 0, l = array.length;
        for (;i < l; i = i + 1) {
            if (equal(value, array[i])) return i;
        }
        return -1;
    }
    function measureScrollbar() {
        var $template = $(MEASURE_SCROLLBAR_TEMPLATE);
        $template.appendTo(document.body);
        var dim = {
            "width": $template.width() - $template[0].clientWidth,
            "height": $template.height() - $template[0].clientHeight
        };
        $template.remove();
        return dim;
    }
    function equal(a, b) {
        if (a === b) return true;
        if (a === undefined || b === undefined) return false;
        if (a === null || b === null) return false;
        if (a.constructor === String) return a + "" === b + "";
        if (b.constructor === String) return b + "" === a + "";
        return false;
    }
    function splitVal(string, separator, transform) {
        var val, i, l;
        if (string === null || string.length < 1) return [];
        val = string.split(separator);
        for (i = 0, l = val.length; i < l; i = i + 1) val[i] = transform(val[i]);
        return val;
    }
    function getSideBorderPadding(element) {
        return element.outerWidth(false) - element.width();
    }
    function installKeyUpChangeEvent(element) {
        var key = "keyup-change-value";
        element.on("keydown", function() {
            if ($.data(element, key) === undefined) {
                $.data(element, key, element.val());
            }
        });
        element.on("keyup", function() {
            var val = $.data(element, key);
            if (val !== undefined && element.val() !== val) {
                $.removeData(element, key);
                element.trigger("keyup-change");
            }
        });
    }
    function installFilteredMouseMove(element) {
        element.on("mousemove", function(e) {
            var lastpos = lastMousePosition;
            if (lastpos === undefined || lastpos.x !== e.pageX || lastpos.y !== e.pageY) {
                $(e.target).trigger("mousemove-filtered", e);
            }
        });
    }
    function debounce(quietMillis, fn, ctx) {
        ctx = ctx || undefined;
        var timeout;
        return function() {
            var args = arguments;
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                fn.apply(ctx, args);
            }, quietMillis);
        };
    }
    function installDebouncedScroll(threshold, element) {
        var notify = debounce(threshold, function(e) {
            element.trigger("scroll-debounced", e);
        });
        element.on("scroll", function(e) {
            if (indexOf(e.target, element.get()) >= 0) notify(e);
        });
    }
    function focus($el) {
        if ($el[0] === document.activeElement) return;
        window.setTimeout(function() {
            var el = $el[0], pos = $el.val().length, range;
            $el.focus();
            var isVisible = el.offsetWidth > 0 || el.offsetHeight > 0;
            if (isVisible && el === document.activeElement) {
                if (el.setSelectionRange) {
                    el.setSelectionRange(pos, pos);
                } else if (el.createTextRange) {
                    range = el.createTextRange();
                    range.collapse(false);
                    range.select();
                }
            }
        }, 0);
    }
    function getCursorInfo(el) {
        el = $(el)[0];
        var offset = 0;
        var length = 0;
        if ("selectionStart" in el) {
            offset = el.selectionStart;
            length = el.selectionEnd - offset;
        } else if ("selection" in document) {
            el.focus();
            var sel = document.selection.createRange();
            length = document.selection.createRange().text.length;
            sel.moveStart("character", -el.value.length);
            offset = sel.text.length - length;
        }
        return {
            "offset": offset,
            "length": length
        };
    }
    function killEvent(event) {
        event.preventDefault();
        event.stopPropagation();
    }
    function killEventImmediately(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
    }
    function measureTextWidth(e) {
        if (!sizer) {
            var style = e[0].currentStyle || window.getComputedStyle(e[0], null);
            sizer = $(document.createElement("div")).css({
                "position": "absolute",
                "left": "-10000px",
                "top": "-10000px",
                "display": "none",
                "fontSize": style.fontSize,
                "fontFamily": style.fontFamily,
                "fontStyle": style.fontStyle,
                "fontWeight": style.fontWeight,
                "letterSpacing": style.letterSpacing,
                "textTransform": style.textTransform,
                "whiteSpace": "nowrap"
            });
            sizer.attr("class", "select2-sizer");
            $(document.body).append(sizer);
        }
        sizer.text(e.val());
        return sizer.width();
    }
    function syncCssClasses(dest, src, adapter) {
        var classes, replacements = [], adapted;
        classes = $.trim(dest.attr("class"));
        if (classes) {
            classes = "" + classes;
            $(classes.split(/\s+/)).each2(function() {
                if (this.indexOf("select2-") === 0) {
                    replacements.push(this);
                }
            });
        }
        classes = $.trim(src.attr("class"));
        if (classes) {
            classes = "" + classes;
            $(classes.split(/\s+/)).each2(function() {
                if (this.indexOf("select2-") !== 0) {
                    adapted = adapter(this);
                    if (adapted) {
                        replacements.push(adapted);
                    }
                }
            });
        }
        dest.attr("class", replacements.join(" "));
    }
    function markMatch(text, term, markup, escapeMarkup) {
        var match = stripDiacritics(text.toUpperCase()).indexOf(stripDiacritics(term.toUpperCase())), tl = term.length;
        if (match < 0) {
            markup.push(escapeMarkup(text));
            return;
        }
        markup.push(escapeMarkup(text.substring(0, match)));
        markup.push("<span class='select2-match'>");
        markup.push(escapeMarkup(text.substring(match, match + tl)));
        markup.push("</span>");
        markup.push(escapeMarkup(text.substring(match + tl, text.length)));
    }
    function defaultEscapeMarkup(markup) {
        var replace_map = {
            "\\": "&#92;",
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#47;"
        };
        return String(markup).replace(/[&<>"'\/\\]/g, function(match) {
            return replace_map[match];
        });
    }
    function ajax(options) {
        var timeout, handler = null, quietMillis = options.quietMillis || 100, ajaxUrl = options.url, self = this;
        return function(query) {
            window.clearTimeout(timeout);
            timeout = window.setTimeout(function() {
                var data = options.data, url = ajaxUrl, transport = options.transport || $.fn.select2.ajaxDefaults.transport, deprecated = {
                    "type": options.type || "GET",
                    "cache": options.cache || false,
                    "jsonpCallback": options.jsonpCallback || undefined,
                    "dataType": options.dataType || "json"
                }, params = $.extend({}, $.fn.select2.ajaxDefaults.params, deprecated);
                data = data ? data.call(self, query.term, query.page, query.context) : null;
                url = typeof url === "function" ? url.call(self, query.term, query.page, query.context) : url;
                if (handler && typeof handler.abort === "function") {
                    handler.abort();
                }
                if (options.params) {
                    if ($.isFunction(options.params)) {
                        $.extend(params, options.params.call(self));
                    } else {
                        $.extend(params, options.params);
                    }
                }
                $.extend(params, {
                    "url": url,
                    "dataType": options.dataType,
                    "data": data,
                    "success": function(data) {
                        var results = options.results(data, query.page, query);
                        query.callback(results);
                    },
                    "error": function(jqXHR, textStatus, errorThrown) {
                        var results = {
                            "hasError": true,
                            "jqXHR": jqXHR,
                            "textStatus": textStatus,
                            "errorThrown": errorThrown
                        };
                        query.callback(results);
                    }
                });
                handler = transport.call(self, params);
            }, quietMillis);
        };
    }
    function local(options) {
        var data = options, dataText, tmp, text = function(item) {
            return "" + item.text;
        };
        if ($.isArray(data)) {
            tmp = data;
            data = {
                "results": tmp
            };
        }
        if ($.isFunction(data) === false) {
            tmp = data;
            data = function() {
                return tmp;
            };
        }
        var dataItem = data();
        if (dataItem.text) {
            text = dataItem.text;
            if (!$.isFunction(text)) {
                dataText = dataItem.text;
                text = function(item) {
                    return item[dataText];
                };
            }
        }
        return function(query) {
            var t = query.term, filtered = {
                "results": []
            }, process;
            if (t === "") {
                query.callback(data());
                return;
            }
            process = function(datum, collection) {
                var group, attr;
                datum = datum[0];
                if (datum.children) {
                    group = {};
                    for (attr in datum) {
                        if (datum.hasOwnProperty(attr)) group[attr] = datum[attr];
                    }
                    group.children = [];
                    $(datum.children).each2(function(i, childDatum) {
                        process(childDatum, group.children);
                    });
                    if (group.children.length || query.matcher(t, text(group), datum)) {
                        collection.push(group);
                    }
                } else {
                    if (query.matcher(t, text(datum), datum)) {
                        collection.push(datum);
                    }
                }
            };
            $(data().results).each2(function(i, datum) {
                process(datum, filtered.results);
            });
            query.callback(filtered);
        };
    }
    function tags(data) {
        var isFunc = $.isFunction(data);
        return function(query) {
            var t = query.term, filtered = {
                "results": []
            };
            var result = isFunc ? data(query) : data;
            if ($.isArray(result)) {
                $(result).each(function() {
                    var isObject = this.text !== undefined, text = isObject ? this.text : this;
                    if (t === "" || query.matcher(t, text)) {
                        filtered.results.push(isObject ? this : {
                            "id": this,
                            "text": this
                        });
                    }
                });
                query.callback(filtered);
            }
        };
    }
    function checkFormatter(formatter, formatterName) {
        if ($.isFunction(formatter)) return true;
        if (!formatter) return false;
        if (typeof formatter === "string") return true;
        throw new Error(formatterName + " must be a string, function, or falsy value");
    }
    function evaluate(val, context) {
        if ($.isFunction(val)) {
            var args = Array.prototype.slice.call(arguments, 2);
            return val.apply(context, args);
        }
        return val;
    }
    function countResults(results) {
        var count = 0;
        $.each(results, function(i, item) {
            if (item.children) {
                count += countResults(item.children);
            } else {
                count++;
            }
        });
        return count;
    }
    function defaultTokenizer(input, selection, selectCallback, opts) {
        var original = input, dupe = false, token, index, i, l, separator;
        if (!opts.createSearchChoice || !opts.tokenSeparators || opts.tokenSeparators.length < 1) return undefined;
        while (true) {
            index = -1;
            for (i = 0, l = opts.tokenSeparators.length; i < l; i++) {
                separator = opts.tokenSeparators[i];
                index = input.indexOf(separator);
                if (index >= 0) break;
            }
            if (index < 0) break;
            token = input.substring(0, index);
            input = input.substring(index + separator.length);
            if (token.length > 0) {
                token = opts.createSearchChoice.call(this, token, selection);
                if (token !== undefined && token !== null && opts.id(token) !== undefined && opts.id(token) !== null) {
                    dupe = false;
                    for (i = 0, l = selection.length; i < l; i++) {
                        if (equal(opts.id(token), opts.id(selection[i]))) {
                            dupe = true;
                            break;
                        }
                    }
                    if (!dupe) selectCallback(token);
                }
            }
        }
        if (original !== input) return input;
    }
    function cleanupJQueryElements() {
        var self = this;
        $.each(arguments, function(i, element) {
            self[element].remove();
            self[element] = null;
        });
    }
    function clazz(SuperClass, methods) {
        var constructor = function() {};
        constructor.prototype = new SuperClass();
        constructor.prototype.constructor = constructor;
        constructor.prototype.parent = SuperClass.prototype;
        constructor.prototype = $.extend(constructor.prototype, methods);
        return constructor;
    }
    AbstractSelect2 = clazz(Object, {
        "bind": function(func) {
            var self = this;
            return function() {
                func.apply(self, arguments);
            };
        },
        "init": function(opts) {
            var results, search, resultsSelector = ".select2-results";
            this.opts = opts = this.prepareOpts(opts);
            this.id = opts.id;
            if (opts.element.data("select2") !== undefined && opts.element.data("select2") !== null) {
                opts.element.data("select2").destroy();
            }
            this.container = this.createContainer();
            this.liveRegion = $(".select2-hidden-accessible");
            if (this.liveRegion.length == 0) {
                this.liveRegion = $("<span>", {
                    "role": "status",
                    "aria-live": "polite"
                }).addClass("select2-hidden-accessible").appendTo(document.body);
            }
            this.containerId = "s2id_" + (opts.element.attr("id") || "autogen" + nextUid());
            this.containerEventName = this.containerId.replace(/([.])/g, "_").replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g, "\\$1");
            this.container.attr("id", this.containerId);
            this.container.attr("title", opts.element.attr("title"));
            this.body = $(document.body);
            syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
            this.container.attr("style", opts.element.attr("style"));
            this.container.css(evaluate(opts.containerCss, this.opts.element));
            this.container.addClass(evaluate(opts.containerCssClass, this.opts.element));
            this.elementTabIndex = this.opts.element.attr("tabindex");
            this.opts.element.data("select2", this).attr("tabindex", "-1").before(this.container).on("click.select2", killEvent);
            this.container.data("select2", this);
            this.dropdown = this.container.find(".select2-drop");
            syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
            this.dropdown.addClass(evaluate(opts.dropdownCssClass, this.opts.element));
            this.dropdown.data("select2", this);
            this.dropdown.on("click", killEvent);
            this.results = results = this.container.find(resultsSelector);
            this.search = search = this.container.find("input.select2-input");
            this.queryCount = 0;
            this.resultsPage = 0;
            this.context = null;
            this.initContainer();
            this.container.on("click", killEvent);
            installFilteredMouseMove(this.results);
            this.dropdown.on("mousemove-filtered", resultsSelector, this.bind(this.highlightUnderEvent));
            this.dropdown.on("touchstart touchmove touchend", resultsSelector, this.bind(function(event) {
                this._touchEvent = true;
                this.highlightUnderEvent(event);
            }));
            this.dropdown.on("touchmove", resultsSelector, this.bind(this.touchMoved));
            this.dropdown.on("touchstart touchend", resultsSelector, this.bind(this.clearTouchMoved));
            this.dropdown.on("click", this.bind(function(event) {
                if (this._touchEvent) {
                    this._touchEvent = false;
                    this.selectHighlighted();
                }
            }));
            installDebouncedScroll(80, this.results);
            this.dropdown.on("scroll-debounced", resultsSelector, this.bind(this.loadMoreIfNeeded));
            $(this.container).on("change", ".select2-input", function(e) {
                e.stopPropagation();
            });
            $(this.dropdown).on("change", ".select2-input", function(e) {
                e.stopPropagation();
            });
            if ($.fn.mousewheel) {
                results.mousewheel(function(e, delta, deltaX, deltaY) {
                    var top = results.scrollTop();
                    if (deltaY > 0 && top - deltaY <= 0) {
                        results.scrollTop(0);
                        killEvent(e);
                    } else if (deltaY < 0 && results.get(0).scrollHeight - results.scrollTop() + deltaY <= results.height()) {
                        results.scrollTop(results.get(0).scrollHeight - results.height());
                        killEvent(e);
                    }
                });
            }
            installKeyUpChangeEvent(search);
            search.on("keyup-change input paste", this.bind(this.updateResults));
            search.on("focus", function() {
                search.addClass("select2-focused");
            });
            search.on("blur", function() {
                search.removeClass("select2-focused");
            });
            this.dropdown.on("mouseup", resultsSelector, this.bind(function(e) {
                if ($(e.target).closest(".select2-result-selectable").length > 0) {
                    this.highlightUnderEvent(e);
                    this.selectHighlighted(e);
                }
            }));
            this.dropdown.on("click mouseup mousedown touchstart touchend focusin", function(e) {
                e.stopPropagation();
            });
            this.lastSearchTerm = undefined;
            if ($.isFunction(this.opts.initSelection)) {
                this.initSelection();
                this.monitorSource();
            }
            if (opts.maximumInputLength !== null) {
                this.search.attr("maxlength", opts.maximumInputLength);
            }
            var disabled = opts.element.prop("disabled");
            if (disabled === undefined) disabled = false;
            this.enable(!disabled);
            var readonly = opts.element.prop("readonly");
            if (readonly === undefined) readonly = false;
            this.readonly(readonly);
            scrollBarDimensions = scrollBarDimensions || measureScrollbar();
            this.autofocus = opts.element.prop("autofocus");
            opts.element.prop("autofocus", false);
            if (this.autofocus) this.focus();
            this.search.attr("placeholder", opts.searchInputPlaceholder);
        },
        "destroy": function() {
            var element = this.opts.element, select2 = element.data("select2"), self = this;
            this.close();
            if (element.length && element[0].detachEvent && self._sync) {
                element.each(function() {
                    if (self._sync) {
                        this.detachEvent("onpropertychange", self._sync);
                    }
                });
            }
            if (this.propertyObserver) {
                this.propertyObserver.disconnect();
                this.propertyObserver = null;
            }
            this._sync = null;
            if (select2 !== undefined) {
                select2.container.remove();
                select2.liveRegion.remove();
                select2.dropdown.remove();
                element.removeData("select2").off(".select2");
                if (!element.is("input[type='hidden']")) {
                    element.show().prop("autofocus", this.autofocus || false);
                    if (this.elementTabIndex) {
                        element.attr({
                            "tabindex": this.elementTabIndex
                        });
                    } else {
                        element.removeAttr("tabindex");
                    }
                    element.show();
                } else {
                    element.css("display", "");
                }
            }
            cleanupJQueryElements.call(this, "container", "liveRegion", "dropdown", "results", "search");
        },
        "optionToData": function(element) {
            if (element.is("option")) {
                return {
                    "id": element.prop("value"),
                    "text": element.text(),
                    "element": element.get(),
                    "css": element.attr("class"),
                    "disabled": element.prop("disabled"),
                    "locked": equal(element.attr("locked"), "locked") || equal(element.data("locked"), true)
                };
            } else if (element.is("optgroup")) {
                return {
                    "text": element.attr("label"),
                    "children": [],
                    "element": element.get(),
                    "css": element.attr("class")
                };
            }
        },
        "prepareOpts": function(opts) {
            var element, select, idKey, ajaxUrl, self = this;
            element = opts.element;
            if (element.get(0).tagName.toLowerCase() === "select") {
                this.select = select = opts.element;
            }
            if (select) {
                $.each([ "id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags" ], function() {
                    if (this in opts) {
                        throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.");
                    }
                });
            }
            opts.debug = opts.debug || $.fn.select2.defaults.debug;
            if (opts.debug && console && console.warn) {
                if (opts.id != null) {
                    console.warn("Select2: The `id` option has been removed in Select2 4.0.0, " + "consider renaming your `id` property or mapping the property before your data makes it to Select2. " + "You can read more at https://select2.github.io/announcements-4.0.html#changed-id");
                }
                if (opts.text != null) {
                    console.warn("Select2: The `text` option has been removed in Select2 4.0.0, " + "consider renaming your `text` property or mapping the property before your data makes it to Select2. " + "You can read more at https://select2.github.io/announcements-4.0.html#changed-id");
                }
                if (opts.sortResults != null) {
                    console.warn("Select2: the `sortResults` option has been renamed to `sorter` in Select2 4.0.0. ");
                }
                if (opts.selectOnBlur != null) {
                    console.warn("Select2: The `selectOnBlur` option has been renamed to `selectOnClose` in Select2 4.0.0.");
                }
                if (opts.ajax != null && opts.ajax.results != null) {
                    console.warn("Select2: The `ajax.results` option has been renamed to `ajax.processResults` in Select2 4.0.0.");
                }
                if (opts.formatNoResults != null) {
                    console.warn("Select2: The `formatNoResults` option has been renamed to `language.noResults` in Select2 4.0.0.");
                }
                if (opts.formatSearching != null) {
                    console.warn("Select2: The `formatSearching` option has been renamed to `language.searching` in Select2 4.0.0.");
                }
                if (opts.formatInputTooShort != null) {
                    console.warn("Select2: The `formatInputTooShort` option has been renamed to `language.inputTooShort` in Select2 4.0.0.");
                }
                if (opts.formatInputTooLong != null) {
                    console.warn("Select2: The `formatInputTooLong` option has been renamed to `language.inputTooLong` in Select2 4.0.0.");
                }
                if (opts.formatLoading != null) {
                    console.warn("Select2: The `formatLoading` option has been renamed to `language.loadingMore` in Select2 4.0.0.");
                }
                if (opts.formatSelectionTooBig != null) {
                    console.warn("Select2: The `formatSelectionTooBig` option has been renamed to `language.maximumSelected` in Select2 4.0.0.");
                }
                if (opts.element.data("select2Tags")) {
                    console.warn("Select2: The `data-select2-tags` attribute has been renamed to `data-tags` in Select2 4.0.0.");
                }
            }
            if (opts.element.data("tags") != null) {
                var elemTags = opts.element.data("tags");
                if (!$.isArray(elemTags)) {
                    elemTags = [];
                }
                opts.element.data("select2Tags", elemTags);
            }
            if (opts.sorter != null) {
                opts.sortResults = opts.sorter;
            }
            if (opts.selectOnClose != null) {
                opts.selectOnBlur = opts.selectOnClose;
            }
            if (opts.ajax != null) {
                if ($.isFunction(opts.ajax.processResults)) {
                    opts.ajax.results = opts.ajax.processResults;
                }
            }
            if (opts.language != null) {
                var lang = opts.language;
                if ($.isFunction(lang.noMatches)) {
                    opts.formatNoMatches = lang.noMatches;
                }
                if ($.isFunction(lang.searching)) {
                    opts.formatSearching = lang.searching;
                }
                if ($.isFunction(lang.inputTooShort)) {
                    opts.formatInputTooShort = lang.inputTooShort;
                }
                if ($.isFunction(lang.inputTooLong)) {
                    opts.formatInputTooLong = lang.inputTooLong;
                }
                if ($.isFunction(lang.loadingMore)) {
                    opts.formatLoading = lang.loadingMore;
                }
                if ($.isFunction(lang.maximumSelected)) {
                    opts.formatSelectionTooBig = lang.maximumSelected;
                }
            }
            opts = $.extend({}, {
                "populateResults": function(container, results, query) {
                    var populate, id = this.opts.id, liveRegion = this.liveRegion;
                    populate = function(results, container, depth) {
                        var i, l, result, selectable, disabled, compound, node, label, innerContainer, formatted;
                        results = opts.sortResults(results, container, query);
                        var nodes = [];
                        for (i = 0, l = results.length; i < l; i = i + 1) {
                            result = results[i];
                            disabled = result.disabled === true;
                            selectable = !disabled && id(result) !== undefined;
                            compound = result.children && result.children.length > 0;
                            node = $("<li></li>");
                            node.addClass("select2-results-dept-" + depth);
                            node.addClass("select2-result");
                            node.addClass(selectable ? "select2-result-selectable" : "select2-result-unselectable");
                            if (disabled) {
                                node.addClass("select2-disabled");
                            }
                            if (compound) {
                                node.addClass("select2-result-with-children");
                            }
                            node.addClass(self.opts.formatResultCssClass(result));
                            node.attr("role", "presentation");
                            label = $(document.createElement("div"));
                            label.addClass("select2-result-label");
                            label.attr("id", "select2-result-label-" + nextUid());
                            label.attr("role", "option");
                            formatted = opts.formatResult(result, label, query, self.opts.escapeMarkup);
                            if (formatted !== undefined) {
                                label.html(formatted);
                                node.append(label);
                            }
                            if (compound) {
                                innerContainer = $("<ul></ul>");
                                innerContainer.addClass("select2-result-sub");
                                populate(result.children, innerContainer, depth + 1);
                                node.append(innerContainer);
                            }
                            node.data("select2-data", result);
                            nodes.push(node[0]);
                        }
                        container.append(nodes);
                        liveRegion.text(opts.formatMatches(results.length));
                    };
                    populate(results, container, 0);
                }
            }, $.fn.select2.defaults, opts);
            if (typeof opts.id !== "function") {
                idKey = opts.id;
                opts.id = function(e) {
                    return e[idKey];
                };
            }
            if ($.isArray(opts.element.data("select2Tags"))) {
                if ("tags" in opts) {
                    throw "tags specified as both an attribute 'data-select2-tags' and in options of Select2 " + opts.element.attr("id");
                }
                opts.tags = opts.element.data("select2Tags");
            }
            if (select) {
                opts.query = this.bind(function(query) {
                    var data = {
                        "results": [],
                        "more": false
                    }, term = query.term, children, placeholderOption, process;
                    process = function(element, collection) {
                        var group;
                        if (element.is("option")) {
                            if (query.matcher(term, element.text(), element)) {
                                collection.push(self.optionToData(element));
                            }
                        } else if (element.is("optgroup")) {
                            group = self.optionToData(element);
                            element.children().each2(function(i, elm) {
                                process(elm, group.children);
                            });
                            if (group.children.length > 0) {
                                collection.push(group);
                            }
                        }
                    };
                    children = element.children();
                    if (this.getPlaceholder() !== undefined && children.length > 0) {
                        placeholderOption = this.getPlaceholderOption();
                        if (placeholderOption) {
                            children = children.not(placeholderOption);
                        }
                    }
                    children.each2(function(i, elm) {
                        process(elm, data.results);
                    });
                    query.callback(data);
                });
                opts.id = function(e) {
                    return e.id;
                };
            } else {
                if (!("query" in opts)) {
                    if ("ajax" in opts) {
                        ajaxUrl = opts.element.data("ajax-url");
                        if (ajaxUrl && ajaxUrl.length > 0) {
                            opts.ajax.url = ajaxUrl;
                        }
                        opts.query = ajax.call(opts.element, opts.ajax);
                    } else if ("data" in opts) {
                        opts.query = local(opts.data);
                    } else if ("tags" in opts) {
                        opts.query = tags(opts.tags);
                        if (opts.createSearchChoice === undefined) {
                            opts.createSearchChoice = function(term) {
                                return {
                                    "id": $.trim(term),
                                    "text": $.trim(term)
                                };
                            };
                        }
                        if (opts.initSelection === undefined) {
                            opts.initSelection = function(element, callback) {
                                var data = [];
                                $(splitVal(element.val(), opts.separator, opts.transformVal)).each(function() {
                                    var obj = {
                                        "id": this,
                                        "text": this
                                    }, tags = opts.tags;
                                    if ($.isFunction(tags)) tags = tags();
                                    $(tags).each(function() {
                                        if (equal(this.id, obj.id)) {
                                            obj = this;
                                            return false;
                                        }
                                    });
                                    data.push(obj);
                                });
                                callback(data);
                            };
                        }
                    }
                }
            }
            if (typeof opts.query !== "function") {
                throw "query function not defined for Select2 " + opts.element.attr("id");
            }
            if (opts.createSearchChoicePosition === "top") {
                opts.createSearchChoicePosition = function(list, item) {
                    list.unshift(item);
                };
            } else if (opts.createSearchChoicePosition === "bottom") {
                opts.createSearchChoicePosition = function(list, item) {
                    list.push(item);
                };
            } else if (typeof opts.createSearchChoicePosition !== "function") {
                throw "invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function";
            }
            return opts;
        },
        "monitorSource": function() {
            var el = this.opts.element, observer, self = this;
            el.on("change.select2", this.bind(function(e) {
                if (this.opts.element.data("select2-change-triggered") !== true) {
                    this.initSelection();
                }
            }));
            this._sync = this.bind(function() {
                var disabled = el.prop("disabled");
                if (disabled === undefined) disabled = false;
                this.enable(!disabled);
                var readonly = el.prop("readonly");
                if (readonly === undefined) readonly = false;
                this.readonly(readonly);
                if (this.container) {
                    syncCssClasses(this.container, this.opts.element, this.opts.adaptContainerCssClass);
                    this.container.addClass(evaluate(this.opts.containerCssClass, this.opts.element));
                }
                if (this.dropdown) {
                    syncCssClasses(this.dropdown, this.opts.element, this.opts.adaptDropdownCssClass);
                    this.dropdown.addClass(evaluate(this.opts.dropdownCssClass, this.opts.element));
                }
            });
            if (el.length && el[0].attachEvent) {
                el.each(function() {
                    this.attachEvent("onpropertychange", self._sync);
                });
            }
            observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
            if (observer !== undefined) {
                if (this.propertyObserver) {
                    delete this.propertyObserver;
                    this.propertyObserver = null;
                }
                this.propertyObserver = new observer(function(mutations) {
                    $.each(mutations, self._sync);
                });
                this.propertyObserver.observe(el.get(0), {
                    "attributes": true,
                    "subtree": false
                });
            }
        },
        "triggerSelect": function(data) {
            var evt = $.Event("select2-selecting", {
                "val": this.id(data),
                "object": data,
                "choice": data
            });
            this.opts.element.trigger(evt);
            return !evt.isDefaultPrevented();
        },
        "triggerChange": function(details) {
            details = details || {};
            details = $.extend({}, details, {
                "type": "change",
                "val": this.val()
            });
            this.opts.element.data("select2-change-triggered", true);
            this.opts.element.trigger(details);
            this.opts.element.data("select2-change-triggered", false);
            this.opts.element.click();
            if (this.opts.blurOnChange) this.opts.element.blur();
        },
        "isInterfaceEnabled": function() {
            return this.enabledInterface === true;
        },
        "enableInterface": function() {
            var enabled = this._enabled && !this._readonly, disabled = !enabled;
            if (enabled === this.enabledInterface) return false;
            this.container.toggleClass("select2-container-disabled", disabled);
            this.close();
            this.enabledInterface = enabled;
            return true;
        },
        "enable": function(enabled) {
            if (enabled === undefined) enabled = true;
            if (this._enabled === enabled) return;
            this._enabled = enabled;
            this.opts.element.prop("disabled", !enabled);
            this.enableInterface();
        },
        "disable": function() {
            this.enable(false);
        },
        "readonly": function(enabled) {
            if (enabled === undefined) enabled = false;
            if (this._readonly === enabled) return;
            this._readonly = enabled;
            this.opts.element.prop("readonly", enabled);
            this.enableInterface();
        },
        "opened": function() {
            return this.container ? this.container.hasClass("select2-dropdown-open") : false;
        },
        "positionDropdown": function() {
            var $dropdown = this.dropdown, container = this.container, offset = container.offset(), height = container.outerHeight(false), width = container.outerWidth(false), dropHeight = $dropdown.outerHeight(false), $window = $(window), windowWidth = $window.width(), windowHeight = $window.height(), viewPortRight = $window.scrollLeft() + windowWidth, viewportBottom = $window.scrollTop() + windowHeight, dropTop = offset.top + height, dropLeft = offset.left, enoughRoomBelow = dropTop + dropHeight <= viewportBottom, enoughRoomAbove = offset.top - dropHeight >= $window.scrollTop(), dropWidth = $dropdown.outerWidth(false), enoughRoomOnRight = function() {
                return dropLeft + dropWidth <= viewPortRight;
            }, enoughRoomOnLeft = function() {
                return offset.left + viewPortRight + container.outerWidth(false) > dropWidth;
            }, aboveNow = $dropdown.hasClass("select2-drop-above"), bodyOffset, above, changeDirection, css, resultsListNode;
            if (aboveNow) {
                above = true;
                if (!enoughRoomAbove && enoughRoomBelow) {
                    changeDirection = true;
                    above = false;
                }
            } else {
                above = false;
                if (!enoughRoomBelow && enoughRoomAbove) {
                    changeDirection = true;
                    above = true;
                }
            }
            if (changeDirection) {
                $dropdown.hide();
                offset = this.container.offset();
                height = this.container.outerHeight(false);
                width = this.container.outerWidth(false);
                dropHeight = $dropdown.outerHeight(false);
                viewPortRight = $window.scrollLeft() + windowWidth;
                viewportBottom = $window.scrollTop() + windowHeight;
                dropTop = offset.top + height;
                dropLeft = offset.left;
                dropWidth = $dropdown.outerWidth(false);
                $dropdown.show();
                this.focusSearch();
            }
            if (this.opts.dropdownAutoWidth) {
                resultsListNode = $(".select2-results", $dropdown)[0];
                $dropdown.addClass("select2-drop-auto-width");
                $dropdown.css("width", "");
                dropWidth = $dropdown.outerWidth(false) + (resultsListNode.scrollHeight === resultsListNode.clientHeight ? 0 : scrollBarDimensions.width);
                dropWidth > width ? width = dropWidth : dropWidth = width;
                dropHeight = $dropdown.outerHeight(false);
            } else {
                this.container.removeClass("select2-drop-auto-width");
            }
            if (this.body.css("position") !== "static") {
                bodyOffset = this.body.offset();
                dropTop -= bodyOffset.top;
                dropLeft -= bodyOffset.left;
            }
            if (!enoughRoomOnRight() && enoughRoomOnLeft()) {
                dropLeft = offset.left + this.container.outerWidth(false) - dropWidth;
            }
            css = {
                "left": dropLeft,
                "width": width
            };
            if (above) {
                this.container.addClass("select2-drop-above");
                $dropdown.addClass("select2-drop-above");
                dropHeight = $dropdown.outerHeight(false);
                css.top = offset.top - dropHeight;
                css.bottom = "auto";
            } else {
                css.top = dropTop;
                css.bottom = "auto";
                this.container.removeClass("select2-drop-above");
                $dropdown.removeClass("select2-drop-above");
            }
            css = $.extend(css, evaluate(this.opts.dropdownCss, this.opts.element));
            $dropdown.css(css);
        },
        "shouldOpen": function() {
            var event;
            if (this.opened()) return false;
            if (this._enabled === false || this._readonly === true) return false;
            event = $.Event("select2-opening");
            this.opts.element.trigger(event);
            return !event.isDefaultPrevented();
        },
        "clearDropdownAlignmentPreference": function() {
            this.container.removeClass("select2-drop-above");
            this.dropdown.removeClass("select2-drop-above");
        },
        "open": function() {
            if (!this.shouldOpen()) return false;
            this.opening();
            $document.on("mousemove.select2Event", function(e) {
                lastMousePosition.x = e.pageX;
                lastMousePosition.y = e.pageY;
            });
            return true;
        },
        "opening": function() {
            var cid = this.containerEventName, scroll = "scroll." + cid, resize = "resize." + cid, orient = "orientationchange." + cid, mask;
            this.container.addClass("select2-dropdown-open").addClass("select2-container-active");
            this.clearDropdownAlignmentPreference();
            if (this.dropdown[0] !== this.body.children().last()[0]) {
                this.dropdown.detach().appendTo(this.body);
            }
            mask = $("#select2-drop-mask");
            if (mask.length === 0) {
                mask = $(document.createElement("div"));
                mask.attr("id", "select2-drop-mask").attr("class", "select2-drop-mask");
                mask.hide();
                mask.appendTo(this.body);
                mask.on("mousedown touchstart click", function(e) {
                    reinsertElement(mask);
                    var dropdown = $("#select2-drop"), self;
                    if (dropdown.length > 0) {
                        self = dropdown.data("select2");
                        if (self.opts.selectOnBlur) {
                            self.selectHighlighted({
                                "noFocus": true
                            });
                        }
                        self.close();
                        e.preventDefault();
                        e.stopPropagation();
                    }
                });
            }
            if (this.dropdown.prev()[0] !== mask[0]) {
                this.dropdown.before(mask);
            }
            $("#select2-drop").removeAttr("id");
            this.dropdown.attr("id", "select2-drop");
            mask.show();
            this.positionDropdown();
            this.dropdown.show();
            this.positionDropdown();
            this.dropdown.addClass("select2-drop-active");
            var that = this;
            this.container.parents().add(window).each(function() {
                $(this).on(resize + " " + scroll + " " + orient, function(e) {
                    if (that.opened()) that.positionDropdown();
                });
            });
        },
        "close": function() {
            if (!this.opened()) return;
            var cid = this.containerEventName, scroll = "scroll." + cid, resize = "resize." + cid, orient = "orientationchange." + cid;
            this.container.parents().add(window).each(function() {
                $(this).off(scroll).off(resize).off(orient);
            });
            this.clearDropdownAlignmentPreference();
            $("#select2-drop-mask").hide();
            this.dropdown.removeAttr("id");
            this.dropdown.hide();
            this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active");
            this.results.empty();
            $document.off("mousemove.select2Event");
            this.clearSearch();
            this.search.removeClass("select2-active");
            this.search.removeAttr("aria-activedescendant");
            this.opts.element.trigger($.Event("select2-close"));
        },
        "externalSearch": function(term) {
            this.open();
            this.search.val(term);
            this.updateResults(false);
        },
        "clearSearch": function() {},
        "prefillNextSearchTerm": function() {
            if (this.search.val() !== "") {
                return false;
            }
            var nextSearchTerm = this.opts.nextSearchTerm(this.data(), this.lastSearchTerm);
            if (nextSearchTerm !== undefined) {
                this.search.val(nextSearchTerm);
                this.search.select();
                return true;
            }
            return false;
        },
        "getMaximumSelectionSize": function() {
            return evaluate(this.opts.maximumSelectionSize, this.opts.element);
        },
        "ensureHighlightVisible": function() {
            var results = this.results, children, index, child, hb, rb, y, more, topOffset;
            index = this.highlight();
            if (index < 0) return;
            if (index == 0) {
                results.scrollTop(0);
                return;
            }
            children = this.findHighlightableChoices().find(".select2-result-label");
            child = $(children[index]);
            topOffset = (child.offset() || {}).top || 0;
            hb = topOffset + child.outerHeight(true);
            if (index === children.length - 1) {
                more = results.find("li.select2-more-results");
                if (more.length > 0) {
                    hb = more.offset().top + more.outerHeight(true);
                }
            }
            rb = results.offset().top + results.outerHeight(false);
            if (hb > rb) {
                results.scrollTop(results.scrollTop() + (hb - rb));
            }
            y = topOffset - results.offset().top;
            if (y < 0 && child.css("display") != "none") {
                results.scrollTop(results.scrollTop() + y);
            }
        },
        "findHighlightableChoices": function() {
            return this.results.find(".select2-result-selectable:not(.select2-disabled):not(.select2-selected)");
        },
        "moveHighlight": function(delta) {
            var choices = this.findHighlightableChoices(), index = this.highlight();
            while (index > -1 && index < choices.length) {
                index += delta;
                var choice = $(choices[index]);
                if (choice.hasClass("select2-result-selectable") && !choice.hasClass("select2-disabled") && !choice.hasClass("select2-selected")) {
                    this.highlight(index);
                    break;
                }
            }
        },
        "highlight": function(index) {
            var choices = this.findHighlightableChoices(), choice, data;
            if (arguments.length === 0) {
                return indexOf(choices.filter(".select2-highlighted")[0], choices.get());
            }
            if (index >= choices.length) index = choices.length - 1;
            if (index < 0) index = 0;
            this.removeHighlight();
            choice = $(choices[index]);
            choice.addClass("select2-highlighted");
            this.search.attr("aria-activedescendant", choice.find(".select2-result-label").attr("id"));
            this.ensureHighlightVisible();
            this.liveRegion.text(choice.text());
            data = choice.data("select2-data");
            if (data) {
                this.opts.element.trigger({
                    "type": "select2-highlight",
                    "val": this.id(data),
                    "choice": data
                });
            }
        },
        "removeHighlight": function() {
            this.results.find(".select2-highlighted").removeClass("select2-highlighted");
        },
        "touchMoved": function() {
            this._touchMoved = true;
        },
        "clearTouchMoved": function() {
            this._touchMoved = false;
        },
        "countSelectableResults": function() {
            return this.findHighlightableChoices().length;
        },
        "highlightUnderEvent": function(event) {
            var el = $(event.target).closest(".select2-result-selectable");
            if (el.length > 0 && !el.is(".select2-highlighted")) {
                var choices = this.findHighlightableChoices();
                this.highlight(choices.index(el));
            } else if (el.length == 0) {
                this.removeHighlight();
            }
        },
        "loadMoreIfNeeded": function() {
            var results = this.results, more = results.find("li.select2-more-results"), below, page = this.resultsPage + 1, self = this, term = this.search.val(), context = this.context;
            if (more.length === 0) return;
            below = more.offset().top - results.offset().top - results.height();
            if (below <= this.opts.loadMorePadding) {
                more.addClass("select2-active");
                this.opts.query({
                    "element": this.opts.element,
                    "term": term,
                    "page": page,
                    "context": context,
                    "matcher": this.opts.matcher,
                    "callback": this.bind(function(data) {
                        if (!self.opened()) return;
                        self.opts.populateResults.call(this, results, data.results, {
                            "term": term,
                            "page": page,
                            "context": context
                        });
                        self.postprocessResults(data, false, false);
                        if (data.more === true) {
                            more.detach().appendTo(results).html(self.opts.escapeMarkup(evaluate(self.opts.formatLoadMore, self.opts.element, page + 1)));
                            window.setTimeout(function() {
                                self.loadMoreIfNeeded();
                            }, 10);
                        } else {
                            more.remove();
                        }
                        self.positionDropdown();
                        self.resultsPage = page;
                        self.context = data.context;
                        this.opts.element.trigger({
                            "type": "select2-loaded",
                            "items": data
                        });
                    })
                });
            }
        },
        "tokenize": function() {},
        "updateResults": function(initial) {
            var search = this.search, results = this.results, opts = this.opts, data, self = this, input, term = search.val(), lastTerm = $.data(this.container, "select2-last-term"), queryNumber;
            if (initial !== true && lastTerm && equal(term, lastTerm)) return;
            $.data(this.container, "select2-last-term", term);
            if (initial !== true && (this.showSearchInput === false || !this.opened())) {
                return;
            }
            function postRender() {
                search.removeClass("select2-active");
                self.positionDropdown();
                if (results.find(".select2-no-results,.select2-selection-limit,.select2-searching").length) {
                    self.liveRegion.text(results.text());
                } else {
                    self.liveRegion.text(self.opts.formatMatches(results.find('.select2-result-selectable:not(".select2-selected")').length));
                }
            }
            function render(html) {
                results.html(html);
                postRender();
            }
            queryNumber = ++this.queryCount;
            var maxSelSize = this.getMaximumSelectionSize();
            if (maxSelSize >= 1) {
                data = this.data();
                if ($.isArray(data) && data.length >= maxSelSize && checkFormatter(opts.formatSelectionTooBig, "formatSelectionTooBig")) {
                    render("<li class='select2-selection-limit'>" + evaluate(opts.formatSelectionTooBig, opts.element, maxSelSize) + "</li>");
                    return;
                }
            }
            if (search.val().length < opts.minimumInputLength) {
                if (checkFormatter(opts.formatInputTooShort, "formatInputTooShort")) {
                    render("<li class='select2-no-results'>" + evaluate(opts.formatInputTooShort, opts.element, search.val(), opts.minimumInputLength) + "</li>");
                } else {
                    render("");
                }
                if (initial && this.showSearch) this.showSearch(true);
                return;
            }
            if (opts.maximumInputLength && search.val().length > opts.maximumInputLength) {
                if (checkFormatter(opts.formatInputTooLong, "formatInputTooLong")) {
                    render("<li class='select2-no-results'>" + evaluate(opts.formatInputTooLong, opts.element, search.val(), opts.maximumInputLength) + "</li>");
                } else {
                    render("");
                }
                return;
            }
            if (opts.formatSearching && this.findHighlightableChoices().length === 0) {
                render("<li class='select2-searching'>" + evaluate(opts.formatSearching, opts.element) + "</li>");
            }
            search.addClass("select2-active");
            this.removeHighlight();
            input = this.tokenize();
            if (input != undefined && input != null) {
                search.val(input);
            }
            this.resultsPage = 1;
            opts.query({
                "element": opts.element,
                "term": search.val(),
                "page": this.resultsPage,
                "context": null,
                "matcher": opts.matcher,
                "callback": this.bind(function(data) {
                    var def;
                    if (queryNumber != this.queryCount) {
                        return;
                    }
                    if (!this.opened()) {
                        this.search.removeClass("select2-active");
                        return;
                    }
                    if (data.hasError !== undefined && checkFormatter(opts.formatAjaxError, "formatAjaxError")) {
                        render("<li class='select2-ajax-error'>" + evaluate(opts.formatAjaxError, opts.element, data.jqXHR, data.textStatus, data.errorThrown) + "</li>");
                        return;
                    }
                    this.context = data.context === undefined ? null : data.context;
                    if (this.opts.createSearchChoice && search.val() !== "") {
                        def = this.opts.createSearchChoice.call(self, search.val(), data.results);
                        if (def !== undefined && def !== null && self.id(def) !== undefined && self.id(def) !== null) {
                            if ($(data.results).filter(function() {
                                return equal(self.id(this), self.id(def));
                            }).length === 0) {
                                this.opts.createSearchChoicePosition(data.results, def);
                            }
                        }
                    }
                    if (data.results.length === 0 && checkFormatter(opts.formatNoMatches, "formatNoMatches")) {
                        render("<li class='select2-no-results'>" + evaluate(opts.formatNoMatches, opts.element, search.val()) + "</li>");
                        if (this.showSearch) {
                            this.showSearch(search.val());
                        }
                        return;
                    }
                    results.empty();
                    self.opts.populateResults.call(this, results, data.results, {
                        "term": search.val(),
                        "page": this.resultsPage,
                        "context": null
                    });
                    if (data.more === true && checkFormatter(opts.formatLoadMore, "formatLoadMore")) {
                        results.append("<li class='select2-more-results'>" + opts.escapeMarkup(evaluate(opts.formatLoadMore, opts.element, this.resultsPage)) + "</li>");
                        window.setTimeout(function() {
                            self.loadMoreIfNeeded();
                        }, 10);
                    }
                    this.postprocessResults(data, initial);
                    postRender();
                    this.opts.element.trigger({
                        "type": "select2-loaded",
                        "items": data
                    });
                })
            });
        },
        "cancel": function() {
            this.close();
        },
        "blur": function() {
            if (this.opts.selectOnBlur) this.selectHighlighted({
                "noFocus": true
            });
            this.close();
            this.container.removeClass("select2-container-active");
            if (this.search[0] === document.activeElement) {
                this.search.blur();
            }
            this.clearSearch();
            this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
        },
        "focusSearch": function() {
            focus(this.search);
        },
        "selectHighlighted": function(options) {
            if (this._touchMoved) {
                this.clearTouchMoved();
                return;
            }
            var index = this.highlight(), highlighted = this.results.find(".select2-highlighted"), data = highlighted.closest(".select2-result").data("select2-data");
            if (data) {
                this.highlight(index);
                this.onSelect(data, options);
            } else if (options && options.noFocus) {
                this.close();
            }
        },
        "getPlaceholder": function() {
            var placeholderOption;
            return this.opts.element.attr("placeholder") || this.opts.element.attr("data-placeholder") || this.opts.element.data("placeholder") || this.opts.placeholder || ((placeholderOption = this.getPlaceholderOption()) !== undefined ? placeholderOption.text() : undefined);
        },
        "getPlaceholderOption": function() {
            if (this.select) {
                var firstOption = this.select.children("option").first();
                if (this.opts.placeholderOption !== undefined) {
                    return this.opts.placeholderOption === "first" && firstOption || typeof this.opts.placeholderOption === "function" && this.opts.placeholderOption(this.select);
                } else if ($.trim(firstOption.text()) === "" && firstOption.val() === "") {
                    return firstOption;
                }
            }
        },
        "initContainerWidth": function() {
            function resolveContainerWidth() {
                var style, attrs, matches, i, l, attr;
                if (this.opts.width === "off") {
                    return null;
                } else if (this.opts.width === "element") {
                    return this.opts.element.outerWidth(false) === 0 ? "auto" : this.opts.element.outerWidth(false) + "px";
                } else if (this.opts.width === "copy" || this.opts.width === "resolve") {
                    style = this.opts.element.attr("style");
                    if (typeof style === "string") {
                        attrs = style.split(";");
                        for (i = 0, l = attrs.length; i < l; i = i + 1) {
                            attr = attrs[i].replace(/\s/g, "");
                            matches = attr.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i);
                            if (matches !== null && matches.length >= 1) return matches[1];
                        }
                    }
                    if (this.opts.width === "resolve") {
                        style = this.opts.element.css("width");
                        if (style.indexOf("%") > 0) return style;
                        return this.opts.element.outerWidth(false) === 0 ? "auto" : this.opts.element.outerWidth(false) + "px";
                    }
                    return null;
                } else if ($.isFunction(this.opts.width)) {
                    return this.opts.width();
                } else {
                    return this.opts.width;
                }
            }
            var width = resolveContainerWidth.call(this);
            if (width !== null) {
                this.container.css("width", width);
            }
        }
    });
    SingleSelect2 = clazz(AbstractSelect2, {
        "createContainer": function() {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container"
            }).html([ "<a href='javascript:void(0)' class='select2-choice' tabindex='-1'>", "   <span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr>", "   <span class='select2-arrow' role='presentation'><b role='presentation'></b></span>", "</a>", "<label for='' class='select2-offscreen'></label>", "<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />", "<div class='select2-drop select2-display-none'>", "   <div class='select2-search'>", "       <label for='' class='select2-offscreen'></label>", "       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'", "       aria-autocomplete='list' />", "   </div>", "   <ul class='select2-results' role='listbox'>", "   </ul>", "</div>" ].join(""));
            return container;
        },
        "enableInterface": function() {
            if (this.parent.enableInterface.apply(this, arguments)) {
                this.focusser.prop("disabled", !this.isInterfaceEnabled());
            }
        },
        "opening": function() {
            var el, range, len;
            if (this.opts.minimumResultsForSearch >= 0) {
                this.showSearch(true);
            }
            this.parent.opening.apply(this, arguments);
            if (this.showSearchInput !== false) {
                this.search.val(this.focusser.val());
            }
            if (this.opts.shouldFocusInput(this)) {
                this.search.focus();
                el = this.search.get(0);
                if (el.createTextRange) {
                    range = el.createTextRange();
                    range.collapse(false);
                    range.select();
                } else if (el.setSelectionRange) {
                    len = this.search.val().length;
                    el.setSelectionRange(len, len);
                }
            }
            this.prefillNextSearchTerm();
            this.focusser.prop("disabled", true).val("");
            this.updateResults(true);
            this.opts.element.trigger($.Event("select2-open"));
        },
        "close": function() {
            if (!this.opened()) return;
            this.parent.close.apply(this, arguments);
            this.focusser.prop("disabled", false);
            if (this.opts.shouldFocusInput(this)) {
                this.focusser.focus();
            }
        },
        "focus": function() {
            if (this.opened()) {
                this.close();
            } else {
                this.focusser.prop("disabled", false);
                if (this.opts.shouldFocusInput(this)) {
                    this.focusser.focus();
                }
            }
        },
        "isFocused": function() {
            return this.container.hasClass("select2-container-active");
        },
        "cancel": function() {
            this.parent.cancel.apply(this, arguments);
            this.focusser.prop("disabled", false);
            if (this.opts.shouldFocusInput(this)) {
                this.focusser.focus();
            }
        },
        "destroy": function() {
            $("label[for='" + this.focusser.attr("id") + "']").attr("for", this.opts.element.attr("id"));
            this.parent.destroy.apply(this, arguments);
            cleanupJQueryElements.call(this, "selection", "focusser");
        },
        "initContainer": function() {
            var selection, container = this.container, dropdown = this.dropdown, idSuffix = nextUid(), elementLabel;
            if (this.opts.minimumResultsForSearch < 0) {
                this.showSearch(false);
            } else {
                this.showSearch(true);
            }
            this.selection = selection = container.find(".select2-choice");
            this.focusser = container.find(".select2-focusser");
            selection.find(".select2-chosen").attr("id", "select2-chosen-" + idSuffix);
            this.focusser.attr("aria-labelledby", "select2-chosen-" + idSuffix);
            this.results.attr("id", "select2-results-" + idSuffix);
            this.search.attr("aria-owns", "select2-results-" + idSuffix);
            this.focusser.attr("id", "s2id_autogen" + idSuffix);
            elementLabel = $("label[for='" + this.opts.element.attr("id") + "']");
            this.opts.element.on("focus.select2", this.bind(function() {
                this.focus();
            }));
            this.focusser.prev().text(elementLabel.text()).attr("for", this.focusser.attr("id"));
            var originalTitle = this.opts.element.attr("title");
            this.opts.element.attr("title", originalTitle || elementLabel.text());
            this.focusser.attr("tabindex", this.elementTabIndex);
            this.search.attr("id", this.focusser.attr("id") + "_search");
            this.search.prev().text($("label[for='" + this.focusser.attr("id") + "']").text()).attr("for", this.search.attr("id"));
            this.search.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if (229 == e.keyCode) return;
                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                    killEvent(e);
                    return;
                }
                switch (e.which) {
                  case KEY.UP:
                  case KEY.DOWN:
                    this.moveHighlight(e.which === KEY.UP ? -1 : 1);
                    killEvent(e);
                    return;

                  case KEY.ENTER:
                    this.selectHighlighted();
                    killEvent(e);
                    return;

                  case KEY.TAB:
                    this.selectHighlighted({
                        "noFocus": true
                    });
                    return;

                  case KEY.ESC:
                    this.cancel(e);
                    killEvent(e);
                    return;
                }
            }));
            this.search.on("blur", this.bind(function(e) {
                if (document.activeElement === this.body.get(0)) {
                    window.setTimeout(this.bind(function() {
                        if (this.opened() && this.results && this.results.length > 1) {
                            this.search.focus();
                        }
                    }), 0);
                }
            }));
            this.focusser.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
                    return;
                }
                if (this.opts.openOnEnter === false && e.which === KEY.ENTER) {
                    killEvent(e);
                    return;
                }
                if (e.which == KEY.DOWN || e.which == KEY.UP || e.which == KEY.ENTER && this.opts.openOnEnter) {
                    if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) return;
                    this.open();
                    killEvent(e);
                    return;
                }
                if (e.which == KEY.DELETE || e.which == KEY.BACKSPACE) {
                    if (this.opts.allowClear) {
                        this.clear();
                    }
                    killEvent(e);
                    return;
                }
            }));
            installKeyUpChangeEvent(this.focusser);
            this.focusser.on("keyup-change input", this.bind(function(e) {
                if (this.opts.minimumResultsForSearch >= 0) {
                    e.stopPropagation();
                    if (this.opened()) return;
                    this.open();
                }
            }));
            selection.on("mousedown touchstart", "abbr", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) {
                    return;
                }
                this.clear();
                killEventImmediately(e);
                this.close();
                if (this.selection) {
                    this.selection.focus();
                }
            }));
            selection.on("mousedown touchstart", this.bind(function(e) {
                reinsertElement(selection);
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                if (this.opened()) {
                    this.close();
                } else if (this.isInterfaceEnabled()) {
                    this.open();
                }
                killEvent(e);
            }));
            dropdown.on("mousedown touchstart", this.bind(function() {
                if (this.opts.shouldFocusInput(this)) {
                    this.search.focus();
                }
            }));
            selection.on("focus", this.bind(function(e) {
                killEvent(e);
            }));
            this.focusser.on("focus", this.bind(function() {
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                this.container.addClass("select2-container-active");
            })).on("blur", this.bind(function() {
                if (!this.opened()) {
                    this.container.removeClass("select2-container-active");
                    this.opts.element.trigger($.Event("select2-blur"));
                }
            }));
            this.search.on("focus", this.bind(function() {
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                this.container.addClass("select2-container-active");
            }));
            this.initContainerWidth();
            this.opts.element.hide();
            this.setPlaceholder();
        },
        "clear": function(triggerChange) {
            var data = this.selection.data("select2-data");
            if (data) {
                var evt = $.Event("select2-clearing");
                this.opts.element.trigger(evt);
                if (evt.isDefaultPrevented()) {
                    return;
                }
                var placeholderOption = this.getPlaceholderOption();
                this.opts.element.val(placeholderOption ? placeholderOption.val() : "");
                this.selection.find(".select2-chosen").empty();
                this.selection.removeData("select2-data");
                this.setPlaceholder();
                if (triggerChange !== false) {
                    this.opts.element.trigger({
                        "type": "select2-removed",
                        "val": this.id(data),
                        "choice": data
                    });
                    this.triggerChange({
                        "removed": data
                    });
                }
            }
        },
        "initSelection": function() {
            var selected;
            if (this.isPlaceholderOptionSelected()) {
                this.updateSelection(null);
                this.close();
                this.setPlaceholder();
            } else {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(selected) {
                    if (selected !== undefined && selected !== null) {
                        self.updateSelection(selected);
                        self.close();
                        self.setPlaceholder();
                        self.lastSearchTerm = self.search && self.search.val();
                    }
                });
            }
        },
        "isPlaceholderOptionSelected": function() {
            var placeholderOption;
            if (this.getPlaceholder() === undefined) return false;
            return (placeholderOption = this.getPlaceholderOption()) !== undefined && placeholderOption.prop("selected") || this.opts.element.val() === "" || this.opts.element.val() === undefined || this.opts.element.val() === null;
        },
        "prepareOpts": function() {
            var opts = this.parent.prepareOpts.apply(this, arguments), self = this;
            if (opts.element.get(0).tagName.toLowerCase() === "select") {
                opts.initSelection = function(element, callback) {
                    var selected = element.find("option").filter(function() {
                        return this.selected && !this.disabled;
                    });
                    callback(self.optionToData(selected));
                };
            } else if ("data" in opts) {
                opts.initSelection = opts.initSelection || function(element, callback) {
                    var id = element.val();
                    var match = null;
                    opts.query({
                        "matcher": function(term, text, el) {
                            var is_match = equal(id, opts.id(el));
                            if (is_match) {
                                match = el;
                            }
                            return is_match;
                        },
                        "callback": !$.isFunction(callback) ? $.noop : function() {
                            callback(match);
                        }
                    });
                };
            }
            return opts;
        },
        "getPlaceholder": function() {
            if (this.select) {
                if (this.getPlaceholderOption() === undefined) {
                    return undefined;
                }
            }
            return this.parent.getPlaceholder.apply(this, arguments);
        },
        "setPlaceholder": function() {
            var placeholder = this.getPlaceholder();
            if (this.isPlaceholderOptionSelected() && placeholder !== undefined) {
                if (this.select && this.getPlaceholderOption() === undefined) return;
                this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(placeholder));
                this.selection.addClass("select2-default");
                this.container.removeClass("select2-allowclear");
            }
        },
        "postprocessResults": function(data, initial, noHighlightUpdate) {
            var selected = 0, self = this, showSearchInput = true;
            this.findHighlightableChoices().each2(function(i, elm) {
                if (equal(self.id(elm.data("select2-data")), self.opts.element.val())) {
                    selected = i;
                    return false;
                }
            });
            if (noHighlightUpdate !== false) {
                if (initial === true && selected >= 0) {
                    this.highlight(selected);
                } else {
                    this.highlight(0);
                }
            }
            if (initial === true) {
                var min = this.opts.minimumResultsForSearch;
                if (min >= 0) {
                    this.showSearch(countResults(data.results) >= min);
                }
            }
        },
        "showSearch": function(showSearchInput) {
            if (this.showSearchInput === showSearchInput) return;
            this.showSearchInput = showSearchInput;
            this.dropdown.find(".select2-search").toggleClass("select2-search-hidden", !showSearchInput);
            this.dropdown.find(".select2-search").toggleClass("select2-offscreen", !showSearchInput);
            $(this.dropdown, this.container).toggleClass("select2-with-searchbox", showSearchInput);
        },
        "onSelect": function(data, options) {
            if (!this.triggerSelect(data)) {
                return;
            }
            var old = this.opts.element.val(), oldData = this.data();
            this.opts.element.val(this.id(data));
            this.updateSelection(data);
            this.opts.element.trigger({
                "type": "select2-selected",
                "val": this.id(data),
                "choice": data
            });
            this.lastSearchTerm = this.search.val();
            this.close();
            if ((!options || !options.noFocus) && this.opts.shouldFocusInput(this)) {
                this.focusser.focus();
            }
            if (!equal(old, this.id(data))) {
                this.triggerChange({
                    "added": data,
                    "removed": oldData
                });
            }
        },
        "updateSelection": function(data) {
            if (!this.selection) {
                return;
            }
            var container = this.selection.find(".select2-chosen"), formatted, cssClass;
            this.selection.data("select2-data", data);
            container.empty();
            if (data !== null) {
                formatted = this.opts.formatSelection(data, container, this.opts.escapeMarkup);
            }
            if (formatted !== undefined) {
                container.append(formatted);
            }
            cssClass = this.opts.formatSelectionCssClass(data, container);
            if (cssClass !== undefined) {
                container.addClass(cssClass);
            }
            this.selection.removeClass("select2-default");
            if (this.opts.allowClear && this.getPlaceholder() !== undefined) {
                this.container.addClass("select2-allowclear");
            }
        },
        "val": function() {
            var val, triggerChange = false, data = null, self = this, oldData = this.data();
            if (arguments.length === 0) {
                return this.opts.element.val();
            }
            val = arguments[0];
            if (arguments.length > 1) {
                triggerChange = arguments[1];
                if (this.opts.debug && console && console.warn) {
                    console.warn('Select2: The second option to `select2("val")` is not supported in Select2 4.0.0. ' + "The `change` event will always be triggered in 4.0.0.");
                }
            }
            if (this.select) {
                if (this.opts.debug && console && console.warn) {
                    console.warn('Select2: Setting the value on a <select> using `select2("val")` is no longer supported in 4.0.0. ' + 'You can use the `.val(newValue).trigger("change")` method provided by jQuery instead.');
                }
                this.select.val(val).find("option").filter(function() {
                    return this.selected;
                }).each2(function(i, elm) {
                    data = self.optionToData(elm);
                    return false;
                });
                this.updateSelection(data);
                this.setPlaceholder();
                if (triggerChange) {
                    this.triggerChange({
                        "added": data,
                        "removed": oldData
                    });
                }
            } else {
                if (!val && val !== 0) {
                    this.clear(triggerChange);
                    return;
                }
                if (this.opts.initSelection === undefined) {
                    throw new Error("cannot call val() if initSelection() is not defined");
                }
                this.opts.element.val(val);
                this.opts.initSelection(this.opts.element, function(data) {
                    self.opts.element.val(!data ? "" : self.id(data));
                    self.updateSelection(data);
                    self.setPlaceholder();
                    if (triggerChange) {
                        self.triggerChange({
                            "added": data,
                            "removed": oldData
                        });
                    }
                });
            }
        },
        "clearSearch": function() {
            this.search.val("");
            this.focusser.val("");
        },
        "data": function(value) {
            var data, triggerChange = false;
            if (arguments.length === 0) {
                data = this.selection.data("select2-data");
                if (data == undefined) data = null;
                return data;
            } else {
                if (this.opts.debug && console && console.warn) {
                    console.warn('Select2: The `select2("data")` method can no longer set selected values in 4.0.0, ' + "consider using the `.val()` method instead.");
                }
                if (arguments.length > 1) {
                    triggerChange = arguments[1];
                }
                if (!value) {
                    this.clear(triggerChange);
                } else {
                    data = this.data();
                    this.opts.element.val(!value ? "" : this.id(value));
                    this.updateSelection(value);
                    if (triggerChange) {
                        this.triggerChange({
                            "added": value,
                            "removed": data
                        });
                    }
                }
            }
        }
    });
    MultiSelect2 = clazz(AbstractSelect2, {
        "createContainer": function() {
            var container = $(document.createElement("div")).attr({
                "class": "select2-container select2-container-multi"
            }).html([ "<ul class='select2-choices'>", "  <li class='select2-search-field'>", "    <label for='' class='select2-offscreen'></label>", "    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>", "  </li>", "</ul>", "<div class='select2-drop select2-drop-multi select2-display-none'>", "   <ul class='select2-results'>", "   </ul>", "</div>" ].join(""));
            return container;
        },
        "prepareOpts": function() {
            var opts = this.parent.prepareOpts.apply(this, arguments), self = this;
            if (opts.element.get(0).tagName.toLowerCase() === "select") {
                opts.initSelection = function(element, callback) {
                    var data = [];
                    element.find("option").filter(function() {
                        return this.selected && !this.disabled;
                    }).each2(function(i, elm) {
                        data.push(self.optionToData(elm));
                    });
                    callback(data);
                };
            } else if ("data" in opts) {
                opts.initSelection = opts.initSelection || function(element, callback) {
                    var ids = splitVal(element.val(), opts.separator, opts.transformVal);
                    var matches = [];
                    opts.query({
                        "matcher": function(term, text, el) {
                            var is_match = $.grep(ids, function(id) {
                                return equal(id, opts.id(el));
                            }).length;
                            if (is_match) {
                                matches.push(el);
                            }
                            return is_match;
                        },
                        "callback": !$.isFunction(callback) ? $.noop : function() {
                            var ordered = [];
                            for (var i = 0; i < ids.length; i++) {
                                var id = ids[i];
                                for (var j = 0; j < matches.length; j++) {
                                    var match = matches[j];
                                    if (equal(id, opts.id(match))) {
                                        ordered.push(match);
                                        matches.splice(j, 1);
                                        break;
                                    }
                                }
                            }
                            callback(ordered);
                        }
                    });
                };
            }
            return opts;
        },
        "selectChoice": function(choice) {
            var selected = this.container.find(".select2-search-choice-focus");
            if (selected.length && choice && choice[0] == selected[0]) {} else {
                if (selected.length) {
                    this.opts.element.trigger("choice-deselected", selected);
                }
                selected.removeClass("select2-search-choice-focus");
                if (choice && choice.length) {
                    this.close();
                    choice.addClass("select2-search-choice-focus");
                    this.opts.element.trigger("choice-selected", choice);
                }
            }
        },
        "destroy": function() {
            $("label[for='" + this.search.attr("id") + "']").attr("for", this.opts.element.attr("id"));
            this.parent.destroy.apply(this, arguments);
            cleanupJQueryElements.call(this, "searchContainer", "selection");
        },
        "initContainer": function() {
            var selector = ".select2-choices", selection;
            this.searchContainer = this.container.find(".select2-search-field");
            this.selection = selection = this.container.find(selector);
            var _this = this;
            this.selection.on("click", ".select2-container:not(.select2-container-disabled) .select2-search-choice:not(.select2-locked)", function(e) {
                _this.search[0].focus();
                _this.selectChoice($(this));
            });
            this.search.attr("id", "s2id_autogen" + nextUid());
            this.search.prev().text($("label[for='" + this.opts.element.attr("id") + "']").text()).attr("for", this.search.attr("id"));
            this.opts.element.on("focus.select2", this.bind(function() {
                this.focus();
            }));
            this.search.on("input paste", this.bind(function() {
                if (this.search.attr("placeholder") && this.search.val().length == 0) return;
                if (!this.isInterfaceEnabled()) return;
                if (!this.opened()) {
                    this.open();
                }
            }));
            this.search.attr("tabindex", this.elementTabIndex);
            this.keydowns = 0;
            this.search.on("keydown", this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                ++this.keydowns;
                var selected = selection.find(".select2-search-choice-focus");
                var prev = selected.prev(".select2-search-choice:not(.select2-locked)");
                var next = selected.next(".select2-search-choice:not(.select2-locked)");
                var pos = getCursorInfo(this.search);
                if (selected.length && (e.which == KEY.LEFT || e.which == KEY.RIGHT || e.which == KEY.BACKSPACE || e.which == KEY.DELETE || e.which == KEY.ENTER)) {
                    var selectedChoice = selected;
                    if (e.which == KEY.LEFT && prev.length) {
                        selectedChoice = prev;
                    } else if (e.which == KEY.RIGHT) {
                        selectedChoice = next.length ? next : null;
                    } else if (e.which === KEY.BACKSPACE) {
                        if (this.unselect(selected.first())) {
                            this.search.width(10);
                            selectedChoice = prev.length ? prev : next;
                        }
                    } else if (e.which == KEY.DELETE) {
                        if (this.unselect(selected.first())) {
                            this.search.width(10);
                            selectedChoice = next.length ? next : null;
                        }
                    } else if (e.which == KEY.ENTER) {
                        selectedChoice = null;
                    }
                    this.selectChoice(selectedChoice);
                    killEvent(e);
                    if (!selectedChoice || !selectedChoice.length) {
                        this.open();
                    }
                    return;
                } else if ((e.which === KEY.BACKSPACE && this.keydowns == 1 || e.which == KEY.LEFT) && (pos.offset == 0 && !pos.length)) {
                    this.selectChoice(selection.find(".select2-search-choice:not(.select2-locked)").last());
                    killEvent(e);
                    return;
                } else {
                    this.selectChoice(null);
                }
                if (this.opened()) {
                    switch (e.which) {
                      case KEY.UP:
                      case KEY.DOWN:
                        this.moveHighlight(e.which === KEY.UP ? -1 : 1);
                        killEvent(e);
                        return;

                      case KEY.ENTER:
                        this.selectHighlighted();
                        killEvent(e);
                        return;

                      case KEY.TAB:
                        this.selectHighlighted({
                            "noFocus": true
                        });
                        this.close();
                        return;

                      case KEY.ESC:
                        this.cancel(e);
                        killEvent(e);
                        return;
                    }
                }
                if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.BACKSPACE || e.which === KEY.ESC) {
                    return;
                }
                if (e.which === KEY.ENTER) {
                    if (this.opts.openOnEnter === false) {
                        return;
                    } else if (e.altKey || e.ctrlKey || e.shiftKey || e.metaKey) {
                        return;
                    }
                }
                this.open();
                if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                    killEvent(e);
                }
                if (e.which === KEY.ENTER) {
                    killEvent(e);
                }
            }));
            this.search.on("keyup", this.bind(function(e) {
                this.keydowns = 0;
                this.resizeSearch();
            }));
            this.search.on("blur", this.bind(function(e) {
                this.container.removeClass("select2-container-active");
                this.search.removeClass("select2-focused");
                this.selectChoice(null);
                if (!this.opened()) this.clearSearch();
                e.stopImmediatePropagation();
                this.opts.element.trigger($.Event("select2-blur"));
            }));
            this.container.on("click", selector, this.bind(function(e) {
                if (!this.isInterfaceEnabled()) return;
                if ($(e.target).closest(".select2-search-choice").length > 0) {
                    return;
                }
                this.selectChoice(null);
                this.clearPlaceholder();
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                this.open();
                this.focusSearch();
                e.preventDefault();
            }));
            this.container.on("focus", selector, this.bind(function() {
                if (!this.isInterfaceEnabled()) return;
                if (!this.container.hasClass("select2-container-active")) {
                    this.opts.element.trigger($.Event("select2-focus"));
                }
                this.container.addClass("select2-container-active");
                this.dropdown.addClass("select2-drop-active");
                this.clearPlaceholder();
            }));
            this.initContainerWidth();
            this.opts.element.hide();
            this.clearSearch();
        },
        "enableInterface": function() {
            if (this.parent.enableInterface.apply(this, arguments)) {
                this.search.prop("disabled", !this.isInterfaceEnabled());
            }
        },
        "initSelection": function() {
            var data;
            if (this.opts.element.val() === "" && this.opts.element.text() === "") {
                this.updateSelection([]);
                this.close();
                this.clearSearch();
            }
            if (this.select || this.opts.element.val() !== "") {
                var self = this;
                this.opts.initSelection.call(null, this.opts.element, function(data) {
                    if (data !== undefined && data !== null) {
                        self.updateSelection(data);
                        self.close();
                        self.clearSearch();
                    }
                });
            }
        },
        "clearSearch": function() {
            var placeholder = this.getPlaceholder(), maxWidth = this.getMaxSearchWidth();
            if (placeholder !== undefined && this.getVal().length === 0 && this.search.hasClass("select2-focused") === false) {
                this.search.val(placeholder).addClass("select2-default");
                this.search.width(maxWidth > 0 ? maxWidth : this.container.css("width"));
            } else {
                this.search.val("").width(10);
            }
        },
        "clearPlaceholder": function() {
            if (this.search.hasClass("select2-default")) {
                this.search.val("").removeClass("select2-default");
            }
        },
        "opening": function() {
            this.clearPlaceholder();
            this.resizeSearch();
            this.parent.opening.apply(this, arguments);
            this.focusSearch();
            this.prefillNextSearchTerm();
            this.updateResults(true);
            if (this.opts.shouldFocusInput(this)) {
                this.search.focus();
            }
            this.opts.element.trigger($.Event("select2-open"));
        },
        "close": function() {
            if (!this.opened()) return;
            this.parent.close.apply(this, arguments);
        },
        "focus": function() {
            this.close();
            this.search.focus();
        },
        "isFocused": function() {
            return this.search.hasClass("select2-focused");
        },
        "updateSelection": function(data) {
            var ids = {}, filtered = [], self = this;
            $(data).each(function() {
                if (!(self.id(this) in ids)) {
                    ids[self.id(this)] = 0;
                    filtered.push(this);
                }
            });
            this.selection.find(".select2-search-choice").remove();
            this.addSelectedChoice(filtered);
            self.postprocessResults();
        },
        "tokenize": function() {
            var input = this.search.val();
            input = this.opts.tokenizer.call(this, input, this.data(), this.bind(this.onSelect), this.opts);
            if (input != null && input != undefined) {
                this.search.val(input);
                if (input.length > 0) {
                    this.open();
                }
            }
        },
        "onSelect": function(data, options) {
            if (!this.triggerSelect(data) || data.text === "") {
                return;
            }
            this.addSelectedChoice(data);
            this.opts.element.trigger({
                "type": "selected",
                "val": this.id(data),
                "choice": data
            });
            this.lastSearchTerm = this.search.val();
            this.clearSearch();
            this.updateResults();
            if (this.select || !this.opts.closeOnSelect) this.postprocessResults(data, false, this.opts.closeOnSelect === true);
            if (this.opts.closeOnSelect) {
                this.close();
                this.search.width(10);
            } else {
                if (this.countSelectableResults() > 0) {
                    this.search.width(10);
                    this.resizeSearch();
                    if (this.getMaximumSelectionSize() > 0 && this.val().length >= this.getMaximumSelectionSize()) {
                        this.updateResults(true);
                    } else {
                        if (this.prefillNextSearchTerm()) {
                            this.updateResults();
                        }
                    }
                    this.positionDropdown();
                } else {
                    this.close();
                    this.search.width(10);
                }
            }
            this.triggerChange({
                "added": data
            });
            if (!options || !options.noFocus) this.focusSearch();
        },
        "cancel": function() {
            this.close();
            this.focusSearch();
        },
        "addSelectedChoice": function(data) {
            var val = this.getVal(), self = this;
            $(data).each(function() {
                val.push(self.createChoice(this));
            });
            this.setVal(val);
        },
        "createChoice": function(data) {
            var enableChoice = !data.locked, enabledItem = $("<li class='select2-search-choice'>" + "    <div></div>" + "    <a href='#' class='select2-search-choice-close' tabindex='-1'></a>" + "</li>"), disabledItem = $("<li class='select2-search-choice select2-locked'>" + "<div></div>" + "</li>");
            var choice = enableChoice ? enabledItem : disabledItem, id = this.id(data), formatted, cssClass;
            formatted = this.opts.formatSelection(data, choice.find("div"), this.opts.escapeMarkup);
            if (formatted != undefined) {
                choice.find("div").replaceWith($("<div></div>").html(formatted));
            }
            cssClass = this.opts.formatSelectionCssClass(data, choice.find("div"));
            if (cssClass != undefined) {
                choice.addClass(cssClass);
            }
            if (enableChoice) {
                choice.find(".select2-search-choice-close").on("mousedown", killEvent).on("click dblclick", this.bind(function(e) {
                    if (!this.isInterfaceEnabled()) return;
                    this.unselect($(e.target));
                    this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
                    killEvent(e);
                    this.close();
                    this.focusSearch();
                })).on("focus", this.bind(function() {
                    if (!this.isInterfaceEnabled()) return;
                    this.container.addClass("select2-container-active");
                    this.dropdown.addClass("select2-drop-active");
                }));
            }
            choice.data("select2-data", data);
            choice.insertBefore(this.searchContainer);
            return id;
        },
        "unselect": function(selected) {
            var val = this.getVal(), data, index;
            selected = selected.closest(".select2-search-choice");
            if (selected.length === 0) {
                throw "Invalid argument: " + selected + ". Must be .select2-search-choice";
            }
            data = selected.data("select2-data");
            if (!data) {
                return;
            }
            var evt = $.Event("select2-removing");
            evt.val = this.id(data);
            evt.choice = data;
            this.opts.element.trigger(evt);
            if (evt.isDefaultPrevented()) {
                return false;
            }
            while ((index = indexOf(this.id(data), val)) >= 0) {
                val.splice(index, 1);
                this.setVal(val);
                if (this.select) this.postprocessResults();
            }
            selected.remove();
            this.opts.element.trigger({
                "type": "select2-removed",
                "val": this.id(data),
                "choice": data
            });
            this.triggerChange({
                "removed": data
            });
            return true;
        },
        "postprocessResults": function(data, initial, noHighlightUpdate) {
            var val = this.getVal(), choices = this.results.find(".select2-result"), compound = this.results.find(".select2-result-with-children"), self = this;
            choices.each2(function(i, choice) {
                var id = self.id(choice.data("select2-data"));
                if (indexOf(id, val) >= 0) {
                    choice.addClass("select2-selected");
                    choice.find(".select2-result-selectable").addClass("select2-selected");
                }
            });
            compound.each2(function(i, choice) {
                if (!choice.is(".select2-result-selectable") && choice.find(".select2-result-selectable:not(.select2-selected)").length === 0) {
                    choice.addClass("select2-selected");
                }
            });
            if (this.highlight() == -1 && noHighlightUpdate !== false && this.opts.closeOnSelect === true) {
                self.highlight(0);
            }
            if (!this.opts.createSearchChoice && !choices.filter(".select2-result:not(.select2-selected)").length > 0) {
                if (!data || data && !data.more && this.results.find(".select2-no-results").length === 0) {
                    if (checkFormatter(self.opts.formatNoMatches, "formatNoMatches")) {
                        this.results.append("<li class='select2-no-results'>" + evaluate(self.opts.formatNoMatches, self.opts.element, self.search.val()) + "</li>");
                    }
                }
            }
        },
        "getMaxSearchWidth": function() {
            return this.selection.width() - getSideBorderPadding(this.search);
        },
        "resizeSearch": function() {
            var minimumWidth, left, maxWidth, containerLeft, searchWidth, sideBorderPadding = getSideBorderPadding(this.search);
            minimumWidth = measureTextWidth(this.search) + 10;
            left = this.search.offset().left;
            maxWidth = this.selection.width();
            containerLeft = this.selection.offset().left;
            searchWidth = maxWidth - (left - containerLeft) - sideBorderPadding;
            if (searchWidth < minimumWidth) {
                searchWidth = maxWidth - sideBorderPadding;
            }
            if (searchWidth < 40) {
                searchWidth = maxWidth - sideBorderPadding;
            }
            if (searchWidth <= 0) {
                searchWidth = minimumWidth;
            }
            this.search.width(Math.floor(searchWidth));
        },
        "getVal": function() {
            var val;
            if (this.select) {
                val = this.select.val();
                return val === null ? [] : val;
            } else {
                val = this.opts.element.val();
                return splitVal(val, this.opts.separator, this.opts.transformVal);
            }
        },
        "setVal": function(val) {
            if (this.select) {
                this.select.val(val);
            } else {
                var unique = [], valMap = {};
                $(val).each(function() {
                    if (!(this in valMap)) {
                        unique.push(this);
                        valMap[this] = 0;
                    }
                });
                this.opts.element.val(unique.length === 0 ? "" : unique.join(this.opts.separator));
            }
        },
        "buildChangeDetails": function(old, current) {
            var current = current.slice(0), old = old.slice(0);
            for (var i = 0; i < current.length; i++) {
                for (var j = 0; j < old.length; j++) {
                    if (equal(this.opts.id(current[i]), this.opts.id(old[j]))) {
                        current.splice(i, 1);
                        i--;
                        old.splice(j, 1);
                        break;
                    }
                }
            }
            return {
                "added": current,
                "removed": old
            };
        },
        "val": function(val, triggerChange) {
            var oldData, self = this;
            if (arguments.length === 0) {
                return this.getVal();
            }
            oldData = this.data();
            if (!oldData.length) oldData = [];
            if (!val && val !== 0) {
                this.opts.element.val("");
                this.updateSelection([]);
                this.clearSearch();
                if (triggerChange) {
                    this.triggerChange({
                        "added": this.data(),
                        "removed": oldData
                    });
                }
                return;
            }
            this.setVal(val);
            if (this.select) {
                this.opts.initSelection(this.select, this.bind(this.updateSelection));
                if (triggerChange) {
                    this.triggerChange(this.buildChangeDetails(oldData, this.data()));
                }
            } else {
                if (this.opts.initSelection === undefined) {
                    throw new Error("val() cannot be called if initSelection() is not defined");
                }
                this.opts.initSelection(this.opts.element, function(data) {
                    var ids = $.map(data, self.id);
                    self.setVal(ids);
                    self.updateSelection(data);
                    self.clearSearch();
                    if (triggerChange) {
                        self.triggerChange(self.buildChangeDetails(oldData, self.data()));
                    }
                });
            }
            this.clearSearch();
        },
        "onSortStart": function() {
            if (this.select) {
                throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");
            }
            this.search.width(0);
            this.searchContainer.hide();
        },
        "onSortEnd": function() {
            var val = [], self = this;
            this.searchContainer.show();
            this.searchContainer.appendTo(this.searchContainer.parent());
            this.resizeSearch();
            this.selection.find(".select2-search-choice").each(function() {
                val.push(self.opts.id($(this).data("select2-data")));
            });
            this.setVal(val);
            this.triggerChange();
        },
        "data": function(values, triggerChange) {
            var self = this, ids, old;
            if (arguments.length === 0) {
                return this.selection.children(".select2-search-choice").map(function() {
                    return $(this).data("select2-data");
                }).get();
            } else {
                old = this.data();
                if (!values) {
                    values = [];
                }
                ids = $.map(values, function(e) {
                    return self.opts.id(e);
                });
                this.setVal(ids);
                this.updateSelection(values);
                this.clearSearch();
                if (triggerChange) {
                    this.triggerChange(this.buildChangeDetails(old, this.data()));
                }
            }
        }
    });
    $.fn.select2 = function() {
        var args = Array.prototype.slice.call(arguments, 0), opts, select2, method, value, multiple, allowedMethods = [ "val", "destroy", "opened", "open", "close", "focus", "isFocused", "container", "dropdown", "onSortStart", "onSortEnd", "enable", "disable", "readonly", "positionDropdown", "data", "search" ], valueMethods = [ "opened", "isFocused", "container", "dropdown" ], propertyMethods = [ "val", "data" ], methodsMap = {
            "search": "externalSearch"
        };
        this.each(function() {
            if (args.length === 0 || typeof args[0] === "object") {
                opts = args.length === 0 ? {} : $.extend({}, args[0]);
                opts.element = $(this);
                if (opts.element.get(0).tagName.toLowerCase() === "select") {
                    multiple = opts.element.prop("multiple");
                } else {
                    multiple = opts.multiple || false;
                    if ("tags" in opts) {
                        opts.multiple = multiple = true;
                    }
                }
                select2 = multiple ? new window.Select2["class"].multi() : new window.Select2["class"].single();
                select2.init(opts);
            } else if (typeof args[0] === "string") {
                if (indexOf(args[0], allowedMethods) < 0) {
                    throw "Unknown method: " + args[0];
                }
                value = undefined;
                select2 = $(this).data("select2");
                if (select2 === undefined) return;
                method = args[0];
                if (method === "container") {
                    value = select2.container;
                } else if (method === "dropdown") {
                    value = select2.dropdown;
                } else {
                    if (methodsMap[method]) method = methodsMap[method];
                    value = select2[method].apply(select2, args.slice(1));
                }
                if (indexOf(args[0], valueMethods) >= 0 || indexOf(args[0], propertyMethods) >= 0 && args.length == 1) {
                    return false;
                }
            } else {
                throw "Invalid arguments to select2 plugin: " + args;
            }
        });
        return value === undefined ? this : value;
    };
    $.fn.select2.defaults = {
        "debug": false,
        "width": "copy",
        "loadMorePadding": 0,
        "closeOnSelect": true,
        "openOnEnter": true,
        "containerCss": {},
        "dropdownCss": {},
        "containerCssClass": "",
        "dropdownCssClass": "",
        "formatResult": function(result, container, query, escapeMarkup) {
            var markup = [];
            markMatch(this.text(result), query.term, markup, escapeMarkup);
            return markup.join("");
        },
        "transformVal": function(val) {
            return $.trim(val);
        },
        "formatSelection": function(data, container, escapeMarkup) {
            return data ? escapeMarkup(this.text(data)) : undefined;
        },
        "sortResults": function(results, container, query) {
            return results;
        },
        "formatResultCssClass": function(data) {
            return data.css;
        },
        "formatSelectionCssClass": function(data, container) {
            return undefined;
        },
        "minimumResultsForSearch": 0,
        "minimumInputLength": 0,
        "maximumInputLength": null,
        "maximumSelectionSize": 0,
        "id": function(e) {
            return e == undefined ? null : e.id;
        },
        "text": function(e) {
            if (e && this.data && this.data.text) {
                if ($.isFunction(this.data.text)) {
                    return this.data.text(e);
                } else {
                    return e[this.data.text];
                }
            } else {
                return e.text;
            }
        },
        "matcher": function(term, text) {
            return stripDiacritics("" + text).toUpperCase().indexOf(stripDiacritics("" + term).toUpperCase()) >= 0;
        },
        "separator": ",",
        "tokenSeparators": [],
        "tokenizer": defaultTokenizer,
        "escapeMarkup": defaultEscapeMarkup,
        "blurOnChange": false,
        "selectOnBlur": false,
        "adaptContainerCssClass": function(c) {
            return c;
        },
        "adaptDropdownCssClass": function(c) {
            return null;
        },
        "nextSearchTerm": function(selectedObject, currentSearchTerm) {
            return undefined;
        },
        "searchInputPlaceholder": "",
        "createSearchChoicePosition": "top",
        "shouldFocusInput": function(instance) {
            var supportsTouchEvents = "ontouchstart" in window || navigator.msMaxTouchPoints > 0;
            if (!supportsTouchEvents) {
                return true;
            }
            if (instance.opts.minimumResultsForSearch < 0) {
                return false;
            }
            return true;
        }
    };
    $.fn.select2.locales = [];
    $.fn.select2.locales["en"] = {
        "formatMatches": function(matches) {
            if (matches === 1) {
                return "One result is available, press enter to select it.";
            }
            return matches + " results are available, use up and down arrow keys to navigate.";
        },
        "formatNoMatches": function() {
            return "No matches found";
        },
        "formatAjaxError": function(jqXHR, textStatus, errorThrown) {
            return "Loading failed";
        },
        "formatInputTooShort": function(input, min) {
            var n = min - input.length;
            return "Please enter " + n + " or more character" + (n == 1 ? "" : "s");
        },
        "formatInputTooLong": function(input, max) {
            var n = input.length - max;
            return "Please delete " + n + " character" + (n == 1 ? "" : "s");
        },
        "formatSelectionTooBig": function(limit) {
            return "You can only select " + limit + " item" + (limit == 1 ? "" : "s");
        },
        "formatLoadMore": function(pageNumber) {
            return "Loading more results\u2026";
        },
        "formatSearching": function() {
            return "Searching\u2026";
        }
    };
    $.extend($.fn.select2.defaults, $.fn.select2.locales["en"]);
    $.fn.select2.ajaxDefaults = {
        "transport": $.ajax,
        "params": {
            "type": "GET",
            "cache": false,
            "dataType": "json"
        }
    };
    window.Select2 = {
        "query": {
            "ajax": ajax,
            "local": local,
            "tags": tags
        },
        "util": {
            "debounce": debounce,
            "markMatch": markMatch,
            "escapeMarkup": defaultEscapeMarkup,
            "stripDiacritics": stripDiacritics
        },
        "class": {
            "abstract": AbstractSelect2,
            "single": SingleSelect2,
            "multi": MultiSelect2
        }
    };
})(jQuery);

(function(factory) {
    "use strict";
    if (typeof define === "function" && define.amd) {
        define([ "jquery", "moment" ], factory);
    } else if (typeof exports === "object") {
        factory(require("jquery"), require("moment"));
    } else {
        if (!jQuery) {
            throw "bootstrap-datetimepicker requires jQuery to be loaded first";
        }
        if (!moment) {
            throw "bootstrap-datetimepicker requires Moment.js to be loaded first";
        }
        factory(jQuery, moment);
    }
})(function($, moment) {
    "use strict";
    if (!moment) {
        throw new Error("bootstrap-datetimepicker requires Moment.js to be loaded first");
    }
    var dateTimePicker = function(element, options) {
        var picker = {}, date = moment(), viewDate = date.clone(), unset = true, input, component = false, widget = false, use24Hours, minViewModeNumber = 0, actualFormat, parseFormats, currentViewMode, datePickerModes = [ {
            "clsName": "days",
            "navFnc": "M",
            "navStep": 1
        }, {
            "clsName": "months",
            "navFnc": "y",
            "navStep": 1
        }, {
            "clsName": "years",
            "navFnc": "y",
            "navStep": 10
        } ], viewModes = [ "days", "months", "years" ], verticalModes = [ "top", "bottom", "auto" ], horizontalModes = [ "left", "right", "auto" ], toolbarPlacements = [ "default", "top", "bottom" ], isEnabled = function(granularity) {
            if (typeof granularity !== "string" || granularity.length > 1) {
                throw new TypeError("isEnabled expects a single character string parameter");
            }
            switch (granularity) {
              case "y":
                return actualFormat.indexOf("Y") !== -1;

              case "M":
                return actualFormat.indexOf("M") !== -1;

              case "d":
                return actualFormat.toLowerCase().indexOf("d") !== -1;

              case "h":
              case "H":
                return actualFormat.toLowerCase().indexOf("h") !== -1;

              case "m":
                return actualFormat.indexOf("m") !== -1;

              case "s":
                return actualFormat.indexOf("s") !== -1;

              default:
                return false;
            }
        }, hasTime = function() {
            return isEnabled("h") || isEnabled("m") || isEnabled("s");
        }, hasDate = function() {
            return isEnabled("y") || isEnabled("M") || isEnabled("d");
        }, getDatePickerTemplate = function() {
            var headTemplate = $("<thead>").append($("<tr>").append($("<th>").addClass("prev").attr("data-action", "previous").append($("<span>").addClass(options.icons.previous))).append($("<th>").addClass("picker-switch").attr("data-action", "pickerSwitch").attr("colspan", options.calendarWeeks ? "6" : "5")).append($("<th>").addClass("next").attr("data-action", "next").append($("<span>").addClass(options.icons.next)))), contTemplate = $("<tbody>").append($("<tr>").append($("<td>").attr("colspan", options.calendarWeeks ? "8" : "7")));
            return [ $("<div>").addClass("datepicker-days").append($("<table>").addClass("table-condensed").append(headTemplate).append($("<tbody>"))), $("<div>").addClass("datepicker-months").append($("<table>").addClass("table-condensed").append(headTemplate.clone()).append(contTemplate.clone())), $("<div>").addClass("datepicker-years").append($("<table>").addClass("table-condensed").append(headTemplate.clone()).append(contTemplate.clone())) ];
        }, getTimePickerMainTemplate = function() {
            var topRow = $("<tr>"), middleRow = $("<tr>"), bottomRow = $("<tr>");
            if (isEnabled("h")) {
                topRow.append($("<td>").append($("<a>").attr("href", "#").addClass("btn").attr("data-action", "incrementHours").append($("<span>").addClass(options.icons.up))));
                middleRow.append($("<td>").append($("<span>").addClass("timepicker-hour").attr("data-time-component", "hours").attr("data-action", "showHours")));
                bottomRow.append($("<td>").append($("<a>").attr("href", "#").addClass("btn").attr("data-action", "decrementHours").append($("<span>").addClass(options.icons.down))));
            }
            if (isEnabled("m")) {
                if (isEnabled("h")) {
                    topRow.append($("<td>").addClass("separator"));
                    middleRow.append($("<td>").addClass("separator").html(":"));
                    bottomRow.append($("<td>").addClass("separator"));
                }
                topRow.append($("<td>").append($("<a>").attr("href", "#").addClass("btn").attr("data-action", "incrementMinutes").append($("<span>").addClass(options.icons.up))));
                middleRow.append($("<td>").append($("<span>").addClass("timepicker-minute").attr("data-time-component", "minutes").attr("data-action", "showMinutes")));
                bottomRow.append($("<td>").append($("<a>").attr("href", "#").addClass("btn").attr("data-action", "decrementMinutes").append($("<span>").addClass(options.icons.down))));
            }
            if (isEnabled("s")) {
                if (isEnabled("m")) {
                    topRow.append($("<td>").addClass("separator"));
                    middleRow.append($("<td>").addClass("separator").html(":"));
                    bottomRow.append($("<td>").addClass("separator"));
                }
                topRow.append($("<td>").append($("<a>").attr("href", "#").addClass("btn").attr("data-action", "incrementSeconds").append($("<span>").addClass(options.icons.up))));
                middleRow.append($("<td>").append($("<span>").addClass("timepicker-second").attr("data-time-component", "seconds").attr("data-action", "showSeconds")));
                bottomRow.append($("<td>").append($("<a>").attr("href", "#").addClass("btn").attr("data-action", "decrementSeconds").append($("<span>").addClass(options.icons.down))));
            }
            if (!use24Hours) {
                topRow.append($("<td>").addClass("separator"));
                middleRow.append($("<td>").append($("<button>").addClass("btn btn-primary").attr("data-action", "togglePeriod")));
                bottomRow.append($("<td>").addClass("separator"));
            }
            return $("<div>").addClass("timepicker-picker").append($("<table>").addClass("table-condensed").append([ topRow, middleRow, bottomRow ]));
        }, getTimePickerTemplate = function() {
            var hoursView = $("<div>").addClass("timepicker-hours").append($("<table>").addClass("table-condensed")), minutesView = $("<div>").addClass("timepicker-minutes").append($("<table>").addClass("table-condensed")), secondsView = $("<div>").addClass("timepicker-seconds").append($("<table>").addClass("table-condensed")), ret = [ getTimePickerMainTemplate() ];
            if (isEnabled("h")) {
                ret.push(hoursView);
            }
            if (isEnabled("m")) {
                ret.push(minutesView);
            }
            if (isEnabled("s")) {
                ret.push(secondsView);
            }
            return ret;
        }, getToolbar = function() {
            var row = [];
            if (options.showTodayButton) {
                row.push($("<td>").append($("<a>").attr("data-action", "today").append($("<span>").addClass(options.icons.today))));
            }
            if (!options.sideBySide && hasDate() && hasTime()) {
                row.push($("<td>").append($("<a>").attr("data-action", "togglePicker").append($("<span>").addClass(options.icons.time))));
            }
            if (options.showClear) {
                row.push($("<td>").append($("<a>").attr("data-action", "clear").append($("<span>").addClass(options.icons.clear))));
            }
            return $("<table>").addClass("table-condensed").append($("<tbody>").append($("<tr>").append(row)));
        }, getTemplate = function() {
            var template = $("<div>").addClass("bootstrap-datetimepicker-widget dropdown-menu"), dateView = $("<div>").addClass("datepicker").append(getDatePickerTemplate()), timeView = $("<div>").addClass("timepicker").append(getTimePickerTemplate()), content = $("<ul>").addClass("list-unstyled"), toolbar = $("<li>").addClass("picker-switch" + (options.collapse ? " accordion-toggle" : "")).append(getToolbar());
            if (use24Hours) {
                template.addClass("usetwentyfour");
            }
            if (options.sideBySide && hasDate() && hasTime()) {
                template.addClass("timepicker-sbs");
                template.append($("<div>").addClass("row").append(dateView.addClass("col-sm-6")).append(timeView.addClass("col-sm-6")));
                template.append(toolbar);
                return template;
            }
            if (options.toolbarPlacement === "top") {
                content.append(toolbar);
            }
            if (hasDate()) {
                content.append($("<li>").addClass(options.collapse && hasTime() ? "collapse in" : "").append(dateView));
            }
            if (options.toolbarPlacement === "default") {
                content.append(toolbar);
            }
            if (hasTime()) {
                content.append($("<li>").addClass(options.collapse && hasDate() ? "collapse" : "").append(timeView));
            }
            if (options.toolbarPlacement === "bottom") {
                content.append(toolbar);
            }
            return template.append(content);
        }, dataToOptions = function() {
            var eData = element.data(), dataOptions = {};
            if (eData.dateOptions && eData.dateOptions instanceof Object) {
                dataOptions = $.extend(true, dataOptions, eData.dateOptions);
            }
            $.each(options, function(key) {
                var attributeName = "date" + key.charAt(0).toUpperCase() + key.slice(1);
                if (eData[attributeName] !== undefined) {
                    dataOptions[key] = eData[attributeName];
                }
            });
            return dataOptions;
        }, place = function() {
            var offset = (component || element).position(), vertical = options.widgetPositioning.vertical, horizontal = options.widgetPositioning.horizontal, parent;
            if (options.widgetParent) {
                parent = options.widgetParent.append(widget);
            } else if (element.is("input")) {
                parent = element.parent().append(widget);
            } else {
                parent = element;
                element.children().first().after(widget);
            }
            if (vertical === "auto") {
                if ((component || element).offset().top + widget.height() > $(window).height() + $(window).scrollTop() && widget.height() + element.outerHeight() < (component || element).offset().top) {
                    vertical = "top";
                } else {
                    vertical = "bottom";
                }
            }
            if (horizontal === "auto") {
                if (parent.width() < offset.left + widget.outerWidth()) {
                    horizontal = "right";
                } else {
                    horizontal = "left";
                }
            }
            if (vertical === "top") {
                widget.addClass("top").removeClass("bottom");
            } else {
                widget.addClass("bottom").removeClass("top");
            }
            if (horizontal === "right") {
                widget.addClass("pull-right");
            } else {
                widget.removeClass("pull-right");
            }
            if (parent.css("position") !== "relative") {
                parent = parent.parents().filter(function() {
                    return $(this).css("position") === "relative";
                }).first();
            }
            if (parent.length === 0) {
                throw new Error("datetimepicker component should be placed within a relative positioned container");
            }
            widget.css({
                "top": vertical === "top" ? "auto" : offset.top + element.outerHeight(),
                "bottom": vertical === "top" ? offset.top + element.outerHeight() : "auto",
                "left": horizontal === "left" ? parent.css("padding-left") : "auto",
                "right": horizontal === "left" ? "auto" : parent.css("padding-right")
            });
        }, notifyEvent = function(e) {
            if (e.type === "dp.change" && (e.date && e.date.isSame(e.oldDate) || !e.date && !e.oldDate)) {
                return;
            }
            element.trigger(e);
        }, showMode = function(dir) {
            if (!widget) {
                return;
            }
            if (dir) {
                currentViewMode = Math.max(minViewModeNumber, Math.min(2, currentViewMode + dir));
            }
            widget.find(".datepicker > div").hide().filter(".datepicker-" + datePickerModes[currentViewMode].clsName).show();
        }, fillDow = function() {
            var row = $("<tr>"), currentDate = viewDate.clone().startOf("w");
            if (options.calendarWeeks === true) {
                row.append($("<th>").addClass("cw").text("#"));
            }
            while (currentDate.isBefore(viewDate.clone().endOf("w"))) {
                row.append($("<th>").addClass("dow").text(currentDate.format("dd")));
                currentDate.add(1, "d");
            }
            widget.find(".datepicker-days thead").append(row);
        }, isInDisabledDates = function(date) {
            if (!options.disabledDates) {
                return false;
            }
            return options.disabledDates[date.format("YYYY-MM-DD")] === true;
        }, isInEnabledDates = function(date) {
            if (!options.enabledDates) {
                return false;
            }
            return options.enabledDates[date.format("YYYY-MM-DD")] === true;
        }, isValid = function(targetMoment, granularity) {
            if (!targetMoment.isValid()) {
                return false;
            }
            if (options.disabledDates && isInDisabledDates(targetMoment)) {
                return false;
            }
            if (options.enabledDates && isInEnabledDates(targetMoment)) {
                return true;
            }
            if (options.minDate && targetMoment.isBefore(options.minDate, granularity)) {
                return false;
            }
            if (options.maxDate && targetMoment.isAfter(options.maxDate, granularity)) {
                return false;
            }
            if (granularity === "d" && options.daysOfWeekDisabled.indexOf(targetMoment.day()) !== -1) {
                return false;
            }
            return true;
        }, fillMonths = function() {
            var spans = [], monthsShort = viewDate.clone().startOf("y").hour(12);
            while (monthsShort.isSame(viewDate, "y")) {
                spans.push($("<span>").attr("data-action", "selectMonth").addClass("month").text(monthsShort.format("MMM")));
                monthsShort.add(1, "M");
            }
            widget.find(".datepicker-months td").empty().append(spans);
        }, updateMonths = function() {
            var monthsView = widget.find(".datepicker-months"), monthsViewHeader = monthsView.find("th"), months = monthsView.find("tbody").find("span");
            monthsView.find(".disabled").removeClass("disabled");
            if (!isValid(viewDate.clone().subtract(1, "y"), "y")) {
                monthsViewHeader.eq(0).addClass("disabled");
            }
            monthsViewHeader.eq(1).text(viewDate.year());
            if (!isValid(viewDate.clone().add(1, "y"), "y")) {
                monthsViewHeader.eq(2).addClass("disabled");
            }
            months.removeClass("active");
            if (date.isSame(viewDate, "y")) {
                months.eq(date.month()).addClass("active");
            }
            months.each(function(index) {
                if (!isValid(viewDate.clone().month(index), "M")) {
                    $(this).addClass("disabled");
                }
            });
        }, updateYears = function() {
            var yearsView = widget.find(".datepicker-years"), yearsViewHeader = yearsView.find("th"), startYear = viewDate.clone().subtract(5, "y"), endYear = viewDate.clone().add(6, "y"), html = "";
            yearsView.find(".disabled").removeClass("disabled");
            if (options.minDate && options.minDate.isAfter(startYear, "y")) {
                yearsViewHeader.eq(0).addClass("disabled");
            }
            yearsViewHeader.eq(1).text(startYear.year() + "-" + endYear.year());
            if (options.maxDate && options.maxDate.isBefore(endYear, "y")) {
                yearsViewHeader.eq(2).addClass("disabled");
            }
            while (!startYear.isAfter(endYear, "y")) {
                html += '<span data-action="selectYear" class="year' + (startYear.isSame(date, "y") ? " active" : "") + (!isValid(startYear, "y") ? " disabled" : "") + '">' + startYear.year() + "</span>";
                startYear.add(1, "y");
            }
            yearsView.find("td").html(html);
        }, fillDate = function() {
            var daysView = widget.find(".datepicker-days"), daysViewHeader = daysView.find("th"), currentDate, html = [], row, clsName;
            if (!hasDate()) {
                return;
            }
            daysView.find(".disabled").removeClass("disabled");
            daysViewHeader.eq(1).text(viewDate.format(options.dayViewHeaderFormat));
            if (!isValid(viewDate.clone().subtract(1, "M"), "M")) {
                daysViewHeader.eq(0).addClass("disabled");
            }
            if (!isValid(viewDate.clone().add(1, "M"), "M")) {
                daysViewHeader.eq(2).addClass("disabled");
            }
            currentDate = viewDate.clone().startOf("M").startOf("week");
            while (!viewDate.clone().endOf("M").endOf("w").isBefore(currentDate, "d")) {
                if (currentDate.weekday() === 0) {
                    row = $("<tr>");
                    if (options.calendarWeeks) {
                        row.append('<td class="cw">' + currentDate.week() + "</td>");
                    }
                    html.push(row);
                }
                clsName = "";
                if (currentDate.isBefore(viewDate, "M")) {
                    clsName += " old";
                }
                if (currentDate.isAfter(viewDate, "M")) {
                    clsName += " new";
                }
                if (currentDate.isSame(date, "d") && !unset) {
                    clsName += " active";
                }
                if (!isValid(currentDate, "d")) {
                    clsName += " disabled";
                }
                if (currentDate.isSame(moment(), "d")) {
                    clsName += " today";
                }
                if (currentDate.day() === 0 || currentDate.day() === 6) {
                    clsName += " weekend";
                }
                row.append('<td data-action="selectDay" class="day' + clsName + '">' + currentDate.date() + "</td>");
                currentDate.add(1, "d");
            }
            daysView.find("tbody").empty().append(html);
            updateMonths();
            updateYears();
        }, fillHours = function() {
            var table = widget.find(".timepicker-hours table"), currentHour = viewDate.clone().startOf("d"), html = [], row = $("<tr>");
            if (viewDate.hour() > 11 && !use24Hours) {
                currentHour.hour(12);
            }
            while (currentHour.isSame(viewDate, "d") && (use24Hours || viewDate.hour() < 12 && currentHour.hour() < 12 || viewDate.hour() > 11)) {
                if (currentHour.hour() % 4 === 0) {
                    row = $("<tr>");
                    html.push(row);
                }
                row.append('<td data-action="selectHour" class="hour' + (!isValid(currentHour, "h") ? " disabled" : "") + '">' + currentHour.format(use24Hours ? "HH" : "hh") + "</td>");
                currentHour.add(1, "h");
            }
            table.empty().append(html);
        }, fillMinutes = function() {
            var table = widget.find(".timepicker-minutes table"), currentMinute = viewDate.clone().startOf("h"), html = [], row = $("<tr>"), step = options.stepping === 1 ? 5 : options.stepping;
            while (viewDate.isSame(currentMinute, "h")) {
                if (currentMinute.minute() % (step * 4) === 0) {
                    row = $("<tr>");
                    html.push(row);
                }
                row.append('<td data-action="selectMinute" class="minute' + (!isValid(currentMinute, "m") ? " disabled" : "") + '">' + currentMinute.format("mm") + "</td>");
                currentMinute.add(step, "m");
            }
            table.empty().append(html);
        }, fillSeconds = function() {
            var table = widget.find(".timepicker-seconds table"), currentSecond = viewDate.clone().startOf("m"), html = [], row = $("<tr>");
            while (viewDate.isSame(currentSecond, "m")) {
                if (currentSecond.second() % 20 === 0) {
                    row = $("<tr>");
                    html.push(row);
                }
                row.append('<td data-action="selectSecond" class="second' + (!isValid(currentSecond, "s") ? " disabled" : "") + '">' + currentSecond.format("ss") + "</td>");
                currentSecond.add(5, "s");
            }
            table.empty().append(html);
        }, fillTime = function() {
            var timeComponents = widget.find(".timepicker span[data-time-component]");
            if (!use24Hours) {
                widget.find(".timepicker [data-action=togglePeriod]").text(date.format("A"));
            }
            timeComponents.filter("[data-time-component=hours]").text(date.format(use24Hours ? "HH" : "hh"));
            timeComponents.filter("[data-time-component=minutes]").text(date.format("mm"));
            timeComponents.filter("[data-time-component=seconds]").text(date.format("ss"));
            fillHours();
            fillMinutes();
            fillSeconds();
        }, update = function() {
            if (!widget) {
                return;
            }
            fillDate();
            fillTime();
        }, setValue = function(targetMoment) {
            var oldDate = unset ? null : date;
            if (!targetMoment) {
                unset = true;
                input.val("");
                element.data("date", "");
                notifyEvent({
                    "type": "dp.change",
                    "date": null,
                    "oldDate": oldDate
                });
                update();
                return;
            }
            targetMoment = targetMoment.clone().locale(options.locale);
            if (options.stepping !== 1) {
                targetMoment.minutes(Math.round(targetMoment.minutes() / options.stepping) * options.stepping % 60).seconds(0);
            }
            if (isValid(targetMoment)) {
                date = targetMoment;
                viewDate = date.clone();
                input.val(date.format(actualFormat));
                element.data("date", date.format(actualFormat));
                update();
                unset = false;
                notifyEvent({
                    "type": "dp.change",
                    "date": date.clone(),
                    "oldDate": oldDate
                });
            } else {
                input.val(unset ? "" : date.format(actualFormat));
                notifyEvent({
                    "type": "dp.error",
                    "date": targetMoment
                });
            }
        }, hide = function() {
            var transitioning = false;
            if (!widget) {
                return picker;
            }
            widget.find(".collapse").each(function() {
                var collapseData = $(this).data("collapse");
                if (collapseData && collapseData.transitioning) {
                    transitioning = true;
                    return false;
                }
            });
            if (transitioning) {
                return picker;
            }
            if (component && component.hasClass("btn")) {
                component.toggleClass("active");
            }
            widget.hide();
            $(window).off("resize", place);
            widget.off("click", "[data-action]");
            widget.off("mousedown", false);
            widget.remove();
            widget = false;
            notifyEvent({
                "type": "dp.hide",
                "date": date.clone()
            });
            return picker;
        }, actions = {
            "next": function() {
                viewDate.add(datePickerModes[currentViewMode].navStep, datePickerModes[currentViewMode].navFnc);
                fillDate();
            },
            "previous": function() {
                viewDate.subtract(datePickerModes[currentViewMode].navStep, datePickerModes[currentViewMode].navFnc);
                fillDate();
            },
            "pickerSwitch": function() {
                showMode(1);
            },
            "selectMonth": function(e) {
                var month = $(e.target).closest("tbody").find("span").index($(e.target));
                viewDate.month(month);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()).month(viewDate.month()));
                    hide();
                }
                showMode(-1);
                fillDate();
            },
            "selectYear": function(e) {
                var year = parseInt($(e.target).text(), 10) || 0;
                viewDate.year(year);
                if (currentViewMode === minViewModeNumber) {
                    setValue(date.clone().year(viewDate.year()));
                    hide();
                }
                showMode(-1);
                fillDate();
            },
            "selectDay": function(e) {
                var day = viewDate.clone();
                if ($(e.target).is(".old")) {
                    day.subtract(1, "M");
                }
                if ($(e.target).is(".new")) {
                    day.add(1, "M");
                }
                setValue(day.date(parseInt($(e.target).text(), 10)));
                if (!hasTime() && !options.keepOpen) {
                    hide();
                }
            },
            "incrementHours": function() {
                setValue(date.clone().add(1, "h"));
            },
            "incrementMinutes": function() {
                setValue(date.clone().add(options.stepping, "m"));
            },
            "incrementSeconds": function() {
                setValue(date.clone().add(1, "s"));
            },
            "decrementHours": function() {
                setValue(date.clone().subtract(1, "h"));
            },
            "decrementMinutes": function() {
                setValue(date.clone().subtract(options.stepping, "m"));
            },
            "decrementSeconds": function() {
                setValue(date.clone().subtract(1, "s"));
            },
            "togglePeriod": function() {
                setValue(date.clone().add(date.hours() >= 12 ? -12 : 12, "h"));
            },
            "togglePicker": function(e) {
                var $this = $(e.target), $parent = $this.closest("ul"), expanded = $parent.find(".in"), closed = $parent.find(".collapse:not(.in)"), collapseData;
                if (expanded && expanded.length) {
                    collapseData = expanded.data("collapse");
                    if (collapseData && collapseData.transitioning) {
                        return;
                    }
                    expanded.collapse("hide");
                    closed.collapse("show");
                    if ($this.is("span")) {
                        $this.toggleClass(options.icons.time + " " + options.icons.date);
                    } else {
                        $this.find("span").toggleClass(options.icons.time + " " + options.icons.date);
                    }
                }
            },
            "showPicker": function() {
                widget.find(".timepicker > div:not(.timepicker-picker)").hide();
                widget.find(".timepicker .timepicker-picker").show();
            },
            "showHours": function() {
                widget.find(".timepicker .timepicker-picker").hide();
                widget.find(".timepicker .timepicker-hours").show();
            },
            "showMinutes": function() {
                widget.find(".timepicker .timepicker-picker").hide();
                widget.find(".timepicker .timepicker-minutes").show();
            },
            "showSeconds": function() {
                widget.find(".timepicker .timepicker-picker").hide();
                widget.find(".timepicker .timepicker-seconds").show();
            },
            "selectHour": function(e) {
                var hour = parseInt($(e.target).text(), 10);
                if (!use24Hours) {
                    if (date.hours() >= 12) {
                        if (hour !== 12) {
                            hour += 12;
                        }
                    } else {
                        if (hour === 12) {
                            hour = 0;
                        }
                    }
                }
                setValue(date.clone().hours(hour));
                actions.showPicker.call(picker);
            },
            "selectMinute": function(e) {
                setValue(date.clone().minutes(parseInt($(e.target).text(), 10)));
                actions.showPicker.call(picker);
            },
            "selectSecond": function(e) {
                setValue(date.clone().seconds(parseInt($(e.target).text(), 10)));
                actions.showPicker.call(picker);
            },
            "clear": function() {
                setValue(null);
            },
            "today": function() {
                setValue(moment());
            }
        }, doAction = function(e) {
            if ($(e.currentTarget).is(".disabled")) {
                return false;
            }
            actions[$(e.currentTarget).data("action")].apply(picker, arguments);
            return false;
        }, show = function() {
            var currentMoment, useCurrentGranularity = {
                "year": function(m) {
                    return m.month(0).date(1).hours(0).seconds(0).minutes(0);
                },
                "month": function(m) {
                    return m.date(1).hours(0).seconds(0).minutes(0);
                },
                "day": function(m) {
                    return m.hours(0).seconds(0).minutes(0);
                },
                "hour": function(m) {
                    return m.seconds(0).minutes(0);
                },
                "minute": function(m) {
                    return m.seconds(0);
                }
            };
            if (input.prop("disabled") || input.prop("readonly") || widget) {
                return picker;
            }
            if (options.useCurrent && unset) {
                currentMoment = moment();
                if (typeof options.useCurrent === "string") {
                    currentMoment = useCurrentGranularity[options.useCurrent](currentMoment);
                }
                setValue(currentMoment);
            }
            widget = getTemplate();
            fillDow();
            fillMonths();
            widget.find(".timepicker-hours").hide();
            widget.find(".timepicker-minutes").hide();
            widget.find(".timepicker-seconds").hide();
            update();
            showMode();
            $(window).on("resize", place);
            widget.on("click", "[data-action]", doAction);
            widget.on("mousedown", false);
            if (component && component.hasClass("btn")) {
                component.toggleClass("active");
            }
            widget.show();
            place();
            if (!input.is(":focus")) {
                input.focus();
            }
            notifyEvent({
                "type": "dp.show"
            });
            return picker;
        }, toggle = function() {
            return widget ? hide() : show();
        }, parseInputDate = function(date) {
            if (moment.isMoment(date) || date instanceof Date) {
                date = moment(date);
            } else {
                date = moment(date, parseFormats, options.useStrict);
            }
            date.locale(options.locale);
            return date;
        }, keydown = function(e) {
            if (e.keyCode === 27) {
                hide();
            }
        }, change = function(e) {
            var val = $(e.target).val().trim(), parsedDate = val ? parseInputDate(val) : null;
            setValue(parsedDate);
            e.stopImmediatePropagation();
            return false;
        }, attachDatePickerElementEvents = function() {
            input.on({
                "change": change,
                "blur": hide,
                "keydown": keydown
            });
            if (element.is("input")) {
                input.on({
                    "focus": show
                });
            } else if (component) {
                component.on("click", toggle);
                component.on("mousedown", false);
            }
        }, detachDatePickerElementEvents = function() {
            input.off({
                "change": change,
                "blur": hide,
                "keydown": keydown
            });
            if (element.is("input")) {
                input.off({
                    "focus": show
                });
            } else if (component) {
                component.off("click", toggle);
                component.off("mousedown", false);
            }
        }, indexGivenDates = function(givenDatesArray) {
            var givenDatesIndexed = {};
            $.each(givenDatesArray, function() {
                var dDate = parseInputDate(this);
                if (dDate.isValid()) {
                    givenDatesIndexed[dDate.format("YYYY-MM-DD")] = true;
                }
            });
            return Object.keys(givenDatesIndexed).length ? givenDatesIndexed : false;
        }, initFormatting = function() {
            var format = options.format || "L LT";
            actualFormat = format.replace(/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, function(input) {
                return date.localeData().longDateFormat(input) || input;
            });
            parseFormats = options.extraFormats ? options.extraFormats.slice() : [];
            if (parseFormats.indexOf(format) < 0 && parseFormats.indexOf(actualFormat) < 0) {
                parseFormats.push(actualFormat);
            }
            use24Hours = actualFormat.toLowerCase().indexOf("a") < 1 && actualFormat.indexOf("h") < 1;
            if (isEnabled("y")) {
                minViewModeNumber = 2;
            }
            if (isEnabled("M")) {
                minViewModeNumber = 1;
            }
            if (isEnabled("d")) {
                minViewModeNumber = 0;
            }
            currentViewMode = Math.max(minViewModeNumber, currentViewMode);
            if (!unset) {
                setValue(date);
            }
        };
        picker.destroy = function() {
            hide();
            detachDatePickerElementEvents();
            element.removeData("DateTimePicker");
            element.removeData("date");
        };
        picker.toggle = toggle;
        picker.show = show;
        picker.hide = hide;
        picker.disable = function() {
            hide();
            if (component && component.hasClass("btn")) {
                component.addClass("disabled");
            }
            input.prop("disabled", true);
            return picker;
        };
        picker.enable = function() {
            if (component && component.hasClass("btn")) {
                component.removeClass("disabled");
            }
            input.prop("disabled", false);
            return picker;
        };
        picker.options = function(newOptions) {
            if (arguments.length === 0) {
                return $.extend(true, {}, options);
            }
            if (!(newOptions instanceof Object)) {
                throw new TypeError("options() options parameter should be an object");
            }
            $.extend(true, options, newOptions);
            $.each(options, function(key, value) {
                if (picker[key] !== undefined) {
                    picker[key](value);
                } else {
                    throw new TypeError("option " + key + " is not recognized!");
                }
            });
            return picker;
        };
        picker.date = function(newDate) {
            if (arguments.length === 0) {
                if (unset) {
                    return null;
                }
                return date.clone();
            }
            if (newDate !== null && typeof newDate !== "string" && !moment.isMoment(newDate) && !(newDate instanceof Date)) {
                throw new TypeError("date() parameter must be one of [null, string, moment or Date]");
            }
            setValue(newDate === null ? null : parseInputDate(newDate));
            return picker;
        };
        picker.format = function(newFormat) {
            if (arguments.length === 0) {
                return options.format;
            }
            if (typeof newFormat !== "string" && (typeof newFormat !== "boolean" || newFormat !== false)) {
                throw new TypeError("format() expects a sting or boolean:false parameter " + newFormat);
            }
            options.format = newFormat;
            if (actualFormat) {
                initFormatting();
            }
            return picker;
        };
        picker.dayViewHeaderFormat = function(newFormat) {
            if (arguments.length === 0) {
                return options.dayViewHeaderFormat;
            }
            if (typeof newFormat !== "string") {
                throw new TypeError("dayViewHeaderFormat() expects a string parameter");
            }
            options.dayViewHeaderFormat = newFormat;
            return picker;
        };
        picker.extraFormats = function(formats) {
            if (arguments.length === 0) {
                return options.extraFormats;
            }
            if (formats !== false && !(formats instanceof Array)) {
                throw new TypeError("extraFormats() expects an array or false parameter");
            }
            options.extraFormats = formats;
            if (parseFormats) {
                initFormatting();
            }
            return picker;
        };
        picker.disabledDates = function(dates) {
            if (arguments.length === 0) {
                return options.disabledDates ? $.extend({}, options.disabledDates) : options.disabledDates;
            }
            if (!dates) {
                options.disabledDates = false;
                update();
                return picker;
            }
            if (!(dates instanceof Array)) {
                throw new TypeError("disabledDates() expects an array parameter");
            }
            options.disabledDates = indexGivenDates(dates);
            options.enabledDates = false;
            update();
            return picker;
        };
        picker.enabledDates = function(dates) {
            if (arguments.length === 0) {
                return options.enabledDates ? $.extend({}, options.enabledDates) : options.enabledDates;
            }
            if (!dates) {
                options.enabledDates = false;
                update();
                return picker;
            }
            if (!(dates instanceof Array)) {
                throw new TypeError("enabledDates() expects an array parameter");
            }
            options.enabledDates = indexGivenDates(dates);
            options.disabledDates = false;
            update();
            return picker;
        };
        picker.daysOfWeekDisabled = function(daysOfWeekDisabled) {
            if (arguments.length === 0) {
                return options.daysOfWeekDisabled.splice(0);
            }
            if (!(daysOfWeekDisabled instanceof Array)) {
                throw new TypeError("daysOfWeekDisabled() expects an array parameter");
            }
            options.daysOfWeekDisabled = daysOfWeekDisabled.reduce(function(previousValue, currentValue) {
                currentValue = parseInt(currentValue, 10);
                if (currentValue > 6 || currentValue < 0 || isNaN(currentValue)) {
                    return previousValue;
                }
                if (previousValue.indexOf(currentValue) === -1) {
                    previousValue.push(currentValue);
                }
                return previousValue;
            }, []).sort();
            update();
            return picker;
        };
        picker.maxDate = function(date) {
            if (arguments.length === 0) {
                return options.maxDate ? options.maxDate.clone() : options.maxDate;
            }
            if (typeof date === "boolean" && date === false) {
                options.maxDate = false;
                update();
                return picker;
            }
            var parsedDate = parseInputDate(date);
            if (!parsedDate.isValid()) {
                throw new TypeError("maxDate() Could not parse date parameter: " + date);
            }
            if (options.minDate && parsedDate.isBefore(options.minDate)) {
                throw new TypeError("maxDate() date parameter is before options.minDate: " + parsedDate.format(actualFormat));
            }
            options.maxDate = parsedDate;
            if (options.maxDate.isBefore(date)) {
                setValue(options.maxDate);
            }
            update();
            return picker;
        };
        picker.minDate = function(date) {
            if (arguments.length === 0) {
                return options.minDate ? options.minDate.clone() : options.minDate;
            }
            if (typeof date === "boolean" && date === false) {
                options.minDate = false;
                update();
                return picker;
            }
            var parsedDate = parseInputDate(date);
            if (!parsedDate.isValid()) {
                throw new TypeError("minDate() Could not parse date parameter: " + date);
            }
            if (options.maxDate && parsedDate.isAfter(options.maxDate)) {
                throw new TypeError("minDate() date parameter is after options.maxDate: " + parsedDate.format(actualFormat));
            }
            options.minDate = parsedDate;
            if (options.minDate.isAfter(date)) {
                setValue(options.minDate);
            }
            update();
            return picker;
        };
        picker.defaultDate = function(defaultDate) {
            if (arguments.length === 0) {
                return options.defaultDate ? options.defaultDate.clone() : options.defaultDate;
            }
            if (!defaultDate) {
                options.defaultDate = false;
                return picker;
            }
            var parsedDate = parseInputDate(defaultDate);
            if (!parsedDate.isValid()) {
                throw new TypeError("defaultDate() Could not parse date parameter: " + defaultDate);
            }
            if (!isValid(parsedDate)) {
                throw new TypeError("defaultDate() date passed is invalid according to component setup validations");
            }
            options.defaultDate = parsedDate;
            if (options.defaultDate && input.val().trim() === "") {
                setValue(options.defaultDate);
            }
            return picker;
        };
        picker.locale = function(locale) {
            if (arguments.length === 0) {
                return options.locale;
            }
            if (!moment.localeData(locale)) {
                throw new TypeError("locale() locale " + locale + " is not loaded from moment locales!");
            }
            options.locale = locale;
            date.locale(options.locale);
            viewDate.locale(options.locale);
            if (actualFormat) {
                initFormatting();
            }
            if (widget) {
                hide();
                show();
            }
            return picker;
        };
        picker.stepping = function(stepping) {
            if (arguments.length === 0) {
                return options.stepping;
            }
            stepping = parseInt(stepping, 10);
            if (isNaN(stepping) || stepping < 1) {
                stepping = 1;
            }
            options.stepping = stepping;
            return picker;
        };
        picker.useCurrent = function(useCurrent) {
            var useCurrentOptions = [ "year", "month", "day", "hour", "minute" ];
            if (arguments.length === 0) {
                return options.useCurrent;
            }
            if (typeof useCurrent !== "boolean" && typeof useCurrent !== "string") {
                throw new TypeError("useCurrent() expects a boolean or string parameter");
            }
            if (typeof useCurrent === "string" && useCurrentOptions.indexOf(useCurrent.toLowerCase()) === -1) {
                throw new TypeError("useCurrent() expects a string parameter of " + useCurrentOptions.join(", "));
            }
            options.useCurrent = useCurrent;
            return picker;
        };
        picker.collapse = function(collapse) {
            if (arguments.length === 0) {
                return options.collapse;
            }
            if (typeof collapse !== "boolean") {
                throw new TypeError("collapse() expects a boolean parameter");
            }
            if (options.collapse === collapse) {
                return picker;
            }
            options.collapse = collapse;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };
        picker.icons = function(icons) {
            if (arguments.length === 0) {
                return $.extend({}, options.icons);
            }
            if (!(icons instanceof Object)) {
                throw new TypeError("icons() expects parameter to be an Object");
            }
            $.extend(options.icons, icons);
            if (widget) {
                hide();
                show();
            }
            return picker;
        };
        picker.useStrict = function(useStrict) {
            if (arguments.length === 0) {
                return options.useStrict;
            }
            if (typeof useStrict !== "boolean") {
                throw new TypeError("useStrict() expects a boolean parameter");
            }
            options.useStrict = useStrict;
            return picker;
        };
        picker.sideBySide = function(sideBySide) {
            if (arguments.length === 0) {
                return options.sideBySide;
            }
            if (typeof sideBySide !== "boolean") {
                throw new TypeError("sideBySide() expects a boolean parameter");
            }
            options.sideBySide = sideBySide;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };
        picker.viewMode = function(newViewMode) {
            if (arguments.length === 0) {
                return options.viewMode;
            }
            if (typeof newViewMode !== "string") {
                throw new TypeError("viewMode() expects a string parameter");
            }
            if (viewModes.indexOf(newViewMode) === -1) {
                throw new TypeError("viewMode() parameter must be one of (" + viewModes.join(", ") + ") value");
            }
            options.viewMode = newViewMode;
            currentViewMode = Math.max(viewModes.indexOf(newViewMode), minViewModeNumber);
            showMode();
            return picker;
        };
        picker.toolbarPlacement = function(toolbarPlacement) {
            if (arguments.length === 0) {
                return options.toolbarPlacement;
            }
            if (typeof toolbarPlacement !== "string") {
                throw new TypeError("toolbarPlacement() expects a string parameter");
            }
            if (toolbarPlacements.indexOf(toolbarPlacement) === -1) {
                throw new TypeError("toolbarPlacement() parameter must be one of (" + toolbarPlacements.join(", ") + ") value");
            }
            options.toolbarPlacement = toolbarPlacement;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };
        picker.widgetPositioning = function(widgetPositioning) {
            if (arguments.length === 0) {
                return $.extend({}, options.widgetPositioning);
            }
            if ({}.toString.call(widgetPositioning) !== "[object Object]") {
                throw new TypeError("widgetPositioning() expects an object variable");
            }
            if (widgetPositioning.horizontal) {
                if (typeof widgetPositioning.horizontal !== "string") {
                    throw new TypeError("widgetPositioning() horizontal variable must be a string");
                }
                widgetPositioning.horizontal = widgetPositioning.horizontal.toLowerCase();
                if (horizontalModes.indexOf(widgetPositioning.horizontal) === -1) {
                    throw new TypeError("widgetPositioning() expects horizontal parameter to be one of (" + horizontalModes.join(", ") + ")");
                }
                options.widgetPositioning.horizontal = widgetPositioning.horizontal;
            }
            if (widgetPositioning.vertical) {
                if (typeof widgetPositioning.vertical !== "string") {
                    throw new TypeError("widgetPositioning() vertical variable must be a string");
                }
                widgetPositioning.vertical = widgetPositioning.vertical.toLowerCase();
                if (verticalModes.indexOf(widgetPositioning.vertical) === -1) {
                    throw new TypeError("widgetPositioning() expects vertical parameter to be one of (" + verticalModes.join(", ") + ")");
                }
                options.widgetPositioning.vertical = widgetPositioning.vertical;
            }
            update();
            return picker;
        };
        picker.calendarWeeks = function(showCalendarWeeks) {
            if (arguments.length === 0) {
                return options.calendarWeeks;
            }
            if (typeof showCalendarWeeks !== "boolean") {
                throw new TypeError("calendarWeeks() expects parameter to be a boolean value");
            }
            options.calendarWeeks = showCalendarWeeks;
            update();
            return picker;
        };
        picker.showTodayButton = function(showTodayButton) {
            if (arguments.length === 0) {
                return options.showTodayButton;
            }
            if (typeof showTodayButton !== "boolean") {
                throw new TypeError("showTodayButton() expects a boolean parameter");
            }
            options.showTodayButton = showTodayButton;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };
        picker.showClear = function(showClear) {
            if (arguments.length === 0) {
                return options.showClear;
            }
            if (typeof showClear !== "boolean") {
                throw new TypeError("showClear() expects a boolean parameter");
            }
            options.showClear = showClear;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };
        picker.widgetParent = function(widgetParent) {
            if (arguments.length === 0) {
                return options.widgetParent;
            }
            if (typeof widgetParent === "string") {
                widgetParent = $(widgetParent);
            }
            if (widgetParent !== null && (typeof widgetParent !== "string" && !(widgetParent instanceof jQuery))) {
                throw new TypeError("widgetParent() expects a string or a jQuery object parameter");
            }
            options.widgetParent = widgetParent;
            if (widget) {
                hide();
                show();
            }
            return picker;
        };
        picker.keepOpen = function(keepOpen) {
            if (arguments.length === 0) {
                return options.format;
            }
            if (typeof keepOpen !== "boolean") {
                throw new TypeError("keepOpen() expects a boolean parameter");
            }
            options.keepOpen = keepOpen;
            return picker;
        };
        if (element.is("input")) {
            input = element;
        } else {
            input = element.find(".datepickerinput");
            if (input.size() === 0) {
                input = element.find("input");
            } else if (!input.is("input")) {
                throw new Error('CSS class "datepickerinput" cannot be applied to non input element');
            }
        }
        if (element.hasClass("input-group")) {
            if (element.find(".datepickerbutton").size() === 0) {
                component = element.find('[class^="input-group-"]');
            } else {
                component = element.find(".datepickerbutton");
            }
        }
        if (!input.is("input")) {
            throw new Error("Could not initialize DateTimePicker without an input element");
        }
        $.extend(true, options, dataToOptions());
        picker.options(options);
        initFormatting();
        attachDatePickerElementEvents();
        if (input.prop("disabled")) {
            picker.disable();
        }
        if (input.val().trim().length !== 0) {
            setValue(parseInputDate(input.val().trim()));
        } else if (options.defaultDate) {
            setValue(options.defaultDate);
        }
        return picker;
    };
    $.fn.datetimepicker = function(options) {
        return this.each(function() {
            var $this = $(this);
            if (!$this.data("DateTimePicker")) {
                options = $.extend(true, {}, $.fn.datetimepicker.defaults, options);
                $this.data("DateTimePicker", dateTimePicker($this, options));
            }
        });
    };
    $.fn.datetimepicker.defaults = {
        "format": false,
        "dayViewHeaderFormat": "MMMM YYYY",
        "extraFormats": false,
        "stepping": 1,
        "minDate": false,
        "maxDate": false,
        "useCurrent": true,
        "collapse": true,
        "locale": moment.locale(),
        "defaultDate": false,
        "disabledDates": false,
        "enabledDates": false,
        "icons": {
            "time": "glyphicon glyphicon-time",
            "date": "glyphicon glyphicon-calendar",
            "up": "glyphicon glyphicon-chevron-up",
            "down": "glyphicon glyphicon-chevron-down",
            "previous": "glyphicon glyphicon-chevron-left",
            "next": "glyphicon glyphicon-chevron-right",
            "today": "glyphicon glyphicon-screenshot",
            "clear": "glyphicon glyphicon-trash"
        },
        "useStrict": false,
        "sideBySide": false,
        "daysOfWeekDisabled": [],
        "calendarWeeks": false,
        "viewMode": "days",
        "toolbarPlacement": "default",
        "showTodayButton": false,
        "showClear": false,
        "widgetPositioning": {
            "horizontal": "auto",
            "vertical": "auto"
        },
        "widgetParent": null,
        "keepOpen": false
    };
});

(function(define) {
    define([ "jquery" ], function($) {
        return function() {
            var $container;
            var listener;
            var toastId = 0;
            var toastType = {
                "error": "error",
                "info": "info",
                "success": "success",
                "warning": "warning"
            };
            var toastr = {
                "clear": clear,
                "remove": remove,
                "error": error,
                "getContainer": getContainer,
                "info": info,
                "options": {},
                "subscribe": subscribe,
                "success": success,
                "version": "2.1.4",
                "warning": warning
            };
            var previousToast;
            return toastr;
            function error(message, title, optionsOverride) {
                return notify({
                    "type": toastType.error,
                    "iconClass": getOptions().iconClasses.error,
                    "message": message,
                    "optionsOverride": optionsOverride,
                    "title": title
                });
            }
            function getContainer(options, create) {
                if (!options) {
                    options = getOptions();
                }
                $container = $("#" + options.containerId);
                if ($container.length) {
                    return $container;
                }
                if (create) {
                    $container = createContainer(options);
                }
                return $container;
            }
            function info(message, title, optionsOverride) {
                return notify({
                    "type": toastType.info,
                    "iconClass": getOptions().iconClasses.info,
                    "message": message,
                    "optionsOverride": optionsOverride,
                    "title": title
                });
            }
            function subscribe(callback) {
                listener = callback;
            }
            function success(message, title, optionsOverride) {
                return notify({
                    "type": toastType.success,
                    "iconClass": getOptions().iconClasses.success,
                    "message": message,
                    "optionsOverride": optionsOverride,
                    "title": title
                });
            }
            function warning(message, title, optionsOverride) {
                return notify({
                    "type": toastType.warning,
                    "iconClass": getOptions().iconClasses.warning,
                    "message": message,
                    "optionsOverride": optionsOverride,
                    "title": title
                });
            }
            function clear($toastElement, clearOptions) {
                var options = getOptions();
                if (!$container) {
                    getContainer(options);
                }
                if (!clearToast($toastElement, options, clearOptions)) {
                    clearContainer(options);
                }
            }
            function remove($toastElement) {
                var options = getOptions();
                if (!$container) {
                    getContainer(options);
                }
                if ($toastElement && $(":focus", $toastElement).length === 0) {
                    removeToast($toastElement);
                    return;
                }
                if ($container.children().length) {
                    $container.remove();
                }
            }
            function clearContainer(options) {
                var toastsToClear = $container.children();
                for (var i = toastsToClear.length - 1; i >= 0; i--) {
                    clearToast($(toastsToClear[i]), options);
                }
            }
            function clearToast($toastElement, options, clearOptions) {
                var force = clearOptions && clearOptions.force ? clearOptions.force : false;
                if ($toastElement && (force || $(":focus", $toastElement).length === 0)) {
                    $toastElement[options.hideMethod]({
                        "duration": options.hideDuration,
                        "easing": options.hideEasing,
                        "complete": function() {
                            removeToast($toastElement);
                        }
                    });
                    return true;
                }
                return false;
            }
            function createContainer(options) {
                $container = $("<div/>").attr("id", options.containerId).addClass(options.positionClass);
                $container.appendTo($(options.target));
                return $container;
            }
            function getDefaults() {
                return {
                    "tapToDismiss": true,
                    "toastClass": "toast",
                    "containerId": "toast-container",
                    "debug": false,
                    "showMethod": "fadeIn",
                    "showDuration": 300,
                    "showEasing": "swing",
                    "onShown": undefined,
                    "hideMethod": "fadeOut",
                    "hideDuration": 1e3,
                    "hideEasing": "swing",
                    "onHidden": undefined,
                    "closeMethod": false,
                    "closeDuration": false,
                    "closeEasing": false,
                    "closeOnHover": true,
                    "extendedTimeOut": 1e3,
                    "iconClasses": {
                        "error": "toast-error",
                        "info": "toast-info",
                        "success": "toast-success",
                        "warning": "toast-warning"
                    },
                    "iconClass": "toast-info",
                    "positionClass": "toast-top-right",
                    "timeOut": 5e3,
                    "titleClass": "toast-title",
                    "messageClass": "toast-message",
                    "escapeHtml": false,
                    "target": "body",
                    "closeHtml": '<button type="button">&times;</button>',
                    "closeClass": "toast-close-button",
                    "newestOnTop": true,
                    "preventDuplicates": false,
                    "progressBar": false,
                    "progressClass": "toast-progress",
                    "rtl": false
                };
            }
            function publish(args) {
                if (!listener) {
                    return;
                }
                listener(args);
            }
            function notify(map) {
                var options = getOptions();
                var iconClass = map.iconClass || options.iconClass;
                if (typeof map.optionsOverride !== "undefined") {
                    options = $.extend(options, map.optionsOverride);
                    iconClass = map.optionsOverride.iconClass || iconClass;
                }
                if (shouldExit(options, map)) {
                    return;
                }
                toastId++;
                $container = getContainer(options, true);
                var intervalId = null;
                var $toastElement = $("<div/>");
                var $titleElement = $("<div/>");
                var $messageElement = $("<div/>");
                var $progressElement = $("<div/>");
                var $closeElement = $(options.closeHtml);
                var progressBar = {
                    "intervalId": null,
                    "hideEta": null,
                    "maxHideTime": null
                };
                var response = {
                    "toastId": toastId,
                    "state": "visible",
                    "startTime": new Date(),
                    "options": options,
                    "map": map
                };
                personalizeToast();
                displayToast();
                handleEvents();
                publish(response);
                if (options.debug && console) {
                    console.log(response);
                }
                return $toastElement;
                function escapeHtml(source) {
                    if (source == null) {
                        source = "";
                    }
                    return source.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
                }
                function personalizeToast() {
                    setIcon();
                    setTitle();
                    setMessage();
                    setCloseButton();
                    setProgressBar();
                    setRTL();
                    setSequence();
                    setAria();
                }
                function setAria() {
                    var ariaValue = "";
                    switch (map.iconClass) {
                      case "toast-success":
                      case "toast-info":
                        ariaValue = "polite";
                        break;

                      default:
                        ariaValue = "assertive";
                    }
                    $toastElement.attr("aria-live", ariaValue);
                }
                function handleEvents() {
                    if (options.closeOnHover) {
                        $toastElement.hover(stickAround, delayedHideToast);
                    }
                    if (!options.onclick && options.tapToDismiss) {
                        $toastElement.click(hideToast);
                    }
                    if (options.closeButton && $closeElement) {
                        $closeElement.click(function(event) {
                            if (event.stopPropagation) {
                                event.stopPropagation();
                            } else if (event.cancelBubble !== undefined && event.cancelBubble !== true) {
                                event.cancelBubble = true;
                            }
                            if (options.onCloseClick) {
                                options.onCloseClick(event);
                            }
                            hideToast(true);
                        });
                    }
                    if (options.onclick) {
                        $toastElement.click(function(event) {
                            options.onclick(event);
                            hideToast();
                        });
                    }
                }
                function displayToast() {
                    $toastElement.hide();
                    $toastElement[options.showMethod]({
                        "duration": options.showDuration,
                        "easing": options.showEasing,
                        "complete": options.onShown
                    });
                    if (options.timeOut > 0) {
                        intervalId = setTimeout(hideToast, options.timeOut);
                        progressBar.maxHideTime = parseFloat(options.timeOut);
                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                        if (options.progressBar) {
                            progressBar.intervalId = setInterval(updateProgress, 10);
                        }
                    }
                }
                function setIcon() {
                    if (map.iconClass) {
                        $toastElement.addClass(options.toastClass).addClass(iconClass);
                    }
                }
                function setSequence() {
                    if (options.newestOnTop) {
                        $container.prepend($toastElement);
                    } else {
                        $container.append($toastElement);
                    }
                }
                function setTitle() {
                    if (map.title) {
                        var suffix = map.title;
                        if (options.escapeHtml) {
                            suffix = escapeHtml(map.title);
                        }
                        $titleElement.append(suffix).addClass(options.titleClass);
                        $toastElement.append($titleElement);
                    }
                }
                function setMessage() {
                    if (map.message) {
                        var suffix = map.message;
                        if (options.escapeHtml) {
                            suffix = escapeHtml(map.message);
                        }
                        $messageElement.append(suffix).addClass(options.messageClass);
                        $toastElement.append($messageElement);
                    }
                }
                function setCloseButton() {
                    if (options.closeButton) {
                        $closeElement.addClass(options.closeClass).attr("role", "button");
                        $toastElement.prepend($closeElement);
                    }
                }
                function setProgressBar() {
                    if (options.progressBar) {
                        $progressElement.addClass(options.progressClass);
                        $toastElement.prepend($progressElement);
                    }
                }
                function setRTL() {
                    if (options.rtl) {
                        $toastElement.addClass("rtl");
                    }
                }
                function shouldExit(options, map) {
                    if (options.preventDuplicates) {
                        if (map.message === previousToast) {
                            return true;
                        } else {
                            previousToast = map.message;
                        }
                    }
                    return false;
                }
                function hideToast(override) {
                    var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;
                    var duration = override && options.closeDuration !== false ? options.closeDuration : options.hideDuration;
                    var easing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;
                    if ($(":focus", $toastElement).length && !override) {
                        return;
                    }
                    clearTimeout(progressBar.intervalId);
                    return $toastElement[method]({
                        "duration": duration,
                        "easing": easing,
                        "complete": function() {
                            removeToast($toastElement);
                            clearTimeout(intervalId);
                            if (options.onHidden && response.state !== "hidden") {
                                options.onHidden();
                            }
                            response.state = "hidden";
                            response.endTime = new Date();
                            publish(response);
                        }
                    });
                }
                function delayedHideToast() {
                    if (options.timeOut > 0 || options.extendedTimeOut > 0) {
                        intervalId = setTimeout(hideToast, options.extendedTimeOut);
                        progressBar.maxHideTime = parseFloat(options.extendedTimeOut);
                        progressBar.hideEta = new Date().getTime() + progressBar.maxHideTime;
                    }
                }
                function stickAround() {
                    clearTimeout(intervalId);
                    progressBar.hideEta = 0;
                    $toastElement.stop(true, true)[options.showMethod]({
                        "duration": options.showDuration,
                        "easing": options.showEasing
                    });
                }
                function updateProgress() {
                    var percentage = (progressBar.hideEta - new Date().getTime()) / progressBar.maxHideTime * 100;
                    $progressElement.width(percentage + "%");
                }
            }
            function getOptions() {
                return $.extend({}, getDefaults(), toastr.options);
            }
            function removeToast($toastElement) {
                if (!$container) {
                    $container = getContainer();
                }
                if ($toastElement.is(":visible")) {
                    return;
                }
                $toastElement.remove();
                $toastElement = null;
                if ($container.children().length === 0) {
                    $container.remove();
                    previousToast = undefined;
                }
            }
        }();
    });
})(typeof define === "function" && define.amd ? define : function(deps, factory) {
    if (typeof module !== "undefined" && module.exports) {
        module.exports = factory(require("jquery"));
    } else {
        window.toastr = factory(window.jQuery);
    }
});

(function(window, document, undefined) {
    var modalClass = ".sweet-alert", overlayClass = ".sweet-overlay", alertTypes = [ "error", "warning", "info", "success" ], defaultParams = {
        "title": "",
        "text": "",
        "type": null,
        "allowOutsideClick": false,
        "showConfirmButton": true,
        "showCancelButton": false,
        "closeOnConfirm": true,
        "closeOnCancel": true,
        "confirmButtonText": "OK",
        "confirmButtonColor": "#AEDEF4",
        "cancelButtonText": "Cancel",
        "imageUrl": null,
        "imageSize": null,
        "timer": null,
        "customClass": "",
        "html": false,
        "animation": true,
        "allowEscapeKey": true
    };
    var getModal = function() {
        var $modal = document.querySelector(modalClass);
        if (!$modal) {
            sweetAlertInitialize();
            $modal = getModal();
        }
        return $modal;
    }, getOverlay = function() {
        return document.querySelector(overlayClass);
    }, hasClass = function(elem, className) {
        return new RegExp(" " + className + " ").test(" " + elem.className + " ");
    }, addClass = function(elem, className) {
        if (!hasClass(elem, className)) {
            elem.className += " " + className;
        }
    }, removeClass = function(elem, className) {
        var newClass = " " + elem.className.replace(/[\t\r\n]/g, " ") + " ";
        if (hasClass(elem, className)) {
            while (newClass.indexOf(" " + className + " ") >= 0) {
                newClass = newClass.replace(" " + className + " ", " ");
            }
            elem.className = newClass.replace(/^\s+|\s+$/g, "");
        }
    }, escapeHtml = function(str) {
        var div = document.createElement("div");
        div.appendChild(document.createTextNode(str));
        return div.innerHTML;
    }, _show = function(elem) {
        elem.style.opacity = "";
        elem.style.display = "block";
    }, show = function(elems) {
        if (elems && !elems.length) {
            return _show(elems);
        }
        for (var i = 0; i < elems.length; ++i) {
            _show(elems[i]);
        }
    }, _hide = function(elem) {
        elem.style.opacity = "";
        elem.style.display = "none";
    }, hide = function(elems) {
        if (elems && !elems.length) {
            return _hide(elems);
        }
        for (var i = 0; i < elems.length; ++i) {
            _hide(elems[i]);
        }
    }, isDescendant = function(parent, child) {
        var node = child.parentNode;
        while (node !== null) {
            if (node === parent) {
                return true;
            }
            node = node.parentNode;
        }
        return false;
    }, getTopMargin = function(elem) {
        elem.style.left = "-9999px";
        elem.style.display = "block";
        var height = elem.clientHeight, padding;
        if (typeof getComputedStyle !== "undefined") {
            padding = parseInt(getComputedStyle(elem).getPropertyValue("padding"), 10);
        } else {
            padding = parseInt(elem.currentStyle.padding);
        }
        elem.style.left = "";
        elem.style.display = "none";
        return "-" + parseInt(height / 2 + padding) + "px";
    }, fadeIn = function(elem, interval) {
        if (+elem.style.opacity < 1) {
            interval = interval || 16;
            elem.style.opacity = 0;
            elem.style.display = "block";
            var last = +new Date();
            var tick = function() {
                elem.style.opacity = +elem.style.opacity + (new Date() - last) / 100;
                last = +new Date();
                if (+elem.style.opacity < 1) {
                    setTimeout(tick, interval);
                }
            };
            tick();
        }
        elem.style.display = "block";
    }, fadeOut = function(elem, interval) {
        interval = interval || 16;
        elem.style.opacity = 1;
        var last = +new Date();
        var tick = function() {
            elem.style.opacity = +elem.style.opacity - (new Date() - last) / 100;
            last = +new Date();
            if (+elem.style.opacity > 0) {
                setTimeout(tick, interval);
            } else {
                elem.style.display = "none";
            }
        };
        tick();
    }, fireClick = function(node) {
        if (typeof MouseEvent === "function") {
            var mevt = new MouseEvent("click", {
                "view": window,
                "bubbles": false,
                "cancelable": true
            });
            node.dispatchEvent(mevt);
        } else if (document.createEvent) {
            var evt = document.createEvent("MouseEvents");
            evt.initEvent("click", false, false);
            node.dispatchEvent(evt);
        } else if (document.createEventObject) {
            node.fireEvent("onclick");
        } else if (typeof node.onclick === "function") {
            node.onclick();
        }
    }, stopEventPropagation = function(e) {
        if (typeof e.stopPropagation === "function") {
            e.stopPropagation();
            e.preventDefault();
        } else if (window.event && window.event.hasOwnProperty("cancelBubble")) {
            window.event.cancelBubble = true;
        }
    };
    var previousActiveElement, previousDocumentClick, previousWindowKeyDown, lastFocusedButton;
    var sweetAlertInitialize = function() {
        var sweetHTML = '<div class="sweet-overlay" tabIndex="-1"></div><div class="sweet-alert" tabIndex="-1"><div class="sa-icon sa-error"><span class="sa-x-mark"><span class="sa-line sa-left"></span><span class="sa-line sa-right"></span></span></div><div class="sa-icon sa-warning"> <span class="sa-body"></span> <span class="sa-dot"></span> </div> <div class="sa-icon sa-info"></div> <div class="sa-icon sa-success"> <span class="sa-line sa-tip"></span> <span class="sa-line sa-long"></span> <div class="sa-placeholder"></div> <div class="sa-fix"></div> </div> <div class="sa-icon sa-custom"></div> <h2>Title</h2><p>Text</p><button class="cancel" tabIndex="2">Cancel</button><button class="confirm" tabIndex="1">OK</button></div>', sweetWrap = document.createElement("div");
        sweetWrap.innerHTML = sweetHTML;
        while (sweetWrap.firstChild) {
            document.body.appendChild(sweetWrap.firstChild);
        }
    };
    var sweetAlert, swal;
    sweetAlert = swal = function() {
        var customizations = arguments[0];
        function argumentOrDefault(key) {
            var args = customizations;
            if (typeof args[key] !== "undefined") {
                return args[key];
            } else {
                return defaultParams[key];
            }
        }
        if (arguments[0] === undefined) {
            logStr("SweetAlert expects at least 1 attribute!");
            return false;
        }
        var params = extend({}, defaultParams);
        switch (typeof arguments[0]) {
          case "string":
            params.title = arguments[0];
            params.text = arguments[1] || "";
            params.type = arguments[2] || "";
            break;

          case "object":
            if (arguments[0].title === undefined) {
                logStr('Missing "title" argument!');
                return false;
            }
            params.title = arguments[0].title;
            var availableCustoms = [ "text", "type", "customClass", "allowOutsideClick", "showConfirmButton", "showCancelButton", "closeOnConfirm", "closeOnCancel", "timer", "confirmButtonColor", "cancelButtonText", "imageUrl", "imageSize", "html", "animation", "allowEscapeKey" ];
            var numCustoms = availableCustoms.length;
            for (var customIndex = 0; customIndex < numCustoms; customIndex++) {
                var customName = availableCustoms[customIndex];
                params[customName] = argumentOrDefault(customName);
            }
            params.confirmButtonText = params.showCancelButton ? "Confirm" : defaultParams.confirmButtonText;
            params.confirmButtonText = argumentOrDefault("confirmButtonText");
            params.doneFunction = arguments[1] || null;
            break;

          default:
            logStr('Unexpected type of argument! Expected "string" or "object", got ' + typeof arguments[0]);
            return false;
        }
        setParameters(params);
        fixVerticalPosition();
        openModal();
        var modal = getModal();
        var onButtonEvent = function(event) {
            var e = event || window.event;
            var target = e.target || e.srcElement, targetedConfirm = target.className.indexOf("confirm") !== -1, modalIsVisible = hasClass(modal, "visible"), doneFunctionExists = params.doneFunction && modal.getAttribute("data-has-done-function") === "true";
            switch (e.type) {
              case "mouseover":
                if (targetedConfirm) {
                    target.style.backgroundColor = colorLuminance(params.confirmButtonColor, -.04);
                }
                break;

              case "mouseout":
                if (targetedConfirm) {
                    target.style.backgroundColor = params.confirmButtonColor;
                }
                break;

              case "mousedown":
                if (targetedConfirm) {
                    target.style.backgroundColor = colorLuminance(params.confirmButtonColor, -.14);
                }
                break;

              case "mouseup":
                if (targetedConfirm) {
                    target.style.backgroundColor = colorLuminance(params.confirmButtonColor, -.04);
                }
                break;

              case "focus":
                var $confirmButton = modal.querySelector("button.confirm"), $cancelButton = modal.querySelector("button.cancel");
                if (targetedConfirm) {
                    $cancelButton.style.boxShadow = "none";
                } else {
                    $confirmButton.style.boxShadow = "none";
                }
                break;

              case "click":
                if (targetedConfirm && doneFunctionExists && modalIsVisible) {
                    params.doneFunction(true);
                    if (params.closeOnConfirm) {
                        sweetAlert.close();
                    }
                } else if (doneFunctionExists && modalIsVisible) {
                    var functionAsStr = String(params.doneFunction).replace(/\s/g, "");
                    var functionHandlesCancel = functionAsStr.substring(0, 9) === "function(" && functionAsStr.substring(9, 10) !== ")";
                    if (functionHandlesCancel) {
                        params.doneFunction(false);
                    }
                    if (params.closeOnCancel) {
                        sweetAlert.close();
                    }
                } else {
                    sweetAlert.close();
                }
                break;
            }
        };
        var $buttons = modal.querySelectorAll("button");
        for (var i = 0; i < $buttons.length; i++) {
            $buttons[i].onclick = onButtonEvent;
            $buttons[i].onmouseover = onButtonEvent;
            $buttons[i].onmouseout = onButtonEvent;
            $buttons[i].onmousedown = onButtonEvent;
            $buttons[i].onfocus = onButtonEvent;
        }
        previousDocumentClick = document.onclick;
        document.onclick = function(event) {
            var e = event || window.event;
            var target = e.target || e.srcElement;
            var clickedOnModal = modal === target, clickedOnModalChild = isDescendant(modal, target), modalIsVisible = hasClass(modal, "visible"), outsideClickIsAllowed = modal.getAttribute("data-allow-ouside-click") === "true";
            if (!clickedOnModal && !clickedOnModalChild && modalIsVisible && outsideClickIsAllowed) {
                sweetAlert.close();
            }
        };
        var $okButton = modal.querySelector("button.confirm"), $cancelButton = modal.querySelector("button.cancel"), $modalButtons = modal.querySelectorAll("button[tabindex]");
        function handleKeyDown(event) {
            var e = event || window.event;
            var keyCode = e.keyCode || e.which;
            if ([ 9, 13, 32, 27 ].indexOf(keyCode) === -1) {
                return;
            }
            var $targetElement = e.target || e.srcElement;
            var btnIndex = -1;
            for (var i = 0; i < $modalButtons.length; i++) {
                if ($targetElement === $modalButtons[i]) {
                    btnIndex = i;
                    break;
                }
            }
            if (keyCode === 9) {
                if (btnIndex === -1) {
                    $targetElement = $okButton;
                } else {
                    if (btnIndex === $modalButtons.length - 1) {
                        $targetElement = $modalButtons[0];
                    } else {
                        $targetElement = $modalButtons[btnIndex + 1];
                    }
                }
                stopEventPropagation(e);
                $targetElement.focus();
                setFocusStyle($targetElement, params.confirmButtonColor);
            } else {
                if (keyCode === 13 || keyCode === 32) {
                    if (btnIndex === -1) {
                        $targetElement = $okButton;
                    } else {
                        $targetElement = undefined;
                    }
                } else if (keyCode === 27 && params.allowEscapeKey === true) {
                    $targetElement = $cancelButton;
                } else {
                    $targetElement = undefined;
                }
                if ($targetElement !== undefined) {
                    fireClick($targetElement, e);
                }
            }
        }
        previousWindowKeyDown = window.onkeydown;
        window.onkeydown = handleKeyDown;
        function handleOnBlur(event) {
            var e = event || window.event;
            var $targetElement = e.target || e.srcElement, $focusElement = e.relatedTarget, modalIsVisible = hasClass(modal, "visible");
            if (modalIsVisible) {
                var btnIndex = -1;
                if ($focusElement !== null) {
                    for (var i = 0; i < $modalButtons.length; i++) {
                        if ($focusElement === $modalButtons[i]) {
                            btnIndex = i;
                            break;
                        }
                    }
                    if (btnIndex === -1) {
                        $targetElement.focus();
                    }
                } else {
                    lastFocusedButton = $targetElement;
                }
            }
        }
        $okButton.onblur = handleOnBlur;
        $cancelButton.onblur = handleOnBlur;
        window.onfocus = function() {
            window.setTimeout(function() {
                if (lastFocusedButton !== undefined) {
                    lastFocusedButton.focus();
                    lastFocusedButton = undefined;
                }
            }, 0);
        };
    };
    sweetAlert.setDefaults = swal.setDefaults = function(userParams) {
        if (!userParams) {
            throw new Error("userParams is required");
        }
        if (typeof userParams !== "object") {
            throw new Error("userParams has to be a object");
        }
        extend(defaultParams, userParams);
    };
    function setParameters(params) {
        var modal = getModal();
        var $title = modal.querySelector("h2"), $text = modal.querySelector("p"), $cancelBtn = modal.querySelector("button.cancel"), $confirmBtn = modal.querySelector("button.confirm");
        $title.innerHTML = params.html ? params.title : escapeHtml(params.title).split("\n").join("<br>");
        $text.innerHTML = params.html ? params.text : escapeHtml(params.text || "").split("\n").join("<br>");
        if (params.text) {
            show($text);
        }
        if (params.customClass) {
            addClass(modal, params.customClass);
            modal.setAttribute("data-custom-class", params.customClass);
        } else {
            var customClass = modal.getAttribute("data-custom-class");
            removeClass(modal, customClass);
            modal.setAttribute("data-custom-class", "");
        }
        hide(modal.querySelectorAll(".sa-icon"));
        if (params.type && !isIE8()) {
            var validType = false;
            for (var i = 0; i < alertTypes.length; i++) {
                if (params.type === alertTypes[i]) {
                    validType = true;
                    break;
                }
            }
            if (!validType) {
                logStr("Unknown alert type: " + params.type);
                return false;
            }
            var $icon = modal.querySelector(".sa-icon." + "sa-" + params.type);
            show($icon);
            switch (params.type) {
              case "success":
                addClass($icon, "animate");
                addClass($icon.querySelector(".sa-tip"), "animateSuccessTip");
                addClass($icon.querySelector(".sa-long"), "animateSuccessLong");
                break;

              case "error":
                addClass($icon, "animateErrorIcon");
                addClass($icon.querySelector(".sa-x-mark"), "animateXMark");
                break;

              case "warning":
                addClass($icon, "pulseWarning");
                addClass($icon.querySelector(".sa-body"), "pulseWarningIns");
                addClass($icon.querySelector(".sa-dot"), "pulseWarningIns");
                break;
            }
        }
        if (params.imageUrl) {
            var $customIcon = modal.querySelector(".sa-icon.sa-custom");
            $customIcon.style.backgroundImage = "url(" + params.imageUrl + ")";
            show($customIcon);
            var _imgWidth = 80, _imgHeight = 80;
            if (params.imageSize) {
                var dimensions = params.imageSize.toString().split("x");
                var imgWidth = dimensions[0];
                var imgHeight = dimensions[1];
                if (!imgWidth || !imgHeight) {
                    logStr("Parameter imageSize expects value with format WIDTHxHEIGHT, got " + params.imageSize);
                } else {
                    _imgWidth = imgWidth;
                    _imgHeight = imgHeight;
                }
            }
            $customIcon.setAttribute("style", $customIcon.getAttribute("style") + "width:" + _imgWidth + "px; height:" + _imgHeight + "px");
        }
        modal.setAttribute("data-has-cancel-button", params.showCancelButton);
        if (params.showCancelButton) {
            $cancelBtn.style.display = "inline-block";
        } else {
            hide($cancelBtn);
        }
        modal.setAttribute("data-has-confirm-button", params.showConfirmButton);
        if (params.showConfirmButton) {
            $confirmBtn.style.display = "inline-block";
        } else {
            hide($confirmBtn);
        }
        if (params.cancelButtonText) {
            $cancelBtn.innerHTML = escapeHtml(params.cancelButtonText);
        }
        if (params.confirmButtonText) {
            $confirmBtn.innerHTML = escapeHtml(params.confirmButtonText);
        }
        $confirmBtn.style.backgroundColor = params.confirmButtonColor;
        setFocusStyle($confirmBtn, params.confirmButtonColor);
        modal.setAttribute("data-allow-ouside-click", params.allowOutsideClick);
        var hasDoneFunction = params.doneFunction ? true : false;
        modal.setAttribute("data-has-done-function", hasDoneFunction);
        if (!params.animation) {
            modal.setAttribute("data-animation", "none");
        } else {
            modal.setAttribute("data-animation", "pop");
        }
        modal.setAttribute("data-timer", params.timer);
    }
    function colorLuminance(hex, lum) {
        hex = String(hex).replace(/[^0-9a-f]/gi, "");
        if (hex.length < 6) {
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
        }
        lum = lum || 0;
        var rgb = "#", c, i;
        for (i = 0; i < 3; i++) {
            c = parseInt(hex.substr(i * 2, 2), 16);
            c = Math.round(Math.min(Math.max(0, c + c * lum), 255)).toString(16);
            rgb += ("00" + c).substr(c.length);
        }
        return rgb;
    }
    function extend(a, b) {
        for (var key in b) {
            if (b.hasOwnProperty(key)) {
                a[key] = b[key];
            }
        }
        return a;
    }
    function hexToRgb(hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? parseInt(result[1], 16) + ", " + parseInt(result[2], 16) + ", " + parseInt(result[3], 16) : null;
    }
    function setFocusStyle($button, bgColor) {
        var rgbColor = hexToRgb(bgColor);
        $button.style.boxShadow = "0 0 2px rgba(" + rgbColor + ", 0.8), inset 0 0 0 1px rgba(0, 0, 0, 0.05)";
    }
    function openModal() {
        var modal = getModal();
        fadeIn(getOverlay(), 10);
        show(modal);
        addClass(modal, "showSweetAlert");
        removeClass(modal, "hideSweetAlert");
        previousActiveElement = document.activeElement;
        var $okButton = modal.querySelector("button.confirm");
        $okButton.focus();
        setTimeout(function() {
            addClass(modal, "visible");
        }, 500);
        var timer = modal.getAttribute("data-timer");
        if (timer !== "null" && timer !== "") {
            modal.timeout = setTimeout(function() {
                sweetAlert.close();
            }, timer);
        }
    }
    sweetAlert.close = swal.close = function() {
        var modal = getModal();
        fadeOut(getOverlay(), 5);
        fadeOut(modal, 5);
        removeClass(modal, "showSweetAlert");
        addClass(modal, "hideSweetAlert");
        removeClass(modal, "visible");
        var $successIcon = modal.querySelector(".sa-icon.sa-success");
        removeClass($successIcon, "animate");
        removeClass($successIcon.querySelector(".sa-tip"), "animateSuccessTip");
        removeClass($successIcon.querySelector(".sa-long"), "animateSuccessLong");
        var $errorIcon = modal.querySelector(".sa-icon.sa-error");
        removeClass($errorIcon, "animateErrorIcon");
        removeClass($errorIcon.querySelector(".sa-x-mark"), "animateXMark");
        var $warningIcon = modal.querySelector(".sa-icon.sa-warning");
        removeClass($warningIcon, "pulseWarning");
        removeClass($warningIcon.querySelector(".sa-body"), "pulseWarningIns");
        removeClass($warningIcon.querySelector(".sa-dot"), "pulseWarningIns");
        window.onkeydown = previousWindowKeyDown;
        document.onclick = previousDocumentClick;
        if (previousActiveElement) {
            previousActiveElement.focus();
        }
        lastFocusedButton = undefined;
        clearTimeout(modal.timeout);
    };
    function fixVerticalPosition() {
        var modal = getModal();
        modal.style.marginTop = getTopMargin(getModal());
    }
    function isIE8() {
        if (window.attachEvent && !window.addEventListener) {
            return true;
        } else {
            return false;
        }
    }
    function logStr(string) {
        if (window.console) {
            window.console.log("SweetAlert: " + string);
        }
    }
    if (typeof define === "function" && define.amd) {
        define(function() {
            return sweetAlert;
        });
    } else if (typeof module !== "undefined" && module.exports) {
        module.exports = sweetAlert;
    } else if (typeof window !== "undefined") {
        window.sweetAlert = window.swal = sweetAlert;
    }
})(window, document);